
test_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005604  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  08005714  08005714  00006714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006504  08006504  00008074  2**0
                  CONTENTS
  4 .ARM          00000000  08006504  08006504  00008074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006504  08006504  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006504  08006504  00007504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006508  08006508  00007508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800650c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000740  20000074  08006580  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007b4  08006580  000087b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8f4  00000000  00000000  0000809d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c1  00000000  00000000  00014991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00016a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000914  00000000  00000000  00017610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ae5  00000000  00000000  00017f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec5f  00000000  00000000  00030a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087511  00000000  00000000  0003f668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6b79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b88  00000000  00000000  000c6bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000ca744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080056fc 	.word	0x080056fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080056fc 	.word	0x080056fc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__gesf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpsf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__lesf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpsf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpsf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009f6:	d011      	beq.n	8000a1c <__cmpsf2+0x40>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009fe:	bf18      	it	ne
 8000a00:	ea90 0f01 	teqne	r0, r1
 8000a04:	bf58      	it	pl
 8000a06:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a0a:	bf88      	it	hi
 8000a0c:	17c8      	asrhi	r0, r1, #31
 8000a0e:	bf38      	it	cc
 8000a10:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a14:	bf18      	it	ne
 8000a16:	f040 0001 	orrne.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a20:	d102      	bne.n	8000a28 <__cmpsf2+0x4c>
 8000a22:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a26:	d105      	bne.n	8000a34 <__cmpsf2+0x58>
 8000a28:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a2c:	d1e4      	bne.n	80009f8 <__cmpsf2+0x1c>
 8000a2e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a32:	d0e1      	beq.n	80009f8 <__cmpsf2+0x1c>
 8000a34:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <__aeabi_cfrcmple>:
 8000a3c:	4684      	mov	ip, r0
 8000a3e:	4608      	mov	r0, r1
 8000a40:	4661      	mov	r1, ip
 8000a42:	e7ff      	b.n	8000a44 <__aeabi_cfcmpeq>

08000a44 <__aeabi_cfcmpeq>:
 8000a44:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a46:	f7ff ffc9 	bl	80009dc <__cmpsf2>
 8000a4a:	2800      	cmp	r0, #0
 8000a4c:	bf48      	it	mi
 8000a4e:	f110 0f00 	cmnmi.w	r0, #0
 8000a52:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a54 <__aeabi_fcmpeq>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff fff4 	bl	8000a44 <__aeabi_cfcmpeq>
 8000a5c:	bf0c      	ite	eq
 8000a5e:	2001      	moveq	r0, #1
 8000a60:	2000      	movne	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_fcmplt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffea 	bl	8000a44 <__aeabi_cfcmpeq>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_fcmple>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffe0 	bl	8000a44 <__aeabi_cfcmpeq>
 8000a84:	bf94      	ite	ls
 8000a86:	2001      	movls	r0, #1
 8000a88:	2000      	movhi	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fcmpge>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffd2 	bl	8000a3c <__aeabi_cfrcmple>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fcmpgt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffc8 	bl	8000a3c <__aeabi_cfrcmple>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_f2uiz>:
 8000ab8:	0042      	lsls	r2, r0, #1
 8000aba:	d20e      	bcs.n	8000ada <__aeabi_f2uiz+0x22>
 8000abc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ac0:	d30b      	bcc.n	8000ada <__aeabi_f2uiz+0x22>
 8000ac2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ac6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aca:	d409      	bmi.n	8000ae0 <__aeabi_f2uiz+0x28>
 8000acc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ad0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr
 8000ae0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ae4:	d101      	bne.n	8000aea <__aeabi_f2uiz+0x32>
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	d102      	bne.n	8000af0 <__aeabi_f2uiz+0x38>
 8000aea:	f04f 30ff 	mov.w	r0, #4294967295
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3304      	adds	r3, #4
 8000b14:	2280      	movs	r2, #128	@ 0x80
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 fec5 	bl	80048a8 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3384      	adds	r3, #132	@ 0x84
 8000b22:	2280      	movs	r2, #128	@ 0x80
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f003 febe 	bl	80048a8 <memset>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	460b      	mov	r3, r1
 8000b42:	72fb      	strb	r3, [r7, #11]
 8000b44:	4613      	mov	r3, r2
 8000b46:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8000b48:	893b      	ldrh	r3, [r7, #8]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f003 fcb5 	bl	80044bc <malloc>
 8000b52:	4603      	mov	r3, r0
 8000b54:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	7afa      	ldrb	r2, [r7, #11]
 8000b5a:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d009      	beq.n	8000b76 <max30102_write+0x42>
 8000b62:	893b      	ldrh	r3, [r7, #8]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d006      	beq.n	8000b76 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	893a      	ldrh	r2, [r7, #8]
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 ff24 	bl	80049be <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	893b      	ldrh	r3, [r7, #8]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b84:	9200      	str	r2, [sp, #0]
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	21ae      	movs	r1, #174	@ 0xae
 8000b8a:	f001 fe99 	bl	80028c0 <HAL_I2C_Master_Transmit>
    free(payload);
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f003 fc9c 	bl	80044cc <free>
}
 8000b94:	bf00      	nop
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af02      	add	r7, sp, #8
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	460b      	mov	r3, r1
 8000baa:	72fb      	strb	r3, [r7, #11]
 8000bac:	4613      	mov	r3, r2
 8000bae:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8000bb0:	7afb      	ldrb	r3, [r7, #11]
 8000bb2:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	6818      	ldr	r0, [r3, #0]
 8000bb8:	f107 0217 	add.w	r2, r7, #23
 8000bbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	21ae      	movs	r1, #174	@ 0xae
 8000bc6:	f001 fe7b 	bl	80028c0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	893b      	ldrh	r3, [r7, #8]
 8000bd0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bd4:	9200      	str	r2, [sp, #0]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	21ae      	movs	r1, #174	@ 0xae
 8000bda:	f001 ff6f 	bl	8002abc <HAL_I2C_Master_Receive>
}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b084      	sub	sp, #16
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8000bee:	2340      	movs	r3, #64	@ 0x40
 8000bf0:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8000bf2:	f107 020f 	add.w	r2, r7, #15
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2109      	movs	r1, #9
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff9a 	bl	8000b34 <max30102_write>
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8000c18:	f107 020f 	add.w	r2, r7, #15
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	2102      	movs	r1, #2
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ffbb 	bl	8000b9c <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	01db      	lsls	r3, r3, #7
 8000c34:	b25a      	sxtb	r2, r3
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8000c42:	f107 020f 	add.w	r2, r7, #15
 8000c46:	2301      	movs	r3, #1
 8000c48:	2102      	movs	r1, #2
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ff72 	bl	8000b34 <max30102_write>
}
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 8000c72:	f107 020f 	add.w	r2, r7, #15
 8000c76:	2301      	movs	r3, #1
 8000c78:	2103      	movs	r1, #3
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ff5a 	bl	8000b34 <max30102_write>
}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 8000ca2:	f107 020f 	add.w	r2, r7, #15
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	2121      	movs	r1, #33	@ 0x21
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ff42 	bl	8000b34 <max30102_write>
}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b084      	sub	sp, #16
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 8000cda:	2300      	movs	r3, #0
 8000cdc:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 8000cde:	f107 020c 	add.w	r2, r7, #12
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ff58 	bl	8000b9c <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 8000cec:	7b3b      	ldrb	r3, [r7, #12]
 8000cee:	09db      	lsrs	r3, r3, #7
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f000 f94d 	bl	8000f9a <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 8000d00:	7b7b      	ldrb	r3, [r7, #13]
 8000d02:	085b      	lsrs	r3, r3, #1
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d007      	beq.n	8000d1e <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 8000d0e:	f107 020a 	add.w	r2, r7, #10
 8000d12:	f107 030b 	add.w	r3, r7, #11
 8000d16:	4619      	mov	r1, r3
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f000 f9a3 	bl	8001064 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b084      	sub	sp, #16
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	460b      	mov	r3, r1
 8000d38:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8000d3a:	f107 020f 	add.w	r2, r7, #15
 8000d3e:	2301      	movs	r3, #1
 8000d40:	2109      	movs	r1, #9
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ff2a 	bl	8000b9c <max30102_read>
    config = (config & 0xf8) | mode;
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	b25b      	sxtb	r3, r3
 8000d4c:	f023 0307 	bic.w	r3, r3, #7
 8000d50:	b25a      	sxtb	r2, r3
 8000d52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 8000d5e:	f107 020f 	add.w	r2, r7, #15
 8000d62:	2301      	movs	r3, #1
 8000d64:	2109      	movs	r1, #9
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff fee4 	bl	8000b34 <max30102_write>
    max30102_clear_fifo(obj);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f000 f8f5 	bl	8000f5c <max30102_clear_fifo>
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	460b      	mov	r3, r1
 8000d84:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8000d86:	f107 020f 	add.w	r2, r7, #15
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	210a      	movs	r1, #10
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ff04 	bl	8000b9c <max30102_read>
    config = (config & 0x63) << MAX30102_SPO2_SR;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8000da2:	f107 020f 	add.w	r2, r7, #15
 8000da6:	2301      	movs	r3, #1
 8000da8:	210a      	movs	r1, #10
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff fec2 	bl	8000b34 <max30102_write>
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8000dc4:	f107 020f 	add.w	r2, r7, #15
 8000dc8:	2301      	movs	r3, #1
 8000dca:	210a      	movs	r1, #10
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fee5 	bl	8000b9c <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	b25b      	sxtb	r3, r3
 8000dd6:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8000dda:	b25a      	sxtb	r2, r3
 8000ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8000de8:	f107 020f 	add.w	r2, r7, #15
 8000dec:	2301      	movs	r3, #1
 8000dee:	210a      	movs	r1, #10
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff fe9f 	bl	8000b34 <max30102_write>
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b084      	sub	sp, #16
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	460b      	mov	r3, r1
 8000e08:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8000e0a:	f107 020f 	add.w	r2, r7, #15
 8000e0e:	2301      	movs	r3, #1
 8000e10:	210a      	movs	r1, #10
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fec2 	bl	8000b9c <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	f003 031f 	and.w	r3, r3, #31
 8000e20:	b25a      	sxtb	r2, r3
 8000e22:	78fb      	ldrb	r3, [r7, #3]
 8000e24:	015b      	lsls	r3, r3, #5
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8000e30:	f107 020f 	add.w	r2, r7, #15
 8000e34:	2301      	movs	r3, #1
 8000e36:	210a      	movs	r1, #10
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff fe7b 	bl	8000b34 <max30102_write>
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8000e52:	6838      	ldr	r0, [r7, #0]
 8000e54:	f7ff fae0 	bl	8000418 <__aeabi_f2d>
 8000e58:	a30d      	add	r3, pc, #52	@ (adr r3, 8000e90 <max30102_set_led_current_1+0x48>)
 8000e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5e:	f7ff fc5d 	bl	800071c <__aeabi_ddiv>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	4610      	mov	r0, r2
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f7ff fd3f 	bl	80008ec <__aeabi_d2uiz>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8000e74:	f107 020f 	add.w	r2, r7, #15
 8000e78:	2301      	movs	r3, #1
 8000e7a:	210c      	movs	r1, #12
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff fe59 	bl	8000b34 <max30102_write>
}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	f3af 8000 	nop.w
 8000e90:	9999999a 	.word	0x9999999a
 8000e94:	3fc99999 	.word	0x3fc99999

08000e98 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8000ea2:	6838      	ldr	r0, [r7, #0]
 8000ea4:	f7ff fab8 	bl	8000418 <__aeabi_f2d>
 8000ea8:	a30d      	add	r3, pc, #52	@ (adr r3, 8000ee0 <max30102_set_led_current_2+0x48>)
 8000eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eae:	f7ff fc35 	bl	800071c <__aeabi_ddiv>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f7ff fd17 	bl	80008ec <__aeabi_d2uiz>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8000ec4:	f107 020f 	add.w	r2, r7, #15
 8000ec8:	2301      	movs	r3, #1
 8000eca:	210d      	movs	r1, #13
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff fe31 	bl	8000b34 <max30102_write>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	f3af 8000 	nop.w
 8000ee0:	9999999a 	.word	0x9999999a
 8000ee4:	3fc99999 	.word	0x3fc99999

08000ee8 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	70fb      	strb	r3, [r7, #3]
 8000efa:	460b      	mov	r3, r1
 8000efc:	70bb      	strb	r3, [r7, #2]
 8000efe:	4613      	mov	r3, r2
 8000f00:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 8000f02:	2300      	movs	r3, #0
 8000f04:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 8000f06:	78fb      	ldrb	r3, [r7, #3]
 8000f08:	015b      	lsls	r3, r3, #5
 8000f0a:	b25a      	sxtb	r2, r3
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8000f18:	78bb      	ldrb	r3, [r7, #2]
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	b25a      	sxtb	r2, r3
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8000f30:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000f34:	f003 030f 	and.w	r3, r3, #15
 8000f38:	b25a      	sxtb	r2, r3
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 8000f46:	f107 020f 	add.w	r2, r7, #15
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	2108      	movs	r1, #8
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff fdf0 	bl	8000b34 <max30102_write>
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8000f68:	f107 020f 	add.w	r2, r7, #15
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	2104      	movs	r1, #4
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff fddf 	bl	8000b34 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 8000f76:	f107 020f 	add.w	r2, r7, #15
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	2106      	movs	r1, #6
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff fdd8 	bl	8000b34 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8000f84:	f107 020f 	add.w	r2, r7, #15
 8000f88:	2303      	movs	r3, #3
 8000f8a:	2105      	movs	r1, #5
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff fdd1 	bl	8000b34 <max30102_write>
}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b088      	sub	sp, #32
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	74fb      	strb	r3, [r7, #19]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 8000faa:	f107 0213 	add.w	r2, r7, #19
 8000fae:	2301      	movs	r3, #1
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff fdf2 	bl	8000b9c <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8000fb8:	f107 0212 	add.w	r2, r7, #18
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	2106      	movs	r1, #6
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff fdeb 	bl	8000b9c <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8000fc6:	7cfa      	ldrb	r2, [r7, #19]
 8000fc8:	7cbb      	ldrb	r3, [r7, #18]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8000fd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	dc03      	bgt.n	8000fe0 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8000fd8:	7ffb      	ldrb	r3, [r7, #31]
 8000fda:	3320      	adds	r3, #32
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	77bb      	strb	r3, [r7, #30]
 8000fe4:	e033      	b.n	800104e <max30102_read_fifo+0xb4>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 8000fe6:	f107 020c 	add.w	r2, r7, #12
 8000fea:	2306      	movs	r3, #6
 8000fec:	2107      	movs	r1, #7
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fdd4 	bl	8000b9c <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8000ff4:	7b3b      	ldrb	r3, [r7, #12]
 8000ff6:	041a      	lsls	r2, r3, #16
 8000ff8:	7b7b      	ldrb	r3, [r7, #13]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	7bba      	ldrb	r2, [r7, #14]
 8001000:	4313      	orrs	r3, r2
 8001002:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001006:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	041a      	lsls	r2, r3, #16
 800100c:	7c3b      	ldrb	r3, [r7, #16]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	4313      	orrs	r3, r2
 8001012:	7c7a      	ldrb	r2, [r7, #17]
 8001014:	4313      	orrs	r3, r2
 8001016:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800101a:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 800101c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 800102a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	3320      	adds	r3, #32
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 800103a:	6979      	ldr	r1, [r7, #20]
 800103c:	69b8      	ldr	r0, [r7, #24]
 800103e:	f000 fb73 	bl	8001728 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 8001042:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	3301      	adds	r3, #1
 800104a:	b2db      	uxtb	r3, r3
 800104c:	77bb      	strb	r3, [r7, #30]
 800104e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8001052:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001056:	429a      	cmp	r2, r3
 8001058:	dbc5      	blt.n	8000fe6 <max30102_read_fifo+0x4c>
    }
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	3720      	adds	r7, #32
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 8001070:	2301      	movs	r3, #1
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	211f      	movs	r1, #31
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f7ff fd90 	bl	8000b9c <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 800107c:	2301      	movs	r3, #1
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	2120      	movs	r1, #32
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	f7ff fd8a 	bl	8000b9c <max30102_read>
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <checkForBeat>:



bool checkForBeat(long irValue) {
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
    static long lastIrValue = 0;
    static bool rising = false;
    static long peakValue = 0;
    static long threshold = 1800; // Ngưỡng để xác định đỉnh

    if (irValue > lastIrValue) {
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <checkForBeat+0x68>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	429a      	cmp	r2, r3
 80010a0:	dd05      	ble.n	80010ae <checkForBeat+0x1e>
        rising = true;
 80010a2:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <checkForBeat+0x6c>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
        peakValue = irValue;
 80010a8:	4a15      	ldr	r2, [pc, #84]	@ (8001100 <checkForBeat+0x70>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
    }

    if (irValue < lastIrValue && rising) {
 80010ae:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <checkForBeat+0x68>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	da15      	bge.n	80010e4 <checkForBeat+0x54>
 80010b8:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <checkForBeat+0x6c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d011      	beq.n	80010e4 <checkForBeat+0x54>
        long delta = peakValue - irValue;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <checkForBeat+0x70>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	60fb      	str	r3, [r7, #12]

        if (delta > threshold) {
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <checkForBeat+0x74>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dd07      	ble.n	80010e4 <checkForBeat+0x54>
            rising = false;
 80010d4:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <checkForBeat+0x6c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
            lastIrValue = irValue;
 80010da:	4a07      	ldr	r2, [pc, #28]	@ (80010f8 <checkForBeat+0x68>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6013      	str	r3, [r2, #0]
            return true; // Phát hiện nhịp tim
 80010e0:	2301      	movs	r3, #1
 80010e2:	e003      	b.n	80010ec <checkForBeat+0x5c>
        }
    }

    lastIrValue = irValue;
 80010e4:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <checkForBeat+0x68>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
    return false;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000090 	.word	0x20000090
 80010fc:	20000094 	.word	0x20000094
 8001100:	20000098 	.word	0x20000098
 8001104:	20000000 	.word	0x20000000

08001108 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800110e:	f000 fa5d 	bl	80015cc <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001112:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001116:	2201      	movs	r2, #1
 8001118:	2178      	movs	r1, #120	@ 0x78
 800111a:	485b      	ldr	r0, [pc, #364]	@ (8001288 <SSD1306_Init+0x180>)
 800111c:	f001 ff3a 	bl	8002f94 <HAL_I2C_IsDeviceReady>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001126:	2300      	movs	r3, #0
 8001128:	e0a9      	b.n	800127e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800112a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800112e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001130:	e002      	b.n	8001138 <SSD1306_Init+0x30>
		p--;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3b01      	subs	r3, #1
 8001136:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f9      	bne.n	8001132 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800113e:	22ae      	movs	r2, #174	@ 0xae
 8001140:	2100      	movs	r1, #0
 8001142:	2078      	movs	r0, #120	@ 0x78
 8001144:	f000 fabc 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001148:	2220      	movs	r2, #32
 800114a:	2100      	movs	r1, #0
 800114c:	2078      	movs	r0, #120	@ 0x78
 800114e:	f000 fab7 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001152:	2210      	movs	r2, #16
 8001154:	2100      	movs	r1, #0
 8001156:	2078      	movs	r0, #120	@ 0x78
 8001158:	f000 fab2 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800115c:	22b0      	movs	r2, #176	@ 0xb0
 800115e:	2100      	movs	r1, #0
 8001160:	2078      	movs	r0, #120	@ 0x78
 8001162:	f000 faad 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001166:	22c8      	movs	r2, #200	@ 0xc8
 8001168:	2100      	movs	r1, #0
 800116a:	2078      	movs	r0, #120	@ 0x78
 800116c:	f000 faa8 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	2078      	movs	r0, #120	@ 0x78
 8001176:	f000 faa3 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800117a:	2210      	movs	r2, #16
 800117c:	2100      	movs	r1, #0
 800117e:	2078      	movs	r0, #120	@ 0x78
 8001180:	f000 fa9e 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001184:	2240      	movs	r2, #64	@ 0x40
 8001186:	2100      	movs	r1, #0
 8001188:	2078      	movs	r0, #120	@ 0x78
 800118a:	f000 fa99 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800118e:	2281      	movs	r2, #129	@ 0x81
 8001190:	2100      	movs	r1, #0
 8001192:	2078      	movs	r0, #120	@ 0x78
 8001194:	f000 fa94 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001198:	22ff      	movs	r2, #255	@ 0xff
 800119a:	2100      	movs	r1, #0
 800119c:	2078      	movs	r0, #120	@ 0x78
 800119e:	f000 fa8f 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80011a2:	22a1      	movs	r2, #161	@ 0xa1
 80011a4:	2100      	movs	r1, #0
 80011a6:	2078      	movs	r0, #120	@ 0x78
 80011a8:	f000 fa8a 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80011ac:	22a6      	movs	r2, #166	@ 0xa6
 80011ae:	2100      	movs	r1, #0
 80011b0:	2078      	movs	r0, #120	@ 0x78
 80011b2:	f000 fa85 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80011b6:	22a8      	movs	r2, #168	@ 0xa8
 80011b8:	2100      	movs	r1, #0
 80011ba:	2078      	movs	r0, #120	@ 0x78
 80011bc:	f000 fa80 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80011c0:	223f      	movs	r2, #63	@ 0x3f
 80011c2:	2100      	movs	r1, #0
 80011c4:	2078      	movs	r0, #120	@ 0x78
 80011c6:	f000 fa7b 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80011ca:	22a4      	movs	r2, #164	@ 0xa4
 80011cc:	2100      	movs	r1, #0
 80011ce:	2078      	movs	r0, #120	@ 0x78
 80011d0:	f000 fa76 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80011d4:	22d3      	movs	r2, #211	@ 0xd3
 80011d6:	2100      	movs	r1, #0
 80011d8:	2078      	movs	r0, #120	@ 0x78
 80011da:	f000 fa71 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2078      	movs	r0, #120	@ 0x78
 80011e4:	f000 fa6c 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80011e8:	22d5      	movs	r2, #213	@ 0xd5
 80011ea:	2100      	movs	r1, #0
 80011ec:	2078      	movs	r0, #120	@ 0x78
 80011ee:	f000 fa67 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80011f2:	22f0      	movs	r2, #240	@ 0xf0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2078      	movs	r0, #120	@ 0x78
 80011f8:	f000 fa62 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80011fc:	22d9      	movs	r2, #217	@ 0xd9
 80011fe:	2100      	movs	r1, #0
 8001200:	2078      	movs	r0, #120	@ 0x78
 8001202:	f000 fa5d 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001206:	2222      	movs	r2, #34	@ 0x22
 8001208:	2100      	movs	r1, #0
 800120a:	2078      	movs	r0, #120	@ 0x78
 800120c:	f000 fa58 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001210:	22da      	movs	r2, #218	@ 0xda
 8001212:	2100      	movs	r1, #0
 8001214:	2078      	movs	r0, #120	@ 0x78
 8001216:	f000 fa53 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800121a:	2212      	movs	r2, #18
 800121c:	2100      	movs	r1, #0
 800121e:	2078      	movs	r0, #120	@ 0x78
 8001220:	f000 fa4e 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001224:	22db      	movs	r2, #219	@ 0xdb
 8001226:	2100      	movs	r1, #0
 8001228:	2078      	movs	r0, #120	@ 0x78
 800122a:	f000 fa49 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800122e:	2220      	movs	r2, #32
 8001230:	2100      	movs	r1, #0
 8001232:	2078      	movs	r0, #120	@ 0x78
 8001234:	f000 fa44 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001238:	228d      	movs	r2, #141	@ 0x8d
 800123a:	2100      	movs	r1, #0
 800123c:	2078      	movs	r0, #120	@ 0x78
 800123e:	f000 fa3f 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001242:	2214      	movs	r2, #20
 8001244:	2100      	movs	r1, #0
 8001246:	2078      	movs	r0, #120	@ 0x78
 8001248:	f000 fa3a 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800124c:	22af      	movs	r2, #175	@ 0xaf
 800124e:	2100      	movs	r1, #0
 8001250:	2078      	movs	r0, #120	@ 0x78
 8001252:	f000 fa35 	bl	80016c0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001256:	222e      	movs	r2, #46	@ 0x2e
 8001258:	2100      	movs	r1, #0
 800125a:	2078      	movs	r0, #120	@ 0x78
 800125c:	f000 fa30 	bl	80016c0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001260:	2000      	movs	r0, #0
 8001262:	f000 f843 	bl	80012ec <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001266:	f000 f813 	bl	8001290 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <SSD1306_Init+0x184>)
 800126c:	2200      	movs	r2, #0
 800126e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <SSD1306_Init+0x184>)
 8001272:	2200      	movs	r2, #0
 8001274:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001276:	4b05      	ldr	r3, [pc, #20]	@ (800128c <SSD1306_Init+0x184>)
 8001278:	2201      	movs	r2, #1
 800127a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800127c:	2301      	movs	r3, #1
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200004a4 	.word	0x200004a4
 800128c:	2000049c 	.word	0x2000049c

08001290 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001296:	2300      	movs	r3, #0
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	e01d      	b.n	80012d8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	3b50      	subs	r3, #80	@ 0x50
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	2100      	movs	r1, #0
 80012a6:	2078      	movs	r0, #120	@ 0x78
 80012a8:	f000 fa0a 	bl	80016c0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2100      	movs	r1, #0
 80012b0:	2078      	movs	r0, #120	@ 0x78
 80012b2:	f000 fa05 	bl	80016c0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80012b6:	2210      	movs	r2, #16
 80012b8:	2100      	movs	r1, #0
 80012ba:	2078      	movs	r0, #120	@ 0x78
 80012bc:	f000 fa00 	bl	80016c0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	01db      	lsls	r3, r3, #7
 80012c4:	4a08      	ldr	r2, [pc, #32]	@ (80012e8 <SSD1306_UpdateScreen+0x58>)
 80012c6:	441a      	add	r2, r3
 80012c8:	2380      	movs	r3, #128	@ 0x80
 80012ca:	2140      	movs	r1, #64	@ 0x40
 80012cc:	2078      	movs	r0, #120	@ 0x78
 80012ce:	f000 f991 	bl	80015f4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	3301      	adds	r3, #1
 80012d6:	71fb      	strb	r3, [r7, #7]
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b07      	cmp	r3, #7
 80012dc:	d9de      	bls.n	800129c <SSD1306_UpdateScreen+0xc>
	}
}
 80012de:	bf00      	nop
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000009c 	.word	0x2000009c

080012ec <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <SSD1306_Fill+0x14>
 80012fc:	2300      	movs	r3, #0
 80012fe:	e000      	b.n	8001302 <SSD1306_Fill+0x16>
 8001300:	23ff      	movs	r3, #255	@ 0xff
 8001302:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001306:	4619      	mov	r1, r3
 8001308:	4803      	ldr	r0, [pc, #12]	@ (8001318 <SSD1306_Fill+0x2c>)
 800130a:	f003 facd 	bl	80048a8 <memset>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000009c 	.word	0x2000009c

0800131c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	80fb      	strh	r3, [r7, #6]
 8001326:	460b      	mov	r3, r1
 8001328:	80bb      	strh	r3, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	70fb      	strb	r3, [r7, #3]
	if (
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	2b7f      	cmp	r3, #127	@ 0x7f
 8001332:	d848      	bhi.n	80013c6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001334:	88bb      	ldrh	r3, [r7, #4]
 8001336:	2b3f      	cmp	r3, #63	@ 0x3f
 8001338:	d845      	bhi.n	80013c6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800133a:	4b25      	ldr	r3, [pc, #148]	@ (80013d0 <SSD1306_DrawPixel+0xb4>)
 800133c:	791b      	ldrb	r3, [r3, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf0c      	ite	eq
 8001348:	2301      	moveq	r3, #1
 800134a:	2300      	movne	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d11a      	bne.n	800138c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001356:	88fa      	ldrh	r2, [r7, #6]
 8001358:	88bb      	ldrh	r3, [r7, #4]
 800135a:	08db      	lsrs	r3, r3, #3
 800135c:	b298      	uxth	r0, r3
 800135e:	4603      	mov	r3, r0
 8001360:	01db      	lsls	r3, r3, #7
 8001362:	4413      	add	r3, r2
 8001364:	4a1b      	ldr	r2, [pc, #108]	@ (80013d4 <SSD1306_DrawPixel+0xb8>)
 8001366:	5cd3      	ldrb	r3, [r2, r3]
 8001368:	b25a      	sxtb	r2, r3
 800136a:	88bb      	ldrh	r3, [r7, #4]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	2101      	movs	r1, #1
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	b25b      	sxtb	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b259      	sxtb	r1, r3
 800137c:	88fa      	ldrh	r2, [r7, #6]
 800137e:	4603      	mov	r3, r0
 8001380:	01db      	lsls	r3, r3, #7
 8001382:	4413      	add	r3, r2
 8001384:	b2c9      	uxtb	r1, r1
 8001386:	4a13      	ldr	r2, [pc, #76]	@ (80013d4 <SSD1306_DrawPixel+0xb8>)
 8001388:	54d1      	strb	r1, [r2, r3]
 800138a:	e01d      	b.n	80013c8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800138c:	88fa      	ldrh	r2, [r7, #6]
 800138e:	88bb      	ldrh	r3, [r7, #4]
 8001390:	08db      	lsrs	r3, r3, #3
 8001392:	b298      	uxth	r0, r3
 8001394:	4603      	mov	r3, r0
 8001396:	01db      	lsls	r3, r3, #7
 8001398:	4413      	add	r3, r2
 800139a:	4a0e      	ldr	r2, [pc, #56]	@ (80013d4 <SSD1306_DrawPixel+0xb8>)
 800139c:	5cd3      	ldrb	r3, [r2, r3]
 800139e:	b25a      	sxtb	r2, r3
 80013a0:	88bb      	ldrh	r3, [r7, #4]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	2101      	movs	r1, #1
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	4013      	ands	r3, r2
 80013b4:	b259      	sxtb	r1, r3
 80013b6:	88fa      	ldrh	r2, [r7, #6]
 80013b8:	4603      	mov	r3, r0
 80013ba:	01db      	lsls	r3, r3, #7
 80013bc:	4413      	add	r3, r2
 80013be:	b2c9      	uxtb	r1, r1
 80013c0:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <SSD1306_DrawPixel+0xb8>)
 80013c2:	54d1      	strb	r1, [r2, r3]
 80013c4:	e000      	b.n	80013c8 <SSD1306_DrawPixel+0xac>
		return;
 80013c6:	bf00      	nop
	}
}
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	2000049c 	.word	0x2000049c
 80013d4:	2000009c 	.word	0x2000009c

080013d8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	460a      	mov	r2, r1
 80013e2:	80fb      	strh	r3, [r7, #6]
 80013e4:	4613      	mov	r3, r2
 80013e6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80013e8:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <SSD1306_GotoXY+0x28>)
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80013ee:	4a04      	ldr	r2, [pc, #16]	@ (8001400 <SSD1306_GotoXY+0x28>)
 80013f0:	88bb      	ldrh	r3, [r7, #4]
 80013f2:	8053      	strh	r3, [r2, #2]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	2000049c 	.word	0x2000049c

08001404 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
 8001410:	4613      	mov	r3, r2
 8001412:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001414:	4b39      	ldr	r3, [pc, #228]	@ (80014fc <SSD1306_Putc+0xf8>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	4413      	add	r3, r2
	if (
 8001420:	2b7f      	cmp	r3, #127	@ 0x7f
 8001422:	dc07      	bgt.n	8001434 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001424:	4b35      	ldr	r3, [pc, #212]	@ (80014fc <SSD1306_Putc+0xf8>)
 8001426:	885b      	ldrh	r3, [r3, #2]
 8001428:	461a      	mov	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	785b      	ldrb	r3, [r3, #1]
 800142e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001430:	2b3f      	cmp	r3, #63	@ 0x3f
 8001432:	dd01      	ble.n	8001438 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001434:	2300      	movs	r3, #0
 8001436:	e05d      	b.n	80014f4 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e04b      	b.n	80014d6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	3b20      	subs	r3, #32
 8001446:	6839      	ldr	r1, [r7, #0]
 8001448:	7849      	ldrb	r1, [r1, #1]
 800144a:	fb01 f303 	mul.w	r3, r1, r3
 800144e:	4619      	mov	r1, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	440b      	add	r3, r1
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	e030      	b.n	80014c4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d010      	beq.n	8001494 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001472:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <SSD1306_Putc+0xf8>)
 8001474:	881a      	ldrh	r2, [r3, #0]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	b29b      	uxth	r3, r3
 800147a:	4413      	add	r3, r2
 800147c:	b298      	uxth	r0, r3
 800147e:	4b1f      	ldr	r3, [pc, #124]	@ (80014fc <SSD1306_Putc+0xf8>)
 8001480:	885a      	ldrh	r2, [r3, #2]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	b29b      	uxth	r3, r3
 8001486:	4413      	add	r3, r2
 8001488:	b29b      	uxth	r3, r3
 800148a:	79ba      	ldrb	r2, [r7, #6]
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff ff45 	bl	800131c <SSD1306_DrawPixel>
 8001492:	e014      	b.n	80014be <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <SSD1306_Putc+0xf8>)
 8001496:	881a      	ldrh	r2, [r3, #0]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	b29b      	uxth	r3, r3
 800149c:	4413      	add	r3, r2
 800149e:	b298      	uxth	r0, r3
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <SSD1306_Putc+0xf8>)
 80014a2:	885a      	ldrh	r2, [r3, #2]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4413      	add	r3, r2
 80014aa:	b299      	uxth	r1, r3
 80014ac:	79bb      	ldrb	r3, [r7, #6]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	bf0c      	ite	eq
 80014b2:	2301      	moveq	r3, #1
 80014b4:	2300      	movne	r3, #0
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	f7ff ff2f 	bl	800131c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	3301      	adds	r3, #1
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d3c8      	bcc.n	8001462 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3301      	adds	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	785b      	ldrb	r3, [r3, #1]
 80014da:	461a      	mov	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	4293      	cmp	r3, r2
 80014e0:	d3ad      	bcc.n	800143e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <SSD1306_Putc+0xf8>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	7812      	ldrb	r2, [r2, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b03      	ldr	r3, [pc, #12]	@ (80014fc <SSD1306_Putc+0xf8>)
 80014f0:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80014f2:	79fb      	ldrb	r3, [r7, #7]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	2000049c 	.word	0x2000049c

08001500 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	4613      	mov	r3, r2
 800150c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800150e:	e012      	b.n	8001536 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	79fa      	ldrb	r2, [r7, #7]
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff73 	bl	8001404 <SSD1306_Putc>
 800151e:	4603      	mov	r3, r0
 8001520:	461a      	mov	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d002      	beq.n	8001530 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	e008      	b.n	8001542 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3301      	adds	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1e8      	bne.n	8001510 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	781b      	ldrb	r3, [r3, #0]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <SSD1306_Clear>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear (void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff fecc 	bl	80012ec <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001554:	f7ff fe9c 	bl	8001290 <SSD1306_UpdateScreen>
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}

0800155c <SSD1306_Println>:
	SSD1306_Puts(currentTimeString, &Font_11x18, 1);
	SSD1306_UpdateScreen();
}

void SSD1306_Println(char* format, ...)
{
 800155c:	b40f      	push	{r0, r1, r2, r3}
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
	char buffer[20];
	buffer[0] = '\0';
 8001564:	2300      	movs	r3, #0
 8001566:	713b      	strb	r3, [r7, #4]

	va_list argList;
	va_start(argList, format);
 8001568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156c:	603b      	str	r3, [r7, #0]
	vsprintf(buffer, format, argList);
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	6a39      	ldr	r1, [r7, #32]
 8001574:	4618      	mov	r0, r3
 8001576:	f003 f98d 	bl	8004894 <vsiprintf>

	va_end(argList);

	if (actualYPosition > 40)
 800157a:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <SSD1306_Println+0x68>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b28      	cmp	r3, #40	@ 0x28
 8001580:	d904      	bls.n	800158c <SSD1306_Println+0x30>
	{
		SSD1306_Clear();
 8001582:	f7ff ffe2 	bl	800154a <SSD1306_Clear>
		actualYPosition = 0;
 8001586:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <SSD1306_Println+0x68>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
	}
	SSD1306_GotoXY(0, actualYPosition);
 800158c:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <SSD1306_Println+0x68>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff ff20 	bl	80013d8 <SSD1306_GotoXY>
	SSD1306_Puts (buffer, &Font_11x18, 1);
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2201      	movs	r2, #1
 800159c:	490a      	ldr	r1, [pc, #40]	@ (80015c8 <SSD1306_Println+0x6c>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ffae 	bl	8001500 <SSD1306_Puts>
	actualYPosition += 20;
 80015a4:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <SSD1306_Println+0x68>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	3314      	adds	r3, #20
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <SSD1306_Println+0x68>)
 80015ae:	701a      	strb	r2, [r3, #0]

	SSD1306_UpdateScreen();
 80015b0:	f7ff fe6e 	bl	8001290 <SSD1306_UpdateScreen>
}
 80015b4:	bf00      	nop
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015be:	b004      	add	sp, #16
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	200004a2 	.word	0x200004a2
 80015c8:	20000004 	.word	0x20000004

080015cc <ssd1306_I2C_Init>:


/* I2C Functions */

void ssd1306_I2C_Init() {
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 80015d2:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <ssd1306_I2C_Init+0x24>)
 80015d4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015d6:	e002      	b.n	80015de <ssd1306_I2C_Init+0x12>
		p--;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f9      	bne.n	80015d8 <ssd1306_I2C_Init+0xc>
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	0003d090 	.word	0x0003d090

080015f4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b0c7      	sub	sp, #284	@ 0x11c
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	4604      	mov	r4, r0
 80015fc:	4608      	mov	r0, r1
 80015fe:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001602:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001606:	600a      	str	r2, [r1, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800160e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001612:	4622      	mov	r2, r4
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800161a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800161e:	4602      	mov	r2, r0
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001626:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800162a:	460a      	mov	r2, r1
 800162c:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 800162e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001632:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001636:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800163a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800163e:	7812      	ldrb	r2, [r2, #0]
 8001640:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001642:	2300      	movs	r3, #0
 8001644:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001648:	e015      	b.n	8001676 <ssd1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 800164a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800164e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001652:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	441a      	add	r2, r3
 800165a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800165e:	3301      	adds	r3, #1
 8001660:	7811      	ldrb	r1, [r2, #0]
 8001662:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001666:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800166a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 800166c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001670:	3301      	adds	r3, #1
 8001672:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001676:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800167a:	b29b      	uxth	r3, r3
 800167c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001680:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001684:	8812      	ldrh	r2, [r2, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d8df      	bhi.n	800164a <ssd1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 100);
 800168a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800168e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b299      	uxth	r1, r3
 8001696:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800169a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	3301      	adds	r3, #1
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	f107 020c 	add.w	r2, r7, #12
 80016a8:	2064      	movs	r0, #100	@ 0x64
 80016aa:	9000      	str	r0, [sp, #0]
 80016ac:	4803      	ldr	r0, [pc, #12]	@ (80016bc <ssd1306_I2C_WriteMulti+0xc8>)
 80016ae:	f001 f907 	bl	80028c0 <HAL_I2C_Master_Transmit>
}
 80016b2:	bf00      	nop
 80016b4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	200004a4 	.word	0x200004a4

080016c0 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	460b      	mov	r3, r1
 80016cc:	71bb      	strb	r3, [r7, #6]
 80016ce:	4613      	mov	r3, r2
 80016d0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80016d2:	79bb      	ldrb	r3, [r7, #6]
 80016d4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80016d6:	797b      	ldrb	r3, [r7, #5]
 80016d8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 100);
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	b299      	uxth	r1, r3
 80016de:	f107 020c 	add.w	r2, r7, #12
 80016e2:	2364      	movs	r3, #100	@ 0x64
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2302      	movs	r3, #2
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <ssd1306_I2C_Write+0x38>)
 80016ea:	f001 f8e9 	bl	80028c0 <HAL_I2C_Master_Transmit>
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200004a4 	.word	0x200004a4

080016fc <__io_putchar>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
int __io_putchar(int ch)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint8_t temp = ch;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart1, &temp, 1, HAL_MAX_DELAY);
 800170a:	f107 010f 	add.w	r1, r7, #15
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
 8001712:	2201      	movs	r2, #1
 8001714:	4803      	ldr	r0, [pc, #12]	@ (8001724 <__io_putchar+0x28>)
 8001716:	f002 fd51 	bl	80041bc <HAL_UART_Transmit>
  return ch;
 800171a:	687b      	ldr	r3, [r7, #4]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200004f8 	.word	0x200004f8

08001728 <max30102_plot>:


// Override plot function
void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
	static uint8_t rateSpot = 0;
	static uint32_t lastBeat = 0;
	static float beatsPerMinute;
    // printf("ir:%u\n", ir_sample);                  // Print IR only
    // printf("r:%u\n", red_sample);                  // Print Red only
    printf("ir:%lu,r:%lu\n", ir_sample, red_sample);    // Print IR and Red
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4866      	ldr	r0, [pc, #408]	@ (80018d0 <max30102_plot+0x1a8>)
 8001738:	f003 f840 	bl	80047bc <iprintf>

    if(ir_sample > 7000)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001742:	4293      	cmp	r3, r2
 8001744:	f240 80a0 	bls.w	8001888 <max30102_plot+0x160>
    {
    	SSD1306_Clear();
 8001748:	f7ff feff 	bl	800154a <SSD1306_Clear>
    	SSD1306_UpdateScreen();
 800174c:	f7ff fda0 	bl	8001290 <SSD1306_UpdateScreen>
    	SSD1306_GotoXY(50, 0);
 8001750:	2100      	movs	r1, #0
 8001752:	2032      	movs	r0, #50	@ 0x32
 8001754:	f7ff fe40 	bl	80013d8 <SSD1306_GotoXY>
    	SSD1306_Puts("BPM", &Font_11x18, 1);
 8001758:	2201      	movs	r2, #1
 800175a:	495e      	ldr	r1, [pc, #376]	@ (80018d4 <max30102_plot+0x1ac>)
 800175c:	485e      	ldr	r0, [pc, #376]	@ (80018d8 <max30102_plot+0x1b0>)
 800175e:	f7ff fecf 	bl	8001500 <SSD1306_Puts>
    	SSD1306_GotoXY(50, 18);
 8001762:	2112      	movs	r1, #18
 8001764:	2032      	movs	r0, #50	@ 0x32
 8001766:	f7ff fe37 	bl	80013d8 <SSD1306_GotoXY>
    	SSD1306_Println("%lu",beatAvg);
 800176a:	4b5c      	ldr	r3, [pc, #368]	@ (80018dc <max30102_plot+0x1b4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4619      	mov	r1, r3
 8001770:	485b      	ldr	r0, [pc, #364]	@ (80018e0 <max30102_plot+0x1b8>)
 8001772:	f7ff fef3 	bl	800155c <SSD1306_Println>
    	SSD1306_UpdateScreen();
 8001776:	f7ff fd8b 	bl	8001290 <SSD1306_UpdateScreen>
    	if(checkForBeat(ir_sample))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fc87 	bl	8001090 <checkForBeat>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d07f      	beq.n	8001888 <max30102_plot+0x160>
    	{
    		SSD1306_Clear();
 8001788:	f7ff fedf 	bl	800154a <SSD1306_Clear>
    		SSD1306_UpdateScreen();
 800178c:	f7ff fd80 	bl	8001290 <SSD1306_UpdateScreen>
        	SSD1306_GotoXY(50, 0);
 8001790:	2100      	movs	r1, #0
 8001792:	2032      	movs	r0, #50	@ 0x32
 8001794:	f7ff fe20 	bl	80013d8 <SSD1306_GotoXY>
        	SSD1306_Puts("BPM", &Font_11x18, 1);
 8001798:	2201      	movs	r2, #1
 800179a:	494e      	ldr	r1, [pc, #312]	@ (80018d4 <max30102_plot+0x1ac>)
 800179c:	484e      	ldr	r0, [pc, #312]	@ (80018d8 <max30102_plot+0x1b0>)
 800179e:	f7ff feaf 	bl	8001500 <SSD1306_Puts>
        	SSD1306_GotoXY(50, 18);
 80017a2:	2112      	movs	r1, #18
 80017a4:	2032      	movs	r0, #50	@ 0x32
 80017a6:	f7ff fe17 	bl	80013d8 <SSD1306_GotoXY>
        	SSD1306_Println("%lu",beatAvg);
 80017aa:	4b4c      	ldr	r3, [pc, #304]	@ (80018dc <max30102_plot+0x1b4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4619      	mov	r1, r3
 80017b0:	484b      	ldr	r0, [pc, #300]	@ (80018e0 <max30102_plot+0x1b8>)
 80017b2:	f7ff fed3 	bl	800155c <SSD1306_Println>
        	SSD1306_UpdateScreen();
 80017b6:	f7ff fd6b 	bl	8001290 <SSD1306_UpdateScreen>
        	uint32_t delta = HAL_GetTick()-lastBeat;
 80017ba:	f000 fc43 	bl	8002044 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	4b48      	ldr	r3, [pc, #288]	@ (80018e4 <max30102_plot+0x1bc>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	60bb      	str	r3, [r7, #8]
        	lastBeat = HAL_GetTick();
 80017c8:	f000 fc3c 	bl	8002044 <HAL_GetTick>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4a45      	ldr	r2, [pc, #276]	@ (80018e4 <max30102_plot+0x1bc>)
 80017d0:	6013      	str	r3, [r2, #0]

        	beatsPerMinute = 60 / (delta/1000.0);
 80017d2:	68b8      	ldr	r0, [r7, #8]
 80017d4:	f7fe fdfe 	bl	80003d4 <__aeabi_ui2d>
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b42      	ldr	r3, [pc, #264]	@ (80018e8 <max30102_plot+0x1c0>)
 80017de:	f7fe ff9d 	bl	800071c <__aeabi_ddiv>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	f04f 0000 	mov.w	r0, #0
 80017ea:	4940      	ldr	r1, [pc, #256]	@ (80018ec <max30102_plot+0x1c4>)
 80017ec:	f7fe ff96 	bl	800071c <__aeabi_ddiv>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f7ff f898 	bl	800092c <__aeabi_d2f>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a3c      	ldr	r2, [pc, #240]	@ (80018f0 <max30102_plot+0x1c8>)
 8001800:	6013      	str	r3, [r2, #0]
        	if(beatsPerMinute < 255 && beatsPerMinute > 20)
 8001802:	4b3b      	ldr	r3, [pc, #236]	@ (80018f0 <max30102_plot+0x1c8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	493b      	ldr	r1, [pc, #236]	@ (80018f4 <max30102_plot+0x1cc>)
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff f92d 	bl	8000a68 <__aeabi_fcmplt>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d039      	beq.n	8001888 <max30102_plot+0x160>
 8001814:	4b36      	ldr	r3, [pc, #216]	@ (80018f0 <max30102_plot+0x1c8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4937      	ldr	r1, [pc, #220]	@ (80018f8 <max30102_plot+0x1d0>)
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff f942 	bl	8000aa4 <__aeabi_fcmpgt>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d030      	beq.n	8001888 <max30102_plot+0x160>
        	{
        		rates[rateSpot++]=(uint8_t)beatsPerMinute;
 8001826:	4b32      	ldr	r3, [pc, #200]	@ (80018f0 <max30102_plot+0x1c8>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b34      	ldr	r3, [pc, #208]	@ (80018fc <max30102_plot+0x1d4>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	1c59      	adds	r1, r3, #1
 8001830:	b2c8      	uxtb	r0, r1
 8001832:	4932      	ldr	r1, [pc, #200]	@ (80018fc <max30102_plot+0x1d4>)
 8001834:	7008      	strb	r0, [r1, #0]
 8001836:	461c      	mov	r4, r3
 8001838:	4610      	mov	r0, r2
 800183a:	f7ff f93d 	bl	8000ab8 <__aeabi_f2uiz>
 800183e:	4603      	mov	r3, r0
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b2f      	ldr	r3, [pc, #188]	@ (8001900 <max30102_plot+0x1d8>)
 8001844:	551a      	strb	r2, [r3, r4]
        		rateSpot %= 4;
 8001846:	4b2d      	ldr	r3, [pc, #180]	@ (80018fc <max30102_plot+0x1d4>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b2a      	ldr	r3, [pc, #168]	@ (80018fc <max30102_plot+0x1d4>)
 8001852:	701a      	strb	r2, [r3, #0]
        		beatAvg = 0;
 8001854:	4b21      	ldr	r3, [pc, #132]	@ (80018dc <max30102_plot+0x1b4>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
        		for(uint8_t i = 0; i < 4;i++)
 800185a:	2300      	movs	r3, #0
 800185c:	73fb      	strb	r3, [r7, #15]
 800185e:	e00b      	b.n	8001878 <max30102_plot+0x150>
        		{
        			beatAvg += rates[i];
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	4a27      	ldr	r2, [pc, #156]	@ (8001900 <max30102_plot+0x1d8>)
 8001864:	5cd3      	ldrb	r3, [r2, r3]
 8001866:	461a      	mov	r2, r3
 8001868:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <max30102_plot+0x1b4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4413      	add	r3, r2
 800186e:	4a1b      	ldr	r2, [pc, #108]	@ (80018dc <max30102_plot+0x1b4>)
 8001870:	6013      	str	r3, [r2, #0]
        		for(uint8_t i = 0; i < 4;i++)
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	3301      	adds	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	2b03      	cmp	r3, #3
 800187c:	d9f0      	bls.n	8001860 <max30102_plot+0x138>
        		}
        		beatAvg/=4;
 800187e:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <max30102_plot+0x1b4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	4a15      	ldr	r2, [pc, #84]	@ (80018dc <max30102_plot+0x1b4>)
 8001886:	6013      	str	r3, [r2, #0]
        	}

    	}
    }
    if(ir_sample < 7000)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f641 3257 	movw	r2, #6999	@ 0x1b57
 800188e:	4293      	cmp	r3, r2
 8001890:	d81a      	bhi.n	80018c8 <max30102_plot+0x1a0>
    {
    	beatAvg = 0;
 8001892:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <max30102_plot+0x1b4>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
		SSD1306_Clear();
 8001898:	f7ff fe57 	bl	800154a <SSD1306_Clear>
		SSD1306_UpdateScreen();
 800189c:	f7ff fcf8 	bl	8001290 <SSD1306_UpdateScreen>
    	SSD1306_GotoXY(0, 5);
 80018a0:	2105      	movs	r1, #5
 80018a2:	2000      	movs	r0, #0
 80018a4:	f7ff fd98 	bl	80013d8 <SSD1306_GotoXY>
    	SSD1306_Puts("Please Place", &Font_11x18, 1);
 80018a8:	2201      	movs	r2, #1
 80018aa:	490a      	ldr	r1, [pc, #40]	@ (80018d4 <max30102_plot+0x1ac>)
 80018ac:	4815      	ldr	r0, [pc, #84]	@ (8001904 <max30102_plot+0x1dc>)
 80018ae:	f7ff fe27 	bl	8001500 <SSD1306_Puts>
    	SSD1306_GotoXY(0, 25);
 80018b2:	2119      	movs	r1, #25
 80018b4:	2000      	movs	r0, #0
 80018b6:	f7ff fd8f 	bl	80013d8 <SSD1306_GotoXY>
    	SSD1306_Puts("your finger",&Font_11x18, 1);
 80018ba:	2201      	movs	r2, #1
 80018bc:	4905      	ldr	r1, [pc, #20]	@ (80018d4 <max30102_plot+0x1ac>)
 80018be:	4812      	ldr	r0, [pc, #72]	@ (8001908 <max30102_plot+0x1e0>)
 80018c0:	f7ff fe1e 	bl	8001500 <SSD1306_Puts>
    	SSD1306_UpdateScreen();
 80018c4:	f7ff fce4 	bl	8001290 <SSD1306_UpdateScreen>
    }
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd90      	pop	{r4, r7, pc}
 80018d0:	08005714 	.word	0x08005714
 80018d4:	20000004 	.word	0x20000004
 80018d8:	08005724 	.word	0x08005724
 80018dc:	2000064c 	.word	0x2000064c
 80018e0:	08005728 	.word	0x08005728
 80018e4:	20000650 	.word	0x20000650
 80018e8:	408f4000 	.word	0x408f4000
 80018ec:	404e0000 	.word	0x404e0000
 80018f0:	20000654 	.word	0x20000654
 80018f4:	437f0000 	.word	0x437f0000
 80018f8:	41a00000 	.word	0x41a00000
 80018fc:	20000658 	.word	0x20000658
 8001900:	2000065c 	.word	0x2000065c
 8001904:	0800572c 	.word	0x0800572c
 8001908:	0800573c 	.word	0x0800573c

0800190c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001912:	f000 fb3f 	bl	8001f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001916:	f000 f85b 	bl	80019d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800191a:	f000 f8f3 	bl	8001b04 <MX_GPIO_Init>
  MX_I2C1_Init();
 800191e:	f000 f899 	bl	8001a54 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001922:	f000 f8c5 	bl	8001ab0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  max30102_init(&max30102, &hi2c1);
 8001926:	4926      	ldr	r1, [pc, #152]	@ (80019c0 <main+0xb4>)
 8001928:	4826      	ldr	r0, [pc, #152]	@ (80019c4 <main+0xb8>)
 800192a:	f7ff f8e5 	bl	8000af8 <max30102_init>
  max30102_reset(&max30102);
 800192e:	4825      	ldr	r0, [pc, #148]	@ (80019c4 <main+0xb8>)
 8001930:	f7ff f959 	bl	8000be6 <max30102_reset>
  max30102_clear_fifo(&max30102);
 8001934:	4823      	ldr	r0, [pc, #140]	@ (80019c4 <main+0xb8>)
 8001936:	f7ff fb11 	bl	8000f5c <max30102_clear_fifo>
  max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 800193a:	2307      	movs	r3, #7
 800193c:	2201      	movs	r2, #1
 800193e:	2103      	movs	r1, #3
 8001940:	4820      	ldr	r0, [pc, #128]	@ (80019c4 <main+0xb8>)
 8001942:	f7ff fad1 	bl	8000ee8 <max30102_set_fifo_config>

  // Sensor settings
  max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8001946:	2101      	movs	r1, #1
 8001948:	481e      	ldr	r0, [pc, #120]	@ (80019c4 <main+0xb8>)
 800194a:	f7ff fa35 	bl	8000db8 <max30102_set_led_pulse_width>
  max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 800194e:	2100      	movs	r1, #0
 8001950:	481c      	ldr	r0, [pc, #112]	@ (80019c4 <main+0xb8>)
 8001952:	f7ff fa54 	bl	8000dfe <max30102_set_adc_resolution>
  max30102_set_sampling_rate(&max30102, max30102_sr_800);
 8001956:	2104      	movs	r1, #4
 8001958:	481a      	ldr	r0, [pc, #104]	@ (80019c4 <main+0xb8>)
 800195a:	f7ff fa0e 	bl	8000d7a <max30102_set_sampling_rate>
  max30102_set_led_current_1(&max30102, 6.2);
 800195e:	491a      	ldr	r1, [pc, #104]	@ (80019c8 <main+0xbc>)
 8001960:	4818      	ldr	r0, [pc, #96]	@ (80019c4 <main+0xb8>)
 8001962:	f7ff fa71 	bl	8000e48 <max30102_set_led_current_1>
  max30102_set_led_current_2(&max30102, 6.2);
 8001966:	4918      	ldr	r1, [pc, #96]	@ (80019c8 <main+0xbc>)
 8001968:	4816      	ldr	r0, [pc, #88]	@ (80019c4 <main+0xb8>)
 800196a:	f7ff fa95 	bl	8000e98 <max30102_set_led_current_2>

  // Enter SpO2 mode
  max30102_set_mode(&max30102, max30102_spo2);
 800196e:	2103      	movs	r1, #3
 8001970:	4814      	ldr	r0, [pc, #80]	@ (80019c4 <main+0xb8>)
 8001972:	f7ff f9dc 	bl	8000d2e <max30102_set_mode>
  max30102_set_a_full(&max30102, 1);
 8001976:	2101      	movs	r1, #1
 8001978:	4812      	ldr	r0, [pc, #72]	@ (80019c4 <main+0xb8>)
 800197a:	f7ff f945 	bl	8000c08 <max30102_set_a_full>

  // Initiate 1 temperature measurement
  max30102_set_die_temp_en(&max30102, 1);
 800197e:	2101      	movs	r1, #1
 8001980:	4810      	ldr	r0, [pc, #64]	@ (80019c4 <main+0xb8>)
 8001982:	f7ff f981 	bl	8000c88 <max30102_set_die_temp_en>
  max30102_set_die_temp_rdy(&max30102, 1);
 8001986:	2101      	movs	r1, #1
 8001988:	480e      	ldr	r0, [pc, #56]	@ (80019c4 <main+0xb8>)
 800198a:	f7ff f965 	bl	8000c58 <max30102_set_die_temp_rdy>

  uint8_t en_reg[2] = {0};
 800198e:	2300      	movs	r3, #0
 8001990:	80bb      	strh	r3, [r7, #4]
  max30102_read(&max30102, 0x00, en_reg, 1);
 8001992:	1d3a      	adds	r2, r7, #4
 8001994:	2301      	movs	r3, #1
 8001996:	2100      	movs	r1, #0
 8001998:	480a      	ldr	r0, [pc, #40]	@ (80019c4 <main+0xb8>)
 800199a:	f7ff f8ff 	bl	8000b9c <max30102_read>
  HAL_Delay(1000);
 800199e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019a2:	f000 fb59 	bl	8002058 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80019a6:	2201      	movs	r2, #1
 80019a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019ac:	4807      	ldr	r0, [pc, #28]	@ (80019cc <main+0xc0>)
 80019ae:	f000 fe09 	bl	80025c4 <HAL_GPIO_WritePin>

  SSD1306_Init();
 80019b2:	f7ff fba9 	bl	8001108 <SSD1306_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    //if (max30102_has_interrupt(&max30102))
	   // {
		      max30102_interrupt_handler(&max30102);
 80019b6:	4803      	ldr	r0, [pc, #12]	@ (80019c4 <main+0xb8>)
 80019b8:	f7ff f98b 	bl	8000cd2 <max30102_interrupt_handler>
 80019bc:	e7fb      	b.n	80019b6 <main+0xaa>
 80019be:	bf00      	nop
 80019c0:	200004a4 	.word	0x200004a4
 80019c4:	20000540 	.word	0x20000540
 80019c8:	40c66666 	.word	0x40c66666
 80019cc:	40011000 	.word	0x40011000

080019d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b090      	sub	sp, #64	@ 0x40
 80019d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d6:	f107 0318 	add.w	r3, r7, #24
 80019da:	2228      	movs	r2, #40	@ 0x28
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 ff62 	bl	80048a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019f2:	2302      	movs	r3, #2
 80019f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019f6:	2301      	movs	r3, #1
 80019f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019fa:	2310      	movs	r3, #16
 80019fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019fe:	2302      	movs	r3, #2
 8001a00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001a02:	2300      	movs	r3, #0
 8001a04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001a06:	f44f 1320 	mov.w	r3, #2621440	@ 0x280000
 8001a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0c:	f107 0318 	add.w	r3, r7, #24
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 ff73 	bl	80038fc <HAL_RCC_OscConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001a1c:	f000 f8f4 	bl	8001c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a20:	230f      	movs	r3, #15
 8001a22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a24:	2302      	movs	r3, #2
 8001a26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	2101      	movs	r1, #1
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 f9e0 	bl	8003e00 <HAL_RCC_ClockConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001a46:	f000 f8df 	bl	8001c08 <Error_Handler>
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	3740      	adds	r7, #64	@ 0x40
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a58:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a5a:	4a13      	ldr	r2, [pc, #76]	@ (8001aa8 <MX_I2C1_Init+0x54>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a60:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <MX_I2C1_Init+0x58>)
 8001a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a84:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a92:	f000 fdd1 	bl	8002638 <HAL_I2C_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a9c:	f000 f8b4 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200004a4 	.word	0x200004a4
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	00061a80 	.word	0x00061a80

08001ab0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	@ (8001b00 <MX_USART1_UART_Init+0x50>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001abc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ac0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ae8:	f002 fb18 	bl	800411c <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001af2:	f000 f889 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200004f8 	.word	0x200004f8
 8001b00:	40013800 	.word	0x40013800

08001b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	f107 0310 	add.w	r3, r7, #16
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	@ (8001bf8 <MX_GPIO_Init+0xf4>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	@ (8001bf8 <MX_GPIO_Init+0xf4>)
 8001b1e:	f043 0310 	orr.w	r3, r3, #16
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b34      	ldr	r3, [pc, #208]	@ (8001bf8 <MX_GPIO_Init+0xf4>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b30:	4b31      	ldr	r3, [pc, #196]	@ (8001bf8 <MX_GPIO_Init+0xf4>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a30      	ldr	r2, [pc, #192]	@ (8001bf8 <MX_GPIO_Init+0xf4>)
 8001b36:	f043 0320 	orr.w	r3, r3, #32
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf8 <MX_GPIO_Init+0xf4>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0320 	and.w	r3, r3, #32
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf8 <MX_GPIO_Init+0xf4>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001bf8 <MX_GPIO_Init+0xf4>)
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b28      	ldr	r3, [pc, #160]	@ (8001bf8 <MX_GPIO_Init+0xf4>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b60:	4b25      	ldr	r3, [pc, #148]	@ (8001bf8 <MX_GPIO_Init+0xf4>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a24      	ldr	r2, [pc, #144]	@ (8001bf8 <MX_GPIO_Init+0xf4>)
 8001b66:	f043 0308 	orr.w	r3, r3, #8
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b22      	ldr	r3, [pc, #136]	@ (8001bf8 <MX_GPIO_Init+0xf4>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b7e:	481f      	ldr	r0, [pc, #124]	@ (8001bfc <MX_GPIO_Init+0xf8>)
 8001b80:	f000 fd20 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2108      	movs	r1, #8
 8001b88:	481d      	ldr	r0, [pc, #116]	@ (8001c00 <MX_GPIO_Init+0xfc>)
 8001b8a:	f000 fd1b 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001b8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4815      	ldr	r0, [pc, #84]	@ (8001bfc <MX_GPIO_Init+0xf8>)
 8001ba8:	f000 fb88 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : buzzer_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 8001bac:	2308      	movs	r3, #8
 8001bae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 0310 	add.w	r3, r7, #16
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480f      	ldr	r0, [pc, #60]	@ (8001c00 <MX_GPIO_Init+0xfc>)
 8001bc4:	f000 fb7a 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001bc8:	2310      	movs	r3, #16
 8001bca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <MX_GPIO_Init+0x100>)
 8001bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4809      	ldr	r0, [pc, #36]	@ (8001c00 <MX_GPIO_Init+0xfc>)
 8001bdc:	f000 fb6e 	bl	80022bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	200a      	movs	r0, #10
 8001be6:	f000 fb32 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001bea:	200a      	movs	r0, #10
 8001bec:	f000 fb4b 	bl	8002286 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bf0:	bf00      	nop
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40011000 	.word	0x40011000
 8001c00:	40010800 	.word	0x40010800
 8001c04:	10210000 	.word	0x10210000

08001c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c0c:	b672      	cpsid	i
}
 8001c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <Error_Handler+0x8>

08001c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_MspInit+0x5c>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	4a14      	ldr	r2, [pc, #80]	@ (8001c70 <HAL_MspInit+0x5c>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6193      	str	r3, [r2, #24]
 8001c26:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_MspInit+0x5c>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <HAL_MspInit+0x5c>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a0e      	ldr	r2, [pc, #56]	@ (8001c70 <HAL_MspInit+0x5c>)
 8001c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c3c:	61d3      	str	r3, [r2, #28]
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <HAL_MspInit+0x5c>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_MspInit+0x60>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <HAL_MspInit+0x60>)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40010000 	.word	0x40010000

08001c78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a15      	ldr	r2, [pc, #84]	@ (8001ce8 <HAL_I2C_MspInit+0x70>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d123      	bne.n	8001ce0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c98:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <HAL_I2C_MspInit+0x74>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a13      	ldr	r2, [pc, #76]	@ (8001cec <HAL_I2C_MspInit+0x74>)
 8001c9e:	f043 0308 	orr.w	r3, r3, #8
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <HAL_I2C_MspInit+0x74>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cb0:	23c0      	movs	r3, #192	@ 0xc0
 8001cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb4:	2312      	movs	r3, #18
 8001cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	480b      	ldr	r0, [pc, #44]	@ (8001cf0 <HAL_I2C_MspInit+0x78>)
 8001cc4:	f000 fafa 	bl	80022bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cc8:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <HAL_I2C_MspInit+0x74>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	4a07      	ldr	r2, [pc, #28]	@ (8001cec <HAL_I2C_MspInit+0x74>)
 8001cce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cd2:	61d3      	str	r3, [r2, #28]
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <HAL_I2C_MspInit+0x74>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ce0:	bf00      	nop
 8001ce2:	3720      	adds	r7, #32
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40005400 	.word	0x40005400
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40010c00 	.word	0x40010c00

08001cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d80 <HAL_UART_MspInit+0x8c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d131      	bne.n	8001d78 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d14:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <HAL_UART_MspInit+0x90>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a1a      	ldr	r2, [pc, #104]	@ (8001d84 <HAL_UART_MspInit+0x90>)
 8001d1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <HAL_UART_MspInit+0x90>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <HAL_UART_MspInit+0x90>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a14      	ldr	r2, [pc, #80]	@ (8001d84 <HAL_UART_MspInit+0x90>)
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <HAL_UART_MspInit+0x90>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 0310 	add.w	r3, r7, #16
 8001d56:	4619      	mov	r1, r3
 8001d58:	480b      	ldr	r0, [pc, #44]	@ (8001d88 <HAL_UART_MspInit+0x94>)
 8001d5a:	f000 faaf 	bl	80022bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	4619      	mov	r1, r3
 8001d72:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <HAL_UART_MspInit+0x94>)
 8001d74:	f000 faa2 	bl	80022bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d78:	bf00      	nop
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010800 	.word	0x40010800

08001d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d90:	bf00      	nop
 8001d92:	e7fd      	b.n	8001d90 <NMI_Handler+0x4>

08001d94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <HardFault_Handler+0x4>

08001d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <MemManage_Handler+0x4>

08001da4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <BusFault_Handler+0x4>

08001dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <UsageFault_Handler+0x4>

08001db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ddc:	f000 f920 	bl	8002020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	max30102_on_interrupt(&max30102);
 8001de8:	4803      	ldr	r0, [pc, #12]	@ (8001df8 <EXTI4_IRQHandler+0x14>)
 8001dea:	f7fe ff65 	bl	8000cb8 <max30102_on_interrupt>

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8001dee:	2010      	movs	r0, #16
 8001df0:	f000 fc00 	bl	80025f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000540 	.word	0x20000540

08001dfc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e00a      	b.n	8001e24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e0e:	f3af 8000 	nop.w
 8001e12:	4601      	mov	r1, r0
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	60ba      	str	r2, [r7, #8]
 8001e1a:	b2ca      	uxtb	r2, r1
 8001e1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbf0      	blt.n	8001e0e <_read+0x12>
  }

  return len;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e009      	b.n	8001e5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	60ba      	str	r2, [r7, #8]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fc53 	bl	80016fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dbf1      	blt.n	8001e48 <_write+0x12>
  }
  return len;
 8001e64:	687b      	ldr	r3, [r7, #4]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_close>:

int _close(int file)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e94:	605a      	str	r2, [r3, #4]
  return 0;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <_isatty>:

int _isatty(int file)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eaa:	2301      	movs	r3, #1
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b085      	sub	sp, #20
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
	...

08001ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed8:	4a14      	ldr	r2, [pc, #80]	@ (8001f2c <_sbrk+0x5c>)
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <_sbrk+0x60>)
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee4:	4b13      	ldr	r3, [pc, #76]	@ (8001f34 <_sbrk+0x64>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eec:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <_sbrk+0x64>)
 8001eee:	4a12      	ldr	r2, [pc, #72]	@ (8001f38 <_sbrk+0x68>)
 8001ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef2:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d207      	bcs.n	8001f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f00:	f002 fd30 	bl	8004964 <__errno>
 8001f04:	4603      	mov	r3, r0
 8001f06:	220c      	movs	r2, #12
 8001f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0e:	e009      	b.n	8001f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f10:	4b08      	ldr	r3, [pc, #32]	@ (8001f34 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f16:	4b07      	ldr	r3, [pc, #28]	@ (8001f34 <_sbrk+0x64>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	4a05      	ldr	r2, [pc, #20]	@ (8001f34 <_sbrk+0x64>)
 8001f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20005000 	.word	0x20005000
 8001f30:	00000400 	.word	0x00000400
 8001f34:	20000660 	.word	0x20000660
 8001f38:	200007b8 	.word	0x200007b8

08001f3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f48:	f7ff fff8 	bl	8001f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f4c:	480b      	ldr	r0, [pc, #44]	@ (8001f7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f4e:	490c      	ldr	r1, [pc, #48]	@ (8001f80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f50:	4a0c      	ldr	r2, [pc, #48]	@ (8001f84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f54:	e002      	b.n	8001f5c <LoopCopyDataInit>

08001f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5a:	3304      	adds	r3, #4

08001f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f60:	d3f9      	bcc.n	8001f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f62:	4a09      	ldr	r2, [pc, #36]	@ (8001f88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f64:	4c09      	ldr	r4, [pc, #36]	@ (8001f8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f68:	e001      	b.n	8001f6e <LoopFillZerobss>

08001f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f6c:	3204      	adds	r2, #4

08001f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f70:	d3fb      	bcc.n	8001f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f72:	f002 fcfd 	bl	8004970 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f76:	f7ff fcc9 	bl	800190c <main>
  bx lr
 8001f7a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f80:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001f84:	0800650c 	.word	0x0800650c
  ldr r2, =_sbss
 8001f88:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001f8c:	200007b4 	.word	0x200007b4

08001f90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f90:	e7fe      	b.n	8001f90 <ADC1_2_IRQHandler>
	...

08001f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f98:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <HAL_Init+0x28>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a07      	ldr	r2, [pc, #28]	@ (8001fbc <HAL_Init+0x28>)
 8001f9e:	f043 0310 	orr.w	r3, r3, #16
 8001fa2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	f000 f947 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001faa:	200f      	movs	r0, #15
 8001fac:	f000 f808 	bl	8001fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb0:	f7ff fe30 	bl	8001c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40022000 	.word	0x40022000

08001fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc8:	4b12      	ldr	r3, [pc, #72]	@ (8002014 <HAL_InitTick+0x54>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b12      	ldr	r3, [pc, #72]	@ (8002018 <HAL_InitTick+0x58>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f95f 	bl	80022a2 <HAL_SYSTICK_Config>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00e      	b.n	800200c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b0f      	cmp	r3, #15
 8001ff2:	d80a      	bhi.n	800200a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	f000 f927 	bl	800224e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002000:	4a06      	ldr	r2, [pc, #24]	@ (800201c <HAL_InitTick+0x5c>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	e000      	b.n	800200c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	2000000c 	.word	0x2000000c
 8002018:	20000014 	.word	0x20000014
 800201c:	20000010 	.word	0x20000010

08002020 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002024:	4b05      	ldr	r3, [pc, #20]	@ (800203c <HAL_IncTick+0x1c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	4b05      	ldr	r3, [pc, #20]	@ (8002040 <HAL_IncTick+0x20>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4413      	add	r3, r2
 8002030:	4a03      	ldr	r2, [pc, #12]	@ (8002040 <HAL_IncTick+0x20>)
 8002032:	6013      	str	r3, [r2, #0]
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	20000014 	.word	0x20000014
 8002040:	20000664 	.word	0x20000664

08002044 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return uwTick;
 8002048:	4b02      	ldr	r3, [pc, #8]	@ (8002054 <HAL_GetTick+0x10>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	20000664 	.word	0x20000664

08002058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff fff0 	bl	8002044 <HAL_GetTick>
 8002064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d005      	beq.n	800207e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002072:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <HAL_Delay+0x44>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4413      	add	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800207e:	bf00      	nop
 8002080:	f7ff ffe0 	bl	8002044 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	429a      	cmp	r2, r3
 800208e:	d8f7      	bhi.n	8002080 <HAL_Delay+0x28>
  {
  }
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000014 	.word	0x20000014

080020a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b0:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020bc:	4013      	ands	r3, r2
 80020be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d2:	4a04      	ldr	r2, [pc, #16]	@ (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	60d3      	str	r3, [r2, #12]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ec:	4b04      	ldr	r3, [pc, #16]	@ (8002100 <__NVIC_GetPriorityGrouping+0x18>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	f003 0307 	and.w	r3, r3, #7
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	2b00      	cmp	r3, #0
 8002114:	db0b      	blt.n	800212e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	f003 021f 	and.w	r2, r3, #31
 800211c:	4906      	ldr	r1, [pc, #24]	@ (8002138 <__NVIC_EnableIRQ+0x34>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	2001      	movs	r0, #1
 8002126:	fa00 f202 	lsl.w	r2, r0, r2
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	e000e100 	.word	0xe000e100

0800213c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	2b00      	cmp	r3, #0
 800214e:	db0a      	blt.n	8002166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	490c      	ldr	r1, [pc, #48]	@ (8002188 <__NVIC_SetPriority+0x4c>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	440b      	add	r3, r1
 8002160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002164:	e00a      	b.n	800217c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4908      	ldr	r1, [pc, #32]	@ (800218c <__NVIC_SetPriority+0x50>)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	3b04      	subs	r3, #4
 8002174:	0112      	lsls	r2, r2, #4
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	440b      	add	r3, r1
 800217a:	761a      	strb	r2, [r3, #24]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000e100 	.word	0xe000e100
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	@ 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f1c3 0307 	rsb	r3, r3, #7
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	bf28      	it	cs
 80021ae:	2304      	movcs	r3, #4
 80021b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d902      	bls.n	80021c0 <NVIC_EncodePriority+0x30>
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3b03      	subs	r3, #3
 80021be:	e000      	b.n	80021c2 <NVIC_EncodePriority+0x32>
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	f04f 32ff 	mov.w	r2, #4294967295
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	401a      	ands	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	4313      	orrs	r3, r2
         );
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	@ 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002204:	d301      	bcc.n	800220a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220a:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <SysTick_Config+0x40>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002212:	210f      	movs	r1, #15
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f7ff ff90 	bl	800213c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <SysTick_Config+0x40>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002222:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <SysTick_Config+0x40>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff2d 	bl	80020a0 <__NVIC_SetPriorityGrouping>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002260:	f7ff ff42 	bl	80020e8 <__NVIC_GetPriorityGrouping>
 8002264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f7ff ff90 	bl	8002190 <NVIC_EncodePriority>
 8002270:	4602      	mov	r2, r0
 8002272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff5f 	bl	800213c <__NVIC_SetPriority>
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff35 	bl	8002104 <__NVIC_EnableIRQ>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff ffa2 	bl	80021f4 <SysTick_Config>
 80022b0:	4603      	mov	r3, r0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b08b      	sub	sp, #44	@ 0x2c
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ce:	e169      	b.n	80025a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022d0:	2201      	movs	r2, #1
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f040 8158 	bne.w	800259e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4a9a      	ldr	r2, [pc, #616]	@ (800255c <HAL_GPIO_Init+0x2a0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d05e      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
 80022f8:	4a98      	ldr	r2, [pc, #608]	@ (800255c <HAL_GPIO_Init+0x2a0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d875      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 80022fe:	4a98      	ldr	r2, [pc, #608]	@ (8002560 <HAL_GPIO_Init+0x2a4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d058      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
 8002304:	4a96      	ldr	r2, [pc, #600]	@ (8002560 <HAL_GPIO_Init+0x2a4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d86f      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 800230a:	4a96      	ldr	r2, [pc, #600]	@ (8002564 <HAL_GPIO_Init+0x2a8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d052      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
 8002310:	4a94      	ldr	r2, [pc, #592]	@ (8002564 <HAL_GPIO_Init+0x2a8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d869      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 8002316:	4a94      	ldr	r2, [pc, #592]	@ (8002568 <HAL_GPIO_Init+0x2ac>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d04c      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
 800231c:	4a92      	ldr	r2, [pc, #584]	@ (8002568 <HAL_GPIO_Init+0x2ac>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d863      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 8002322:	4a92      	ldr	r2, [pc, #584]	@ (800256c <HAL_GPIO_Init+0x2b0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d046      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
 8002328:	4a90      	ldr	r2, [pc, #576]	@ (800256c <HAL_GPIO_Init+0x2b0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d85d      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 800232e:	2b12      	cmp	r3, #18
 8002330:	d82a      	bhi.n	8002388 <HAL_GPIO_Init+0xcc>
 8002332:	2b12      	cmp	r3, #18
 8002334:	d859      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 8002336:	a201      	add	r2, pc, #4	@ (adr r2, 800233c <HAL_GPIO_Init+0x80>)
 8002338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233c:	080023b7 	.word	0x080023b7
 8002340:	08002391 	.word	0x08002391
 8002344:	080023a3 	.word	0x080023a3
 8002348:	080023e5 	.word	0x080023e5
 800234c:	080023eb 	.word	0x080023eb
 8002350:	080023eb 	.word	0x080023eb
 8002354:	080023eb 	.word	0x080023eb
 8002358:	080023eb 	.word	0x080023eb
 800235c:	080023eb 	.word	0x080023eb
 8002360:	080023eb 	.word	0x080023eb
 8002364:	080023eb 	.word	0x080023eb
 8002368:	080023eb 	.word	0x080023eb
 800236c:	080023eb 	.word	0x080023eb
 8002370:	080023eb 	.word	0x080023eb
 8002374:	080023eb 	.word	0x080023eb
 8002378:	080023eb 	.word	0x080023eb
 800237c:	080023eb 	.word	0x080023eb
 8002380:	08002399 	.word	0x08002399
 8002384:	080023ad 	.word	0x080023ad
 8002388:	4a79      	ldr	r2, [pc, #484]	@ (8002570 <HAL_GPIO_Init+0x2b4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800238e:	e02c      	b.n	80023ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	623b      	str	r3, [r7, #32]
          break;
 8002396:	e029      	b.n	80023ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	3304      	adds	r3, #4
 800239e:	623b      	str	r3, [r7, #32]
          break;
 80023a0:	e024      	b.n	80023ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	3308      	adds	r3, #8
 80023a8:	623b      	str	r3, [r7, #32]
          break;
 80023aa:	e01f      	b.n	80023ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	330c      	adds	r3, #12
 80023b2:	623b      	str	r3, [r7, #32]
          break;
 80023b4:	e01a      	b.n	80023ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d102      	bne.n	80023c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023be:	2304      	movs	r3, #4
 80023c0:	623b      	str	r3, [r7, #32]
          break;
 80023c2:	e013      	b.n	80023ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d105      	bne.n	80023d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023cc:	2308      	movs	r3, #8
 80023ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	611a      	str	r2, [r3, #16]
          break;
 80023d6:	e009      	b.n	80023ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d8:	2308      	movs	r3, #8
 80023da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	615a      	str	r2, [r3, #20]
          break;
 80023e2:	e003      	b.n	80023ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023e4:	2300      	movs	r3, #0
 80023e6:	623b      	str	r3, [r7, #32]
          break;
 80023e8:	e000      	b.n	80023ec <HAL_GPIO_Init+0x130>
          break;
 80023ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2bff      	cmp	r3, #255	@ 0xff
 80023f0:	d801      	bhi.n	80023f6 <HAL_GPIO_Init+0x13a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	e001      	b.n	80023fa <HAL_GPIO_Init+0x13e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3304      	adds	r3, #4
 80023fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2bff      	cmp	r3, #255	@ 0xff
 8002400:	d802      	bhi.n	8002408 <HAL_GPIO_Init+0x14c>
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	e002      	b.n	800240e <HAL_GPIO_Init+0x152>
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	3b08      	subs	r3, #8
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	210f      	movs	r1, #15
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	401a      	ands	r2, r3
 8002420:	6a39      	ldr	r1, [r7, #32]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	431a      	orrs	r2, r3
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 80b1 	beq.w	800259e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800243c:	4b4d      	ldr	r3, [pc, #308]	@ (8002574 <HAL_GPIO_Init+0x2b8>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	4a4c      	ldr	r2, [pc, #304]	@ (8002574 <HAL_GPIO_Init+0x2b8>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6193      	str	r3, [r2, #24]
 8002448:	4b4a      	ldr	r3, [pc, #296]	@ (8002574 <HAL_GPIO_Init+0x2b8>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002454:	4a48      	ldr	r2, [pc, #288]	@ (8002578 <HAL_GPIO_Init+0x2bc>)
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	3302      	adds	r3, #2
 800245c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002460:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	220f      	movs	r2, #15
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4013      	ands	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a40      	ldr	r2, [pc, #256]	@ (800257c <HAL_GPIO_Init+0x2c0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d013      	beq.n	80024a8 <HAL_GPIO_Init+0x1ec>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a3f      	ldr	r2, [pc, #252]	@ (8002580 <HAL_GPIO_Init+0x2c4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00d      	beq.n	80024a4 <HAL_GPIO_Init+0x1e8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a3e      	ldr	r2, [pc, #248]	@ (8002584 <HAL_GPIO_Init+0x2c8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d007      	beq.n	80024a0 <HAL_GPIO_Init+0x1e4>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a3d      	ldr	r2, [pc, #244]	@ (8002588 <HAL_GPIO_Init+0x2cc>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d101      	bne.n	800249c <HAL_GPIO_Init+0x1e0>
 8002498:	2303      	movs	r3, #3
 800249a:	e006      	b.n	80024aa <HAL_GPIO_Init+0x1ee>
 800249c:	2304      	movs	r3, #4
 800249e:	e004      	b.n	80024aa <HAL_GPIO_Init+0x1ee>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e002      	b.n	80024aa <HAL_GPIO_Init+0x1ee>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_GPIO_Init+0x1ee>
 80024a8:	2300      	movs	r3, #0
 80024aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ac:	f002 0203 	and.w	r2, r2, #3
 80024b0:	0092      	lsls	r2, r2, #2
 80024b2:	4093      	lsls	r3, r2
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ba:	492f      	ldr	r1, [pc, #188]	@ (8002578 <HAL_GPIO_Init+0x2bc>)
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	3302      	adds	r3, #2
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d006      	beq.n	80024e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024d4:	4b2d      	ldr	r3, [pc, #180]	@ (800258c <HAL_GPIO_Init+0x2d0>)
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	492c      	ldr	r1, [pc, #176]	@ (800258c <HAL_GPIO_Init+0x2d0>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	608b      	str	r3, [r1, #8]
 80024e0:	e006      	b.n	80024f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024e2:	4b2a      	ldr	r3, [pc, #168]	@ (800258c <HAL_GPIO_Init+0x2d0>)
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	4928      	ldr	r1, [pc, #160]	@ (800258c <HAL_GPIO_Init+0x2d0>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024fc:	4b23      	ldr	r3, [pc, #140]	@ (800258c <HAL_GPIO_Init+0x2d0>)
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	4922      	ldr	r1, [pc, #136]	@ (800258c <HAL_GPIO_Init+0x2d0>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	60cb      	str	r3, [r1, #12]
 8002508:	e006      	b.n	8002518 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800250a:	4b20      	ldr	r3, [pc, #128]	@ (800258c <HAL_GPIO_Init+0x2d0>)
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	43db      	mvns	r3, r3
 8002512:	491e      	ldr	r1, [pc, #120]	@ (800258c <HAL_GPIO_Init+0x2d0>)
 8002514:	4013      	ands	r3, r2
 8002516:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002524:	4b19      	ldr	r3, [pc, #100]	@ (800258c <HAL_GPIO_Init+0x2d0>)
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4918      	ldr	r1, [pc, #96]	@ (800258c <HAL_GPIO_Init+0x2d0>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
 8002530:	e006      	b.n	8002540 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002532:	4b16      	ldr	r3, [pc, #88]	@ (800258c <HAL_GPIO_Init+0x2d0>)
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	43db      	mvns	r3, r3
 800253a:	4914      	ldr	r1, [pc, #80]	@ (800258c <HAL_GPIO_Init+0x2d0>)
 800253c:	4013      	ands	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d021      	beq.n	8002590 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800254c:	4b0f      	ldr	r3, [pc, #60]	@ (800258c <HAL_GPIO_Init+0x2d0>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	490e      	ldr	r1, [pc, #56]	@ (800258c <HAL_GPIO_Init+0x2d0>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]
 8002558:	e021      	b.n	800259e <HAL_GPIO_Init+0x2e2>
 800255a:	bf00      	nop
 800255c:	10320000 	.word	0x10320000
 8002560:	10310000 	.word	0x10310000
 8002564:	10220000 	.word	0x10220000
 8002568:	10210000 	.word	0x10210000
 800256c:	10120000 	.word	0x10120000
 8002570:	10110000 	.word	0x10110000
 8002574:	40021000 	.word	0x40021000
 8002578:	40010000 	.word	0x40010000
 800257c:	40010800 	.word	0x40010800
 8002580:	40010c00 	.word	0x40010c00
 8002584:	40011000 	.word	0x40011000
 8002588:	40011400 	.word	0x40011400
 800258c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002590:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	43db      	mvns	r3, r3
 8002598:	4909      	ldr	r1, [pc, #36]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 800259a:	4013      	ands	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	3301      	adds	r3, #1
 80025a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	fa22 f303 	lsr.w	r3, r2, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f47f ae8e 	bne.w	80022d0 <HAL_GPIO_Init+0x14>
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	372c      	adds	r7, #44	@ 0x2c
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	40010400 	.word	0x40010400

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025e0:	e003      	b.n	80025ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	041a      	lsls	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	611a      	str	r2, [r3, #16]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025fe:	4b08      	ldr	r3, [pc, #32]	@ (8002620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d006      	beq.n	8002618 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800260a:	4a05      	ldr	r2, [pc, #20]	@ (8002620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f806 	bl	8002624 <HAL_GPIO_EXTI_Callback>
  }
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40010400 	.word	0x40010400

08002624 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e12b      	b.n	80028a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fb0a 	bl	8001c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2224      	movs	r2, #36	@ 0x24
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800268a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800269a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800269c:	f001 fcf8 	bl	8004090 <HAL_RCC_GetPCLK1Freq>
 80026a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4a81      	ldr	r2, [pc, #516]	@ (80028ac <HAL_I2C_Init+0x274>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d807      	bhi.n	80026bc <HAL_I2C_Init+0x84>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4a80      	ldr	r2, [pc, #512]	@ (80028b0 <HAL_I2C_Init+0x278>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	bf94      	ite	ls
 80026b4:	2301      	movls	r3, #1
 80026b6:	2300      	movhi	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	e006      	b.n	80026ca <HAL_I2C_Init+0x92>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4a7d      	ldr	r2, [pc, #500]	@ (80028b4 <HAL_I2C_Init+0x27c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	bf94      	ite	ls
 80026c4:	2301      	movls	r3, #1
 80026c6:	2300      	movhi	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e0e7      	b.n	80028a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4a78      	ldr	r2, [pc, #480]	@ (80028b8 <HAL_I2C_Init+0x280>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	0c9b      	lsrs	r3, r3, #18
 80026dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a6a      	ldr	r2, [pc, #424]	@ (80028ac <HAL_I2C_Init+0x274>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d802      	bhi.n	800270c <HAL_I2C_Init+0xd4>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	3301      	adds	r3, #1
 800270a:	e009      	b.n	8002720 <HAL_I2C_Init+0xe8>
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	4a69      	ldr	r2, [pc, #420]	@ (80028bc <HAL_I2C_Init+0x284>)
 8002718:	fba2 2303 	umull	r2, r3, r2, r3
 800271c:	099b      	lsrs	r3, r3, #6
 800271e:	3301      	adds	r3, #1
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	430b      	orrs	r3, r1
 8002726:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002732:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	495c      	ldr	r1, [pc, #368]	@ (80028ac <HAL_I2C_Init+0x274>)
 800273c:	428b      	cmp	r3, r1
 800273e:	d819      	bhi.n	8002774 <HAL_I2C_Init+0x13c>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1e59      	subs	r1, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	fbb1 f3f3 	udiv	r3, r1, r3
 800274e:	1c59      	adds	r1, r3, #1
 8002750:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002754:	400b      	ands	r3, r1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_I2C_Init+0x138>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1e59      	subs	r1, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fbb1 f3f3 	udiv	r3, r1, r3
 8002768:	3301      	adds	r3, #1
 800276a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276e:	e051      	b.n	8002814 <HAL_I2C_Init+0x1dc>
 8002770:	2304      	movs	r3, #4
 8002772:	e04f      	b.n	8002814 <HAL_I2C_Init+0x1dc>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d111      	bne.n	80027a0 <HAL_I2C_Init+0x168>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1e58      	subs	r0, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	440b      	add	r3, r1
 800278a:	fbb0 f3f3 	udiv	r3, r0, r3
 800278e:	3301      	adds	r3, #1
 8002790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	e012      	b.n	80027c6 <HAL_I2C_Init+0x18e>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1e58      	subs	r0, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	0099      	lsls	r1, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b6:	3301      	adds	r3, #1
 80027b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Init+0x196>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e022      	b.n	8002814 <HAL_I2C_Init+0x1dc>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10e      	bne.n	80027f4 <HAL_I2C_Init+0x1bc>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1e58      	subs	r0, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6859      	ldr	r1, [r3, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	440b      	add	r3, r1
 80027e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e8:	3301      	adds	r3, #1
 80027ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027f2:	e00f      	b.n	8002814 <HAL_I2C_Init+0x1dc>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1e58      	subs	r0, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6859      	ldr	r1, [r3, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	0099      	lsls	r1, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	fbb0 f3f3 	udiv	r3, r0, r3
 800280a:	3301      	adds	r3, #1
 800280c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002810:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	6809      	ldr	r1, [r1, #0]
 8002818:	4313      	orrs	r3, r2
 800281a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002842:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6911      	ldr	r1, [r2, #16]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68d2      	ldr	r2, [r2, #12]
 800284e:	4311      	orrs	r1, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	430b      	orrs	r3, r1
 8002856:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	000186a0 	.word	0x000186a0
 80028b0:	001e847f 	.word	0x001e847f
 80028b4:	003d08ff 	.word	0x003d08ff
 80028b8:	431bde83 	.word	0x431bde83
 80028bc:	10624dd3 	.word	0x10624dd3

080028c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	461a      	mov	r2, r3
 80028cc:	460b      	mov	r3, r1
 80028ce:	817b      	strh	r3, [r7, #10]
 80028d0:	4613      	mov	r3, r2
 80028d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028d4:	f7ff fbb6 	bl	8002044 <HAL_GetTick>
 80028d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	f040 80e0 	bne.w	8002aa8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	2319      	movs	r3, #25
 80028ee:	2201      	movs	r2, #1
 80028f0:	4970      	ldr	r1, [pc, #448]	@ (8002ab4 <HAL_I2C_Master_Transmit+0x1f4>)
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fdcc 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028fe:	2302      	movs	r3, #2
 8002900:	e0d3      	b.n	8002aaa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_I2C_Master_Transmit+0x50>
 800290c:	2302      	movs	r3, #2
 800290e:	e0cc      	b.n	8002aaa <HAL_I2C_Master_Transmit+0x1ea>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b01      	cmp	r3, #1
 8002924:	d007      	beq.n	8002936 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0201 	orr.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002944:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2221      	movs	r2, #33	@ 0x21
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2210      	movs	r2, #16
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	893a      	ldrh	r2, [r7, #8]
 8002966:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4a50      	ldr	r2, [pc, #320]	@ (8002ab8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002976:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002978:	8979      	ldrh	r1, [r7, #10]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	6a3a      	ldr	r2, [r7, #32]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fc36 	bl	80031f0 <I2C_MasterRequestWrite>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e08d      	b.n	8002aaa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029a4:	e066      	b.n	8002a74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	6a39      	ldr	r1, [r7, #32]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fe8a 	bl	80036c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00d      	beq.n	80029d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d107      	bne.n	80029ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e06b      	b.n	8002aaa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	781a      	ldrb	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d11b      	bne.n	8002a48 <HAL_I2C_Master_Transmit+0x188>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d017      	beq.n	8002a48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	6a39      	ldr	r1, [r7, #32]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fe81 	bl	8003754 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00d      	beq.n	8002a74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d107      	bne.n	8002a70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e01a      	b.n	8002aaa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d194      	bne.n	80029a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e000      	b.n	8002aaa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
  }
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	00100002 	.word	0x00100002
 8002ab8:	ffff0000 	.word	0xffff0000

08002abc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08c      	sub	sp, #48	@ 0x30
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	460b      	mov	r3, r1
 8002aca:	817b      	strh	r3, [r7, #10]
 8002acc:	4613      	mov	r3, r2
 8002ace:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7ff fab6 	bl	8002044 <HAL_GetTick>
 8002ad8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	f040 824b 	bne.w	8002f7e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2319      	movs	r3, #25
 8002aee:	2201      	movs	r2, #1
 8002af0:	497f      	ldr	r1, [pc, #508]	@ (8002cf0 <HAL_I2C_Master_Receive+0x234>)
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fccc 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
 8002b00:	e23e      	b.n	8002f80 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_I2C_Master_Receive+0x54>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e237      	b.n	8002f80 <HAL_I2C_Master_Receive+0x4c4>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d007      	beq.n	8002b36 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2222      	movs	r2, #34	@ 0x22
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2210      	movs	r2, #16
 8002b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	893a      	ldrh	r2, [r7, #8]
 8002b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4a5f      	ldr	r2, [pc, #380]	@ (8002cf4 <HAL_I2C_Master_Receive+0x238>)
 8002b76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b78:	8979      	ldrh	r1, [r7, #10]
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fbb8 	bl	80032f4 <I2C_MasterRequestRead>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e1f8      	b.n	8002f80 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d113      	bne.n	8002bbe <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e1cc      	b.n	8002f58 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d11e      	bne.n	8002c04 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd6:	b672      	cpsid	i
}
 8002bd8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bfe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c00:	b662      	cpsie	i
}
 8002c02:	e035      	b.n	8002c70 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d11e      	bne.n	8002c4a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c1c:	b672      	cpsid	i
}
 8002c1e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c46:	b662      	cpsie	i
}
 8002c48:	e012      	b.n	8002c70 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c70:	e172      	b.n	8002f58 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	f200 811f 	bhi.w	8002eba <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d123      	bne.n	8002ccc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fdab 	bl	80037e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e173      	b.n	8002f80 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691a      	ldr	r2, [r3, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cca:	e145      	b.n	8002f58 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d152      	bne.n	8002d7a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cda:	2200      	movs	r2, #0
 8002cdc:	4906      	ldr	r1, [pc, #24]	@ (8002cf8 <HAL_I2C_Master_Receive+0x23c>)
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 fbd6 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e148      	b.n	8002f80 <HAL_I2C_Master_Receive+0x4c4>
 8002cee:	bf00      	nop
 8002cf0:	00100002 	.word	0x00100002
 8002cf4:	ffff0000 	.word	0xffff0000
 8002cf8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002cfc:	b672      	cpsid	i
}
 8002cfe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d42:	b662      	cpsie	i
}
 8002d44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d78:	e0ee      	b.n	8002f58 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d80:	2200      	movs	r2, #0
 8002d82:	4981      	ldr	r1, [pc, #516]	@ (8002f88 <HAL_I2C_Master_Receive+0x4cc>)
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fb83 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0f5      	b.n	8002f80 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002da2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002da4:	b672      	cpsid	i
}
 8002da6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002dda:	4b6c      	ldr	r3, [pc, #432]	@ (8002f8c <HAL_I2C_Master_Receive+0x4d0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	08db      	lsrs	r3, r3, #3
 8002de0:	4a6b      	ldr	r2, [pc, #428]	@ (8002f90 <HAL_I2C_Master_Receive+0x4d4>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	0a1a      	lsrs	r2, r3, #8
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00da      	lsls	r2, r3, #3
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d118      	bne.n	8002e32 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	f043 0220 	orr.w	r2, r3, #32
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002e22:	b662      	cpsie	i
}
 8002e24:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e0a6      	b.n	8002f80 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d1d9      	bne.n	8002df4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691a      	ldr	r2, [r3, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e82:	b662      	cpsie	i
}
 8002e84:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002eb8:	e04e      	b.n	8002f58 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ebc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fc90 	bl	80037e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e058      	b.n	8002f80 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d124      	bne.n	8002f58 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d107      	bne.n	8002f26 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f24:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f47f ae88 	bne.w	8002c72 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e000      	b.n	8002f80 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002f7e:	2302      	movs	r3, #2
  }
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3728      	adds	r7, #40	@ 0x28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	00010004 	.word	0x00010004
 8002f8c:	2000000c 	.word	0x2000000c
 8002f90:	14f8b589 	.word	0x14f8b589

08002f94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	@ 0x28
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002fa4:	f7ff f84e 	bl	8002044 <HAL_GetTick>
 8002fa8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	f040 8111 	bne.w	80031de <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	2319      	movs	r3, #25
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	4988      	ldr	r1, [pc, #544]	@ (80031e8 <HAL_I2C_IsDeviceReady+0x254>)
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fa62 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e104      	b.n	80031e0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_I2C_IsDeviceReady+0x50>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e0fd      	b.n	80031e0 <HAL_I2C_IsDeviceReady+0x24c>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d007      	beq.n	800300a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0201 	orr.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003018:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2224      	movs	r2, #36	@ 0x24
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4a70      	ldr	r2, [pc, #448]	@ (80031ec <HAL_I2C_IsDeviceReady+0x258>)
 800302c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800303c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2200      	movs	r2, #0
 8003046:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fa20 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00d      	beq.n	8003072 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003064:	d103      	bne.n	800306e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800306c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e0b6      	b.n	80031e0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003072:	897b      	ldrh	r3, [r7, #10]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003080:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003082:	f7fe ffdf 	bl	8002044 <HAL_GetTick>
 8003086:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b02      	cmp	r3, #2
 8003094:	bf0c      	ite	eq
 8003096:	2301      	moveq	r3, #1
 8003098:	2300      	movne	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ac:	bf0c      	ite	eq
 80030ae:	2301      	moveq	r3, #1
 80030b0:	2300      	movne	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030b6:	e025      	b.n	8003104 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030b8:	f7fe ffc4 	bl	8002044 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d302      	bcc.n	80030ce <HAL_I2C_IsDeviceReady+0x13a>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d103      	bne.n	80030d6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	22a0      	movs	r2, #160	@ 0xa0
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	bf0c      	ite	eq
 80030e4:	2301      	moveq	r3, #1
 80030e6:	2300      	movne	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2ba0      	cmp	r3, #160	@ 0xa0
 800310e:	d005      	beq.n	800311c <HAL_I2C_IsDeviceReady+0x188>
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <HAL_I2C_IsDeviceReady+0x188>
 8003116:	7dbb      	ldrb	r3, [r7, #22]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0cd      	beq.n	80030b8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b02      	cmp	r3, #2
 8003130:	d129      	bne.n	8003186 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003140:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	2319      	movs	r3, #25
 800315e:	2201      	movs	r2, #1
 8003160:	4921      	ldr	r1, [pc, #132]	@ (80031e8 <HAL_I2C_IsDeviceReady+0x254>)
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f994 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e036      	b.n	80031e0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	e02c      	b.n	80031e0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003194:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800319e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2319      	movs	r3, #25
 80031a6:	2201      	movs	r2, #1
 80031a8:	490f      	ldr	r1, [pc, #60]	@ (80031e8 <HAL_I2C_IsDeviceReady+0x254>)
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f970 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e012      	b.n	80031e0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	3301      	adds	r3, #1
 80031be:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	f4ff af32 	bcc.w	800302e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80031de:	2302      	movs	r3, #2
  }
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3720      	adds	r7, #32
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	00100002 	.word	0x00100002
 80031ec:	ffff0000 	.word	0xffff0000

080031f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	460b      	mov	r3, r1
 80031fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003204:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2b08      	cmp	r3, #8
 800320a:	d006      	beq.n	800321a <I2C_MasterRequestWrite+0x2a>
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d003      	beq.n	800321a <I2C_MasterRequestWrite+0x2a>
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003218:	d108      	bne.n	800322c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e00b      	b.n	8003244 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003230:	2b12      	cmp	r3, #18
 8003232:	d107      	bne.n	8003244 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003242:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f91d 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00d      	beq.n	8003278 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800326a:	d103      	bne.n	8003274 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003272:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e035      	b.n	80032e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003280:	d108      	bne.n	8003294 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003282:	897b      	ldrh	r3, [r7, #10]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003290:	611a      	str	r2, [r3, #16]
 8003292:	e01b      	b.n	80032cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003294:	897b      	ldrh	r3, [r7, #10]
 8003296:	11db      	asrs	r3, r3, #7
 8003298:	b2db      	uxtb	r3, r3
 800329a:	f003 0306 	and.w	r3, r3, #6
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f063 030f 	orn	r3, r3, #15
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	490e      	ldr	r1, [pc, #56]	@ (80032ec <I2C_MasterRequestWrite+0xfc>)
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f966 	bl	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e010      	b.n	80032e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032c2:	897b      	ldrh	r3, [r7, #10]
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4907      	ldr	r1, [pc, #28]	@ (80032f0 <I2C_MasterRequestWrite+0x100>)
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f956 	bl	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	00010008 	.word	0x00010008
 80032f0:	00010002 	.word	0x00010002

080032f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	460b      	mov	r3, r1
 8003302:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003308:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003318:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b08      	cmp	r3, #8
 800331e:	d006      	beq.n	800332e <I2C_MasterRequestRead+0x3a>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d003      	beq.n	800332e <I2C_MasterRequestRead+0x3a>
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800332c:	d108      	bne.n	8003340 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	e00b      	b.n	8003358 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003344:	2b11      	cmp	r3, #17
 8003346:	d107      	bne.n	8003358 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003356:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 f893 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00d      	beq.n	800338c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800337e:	d103      	bne.n	8003388 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003386:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e079      	b.n	8003480 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003394:	d108      	bne.n	80033a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	611a      	str	r2, [r3, #16]
 80033a6:	e05f      	b.n	8003468 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033a8:	897b      	ldrh	r3, [r7, #10]
 80033aa:	11db      	asrs	r3, r3, #7
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f003 0306 	and.w	r3, r3, #6
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f063 030f 	orn	r3, r3, #15
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4930      	ldr	r1, [pc, #192]	@ (8003488 <I2C_MasterRequestRead+0x194>)
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f8dc 	bl	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e054      	b.n	8003480 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033d6:	897b      	ldrh	r3, [r7, #10]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	4929      	ldr	r1, [pc, #164]	@ (800348c <I2C_MasterRequestRead+0x198>)
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f8cc 	bl	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e044      	b.n	8003480 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800341a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f831 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00d      	beq.n	8003450 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003442:	d103      	bne.n	800344c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800344a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e017      	b.n	8003480 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003450:	897b      	ldrh	r3, [r7, #10]
 8003452:	11db      	asrs	r3, r3, #7
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f003 0306 	and.w	r3, r3, #6
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f063 030e 	orn	r3, r3, #14
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4907      	ldr	r1, [pc, #28]	@ (800348c <I2C_MasterRequestRead+0x198>)
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f888 	bl	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	00010008 	.word	0x00010008
 800348c:	00010002 	.word	0x00010002

08003490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a0:	e048      	b.n	8003534 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d044      	beq.n	8003534 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034aa:	f7fe fdcb 	bl	8002044 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d302      	bcc.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d139      	bne.n	8003534 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d10d      	bne.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	43da      	mvns	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4013      	ands	r3, r2
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	e00c      	b.n	8003500 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	43da      	mvns	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4013      	ands	r3, r2
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	429a      	cmp	r2, r3
 8003504:	d116      	bne.n	8003534 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	f043 0220 	orr.w	r2, r3, #32
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e023      	b.n	800357c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	0c1b      	lsrs	r3, r3, #16
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d10d      	bne.n	800355a <I2C_WaitOnFlagUntilTimeout+0xca>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	43da      	mvns	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4013      	ands	r3, r2
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	e00c      	b.n	8003574 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	43da      	mvns	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	429a      	cmp	r2, r3
 8003578:	d093      	beq.n	80034a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003592:	e071      	b.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800359e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035a2:	d123      	bne.n	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d8:	f043 0204 	orr.w	r2, r3, #4
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e067      	b.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d041      	beq.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f4:	f7fe fd26 	bl	8002044 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	d302      	bcc.n	800360a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d136      	bne.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	0c1b      	lsrs	r3, r3, #16
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d10c      	bne.n	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	43da      	mvns	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4013      	ands	r3, r2
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	bf14      	ite	ne
 8003626:	2301      	movne	r3, #1
 8003628:	2300      	moveq	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	e00b      	b.n	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	43da      	mvns	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4013      	ands	r3, r2
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf14      	ite	ne
 8003640:	2301      	movne	r3, #1
 8003642:	2300      	moveq	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d016      	beq.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003664:	f043 0220 	orr.w	r2, r3, #32
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e021      	b.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	0c1b      	lsrs	r3, r3, #16
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b01      	cmp	r3, #1
 8003680:	d10c      	bne.n	800369c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	43da      	mvns	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4013      	ands	r3, r2
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf14      	ite	ne
 8003694:	2301      	movne	r3, #1
 8003696:	2300      	moveq	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e00b      	b.n	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	43da      	mvns	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4013      	ands	r3, r2
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf14      	ite	ne
 80036ae:	2301      	movne	r3, #1
 80036b0:	2300      	moveq	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f47f af6d 	bne.w	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036d0:	e034      	b.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f8e3 	bl	800389e <I2C_IsAcknowledgeFailed>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e034      	b.n	800374c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d028      	beq.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ea:	f7fe fcab 	bl	8002044 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d302      	bcc.n	8003700 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d11d      	bne.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370a:	2b80      	cmp	r3, #128	@ 0x80
 800370c:	d016      	beq.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003728:	f043 0220 	orr.w	r2, r3, #32
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e007      	b.n	800374c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003746:	2b80      	cmp	r3, #128	@ 0x80
 8003748:	d1c3      	bne.n	80036d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003760:	e034      	b.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f89b 	bl	800389e <I2C_IsAcknowledgeFailed>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e034      	b.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d028      	beq.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fe fc63 	bl	8002044 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d11d      	bne.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b04      	cmp	r3, #4
 800379c:	d016      	beq.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e007      	b.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d1c3      	bne.n	8003762 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037f0:	e049      	b.n	8003886 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b10      	cmp	r3, #16
 80037fe:	d119      	bne.n	8003834 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0210 	mvn.w	r2, #16
 8003808:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e030      	b.n	8003896 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003834:	f7fe fc06 	bl	8002044 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	429a      	cmp	r2, r3
 8003842:	d302      	bcc.n	800384a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d11d      	bne.n	8003886 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003854:	2b40      	cmp	r3, #64	@ 0x40
 8003856:	d016      	beq.n	8003886 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	f043 0220 	orr.w	r2, r3, #32
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e007      	b.n	8003896 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003890:	2b40      	cmp	r3, #64	@ 0x40
 8003892:	d1ae      	bne.n	80037f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b4:	d11b      	bne.n	80038ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	f043 0204 	orr.w	r2, r3, #4
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
	...

080038fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e272      	b.n	8003df4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 8087 	beq.w	8003a2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800391c:	4b92      	ldr	r3, [pc, #584]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 030c 	and.w	r3, r3, #12
 8003924:	2b04      	cmp	r3, #4
 8003926:	d00c      	beq.n	8003942 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003928:	4b8f      	ldr	r3, [pc, #572]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 030c 	and.w	r3, r3, #12
 8003930:	2b08      	cmp	r3, #8
 8003932:	d112      	bne.n	800395a <HAL_RCC_OscConfig+0x5e>
 8003934:	4b8c      	ldr	r3, [pc, #560]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800393c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003940:	d10b      	bne.n	800395a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003942:	4b89      	ldr	r3, [pc, #548]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d06c      	beq.n	8003a28 <HAL_RCC_OscConfig+0x12c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d168      	bne.n	8003a28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e24c      	b.n	8003df4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003962:	d106      	bne.n	8003972 <HAL_RCC_OscConfig+0x76>
 8003964:	4b80      	ldr	r3, [pc, #512]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a7f      	ldr	r2, [pc, #508]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 800396a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	e02e      	b.n	80039d0 <HAL_RCC_OscConfig+0xd4>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10c      	bne.n	8003994 <HAL_RCC_OscConfig+0x98>
 800397a:	4b7b      	ldr	r3, [pc, #492]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a7a      	ldr	r2, [pc, #488]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 8003980:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	4b78      	ldr	r3, [pc, #480]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a77      	ldr	r2, [pc, #476]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 800398c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	e01d      	b.n	80039d0 <HAL_RCC_OscConfig+0xd4>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800399c:	d10c      	bne.n	80039b8 <HAL_RCC_OscConfig+0xbc>
 800399e:	4b72      	ldr	r3, [pc, #456]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a71      	ldr	r2, [pc, #452]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 80039a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	4b6f      	ldr	r3, [pc, #444]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a6e      	ldr	r2, [pc, #440]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e00b      	b.n	80039d0 <HAL_RCC_OscConfig+0xd4>
 80039b8:	4b6b      	ldr	r3, [pc, #428]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a6a      	ldr	r2, [pc, #424]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 80039be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	4b68      	ldr	r3, [pc, #416]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a67      	ldr	r2, [pc, #412]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 80039ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7fe fb34 	bl	8002044 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e0:	f7fe fb30 	bl	8002044 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	@ 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e200      	b.n	8003df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0xe4>
 80039fe:	e014      	b.n	8003a2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fe fb20 	bl	8002044 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a08:	f7fe fb1c 	bl	8002044 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	@ 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e1ec      	b.n	8003df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a1a:	4b53      	ldr	r3, [pc, #332]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x10c>
 8003a26:	e000      	b.n	8003a2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d063      	beq.n	8003afe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a36:	4b4c      	ldr	r3, [pc, #304]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a42:	4b49      	ldr	r3, [pc, #292]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d11c      	bne.n	8003a88 <HAL_RCC_OscConfig+0x18c>
 8003a4e:	4b46      	ldr	r3, [pc, #280]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d116      	bne.n	8003a88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5a:	4b43      	ldr	r3, [pc, #268]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_RCC_OscConfig+0x176>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d001      	beq.n	8003a72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e1c0      	b.n	8003df4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a72:	4b3d      	ldr	r3, [pc, #244]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4939      	ldr	r1, [pc, #228]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a86:	e03a      	b.n	8003afe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d020      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a90:	4b36      	ldr	r3, [pc, #216]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a96:	f7fe fad5 	bl	8002044 <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a9e:	f7fe fad1 	bl	8002044 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e1a1      	b.n	8003df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abc:	4b2a      	ldr	r3, [pc, #168]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4927      	ldr	r1, [pc, #156]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	600b      	str	r3, [r1, #0]
 8003ad0:	e015      	b.n	8003afe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ad2:	4b26      	ldr	r3, [pc, #152]	@ (8003b6c <HAL_RCC_OscConfig+0x270>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fe fab4 	bl	8002044 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae0:	f7fe fab0 	bl	8002044 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e180      	b.n	8003df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003af2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d03a      	beq.n	8003b80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d019      	beq.n	8003b46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b12:	4b17      	ldr	r3, [pc, #92]	@ (8003b70 <HAL_RCC_OscConfig+0x274>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b18:	f7fe fa94 	bl	8002044 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b20:	f7fe fa90 	bl	8002044 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e160      	b.n	8003df4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b32:	4b0d      	ldr	r3, [pc, #52]	@ (8003b68 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0f0      	beq.n	8003b20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b3e:	2001      	movs	r0, #1
 8003b40:	f000 face 	bl	80040e0 <RCC_Delay>
 8003b44:	e01c      	b.n	8003b80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b46:	4b0a      	ldr	r3, [pc, #40]	@ (8003b70 <HAL_RCC_OscConfig+0x274>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b4c:	f7fe fa7a 	bl	8002044 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b52:	e00f      	b.n	8003b74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b54:	f7fe fa76 	bl	8002044 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d908      	bls.n	8003b74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e146      	b.n	8003df4 <HAL_RCC_OscConfig+0x4f8>
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	42420000 	.word	0x42420000
 8003b70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b74:	4b92      	ldr	r3, [pc, #584]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e9      	bne.n	8003b54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80a6 	beq.w	8003cda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b92:	4b8b      	ldr	r3, [pc, #556]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10d      	bne.n	8003bba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9e:	4b88      	ldr	r3, [pc, #544]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	4a87      	ldr	r2, [pc, #540]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ba8:	61d3      	str	r3, [r2, #28]
 8003baa:	4b85      	ldr	r3, [pc, #532]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bba:	4b82      	ldr	r3, [pc, #520]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d118      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bc6:	4b7f      	ldr	r3, [pc, #508]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a7e      	ldr	r2, [pc, #504]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c8>)
 8003bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd2:	f7fe fa37 	bl	8002044 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bda:	f7fe fa33 	bl	8002044 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b64      	cmp	r3, #100	@ 0x64
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e103      	b.n	8003df4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bec:	4b75      	ldr	r3, [pc, #468]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0f0      	beq.n	8003bda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d106      	bne.n	8003c0e <HAL_RCC_OscConfig+0x312>
 8003c00:	4b6f      	ldr	r3, [pc, #444]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	4a6e      	ldr	r2, [pc, #440]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	6213      	str	r3, [r2, #32]
 8003c0c:	e02d      	b.n	8003c6a <HAL_RCC_OscConfig+0x36e>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x334>
 8003c16:	4b6a      	ldr	r3, [pc, #424]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	4a69      	ldr	r2, [pc, #420]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	6213      	str	r3, [r2, #32]
 8003c22:	4b67      	ldr	r3, [pc, #412]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	4a66      	ldr	r2, [pc, #408]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	f023 0304 	bic.w	r3, r3, #4
 8003c2c:	6213      	str	r3, [r2, #32]
 8003c2e:	e01c      	b.n	8003c6a <HAL_RCC_OscConfig+0x36e>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2b05      	cmp	r3, #5
 8003c36:	d10c      	bne.n	8003c52 <HAL_RCC_OscConfig+0x356>
 8003c38:	4b61      	ldr	r3, [pc, #388]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	4a60      	ldr	r2, [pc, #384]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c3e:	f043 0304 	orr.w	r3, r3, #4
 8003c42:	6213      	str	r3, [r2, #32]
 8003c44:	4b5e      	ldr	r3, [pc, #376]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	4a5d      	ldr	r2, [pc, #372]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	6213      	str	r3, [r2, #32]
 8003c50:	e00b      	b.n	8003c6a <HAL_RCC_OscConfig+0x36e>
 8003c52:	4b5b      	ldr	r3, [pc, #364]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	4a5a      	ldr	r2, [pc, #360]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	6213      	str	r3, [r2, #32]
 8003c5e:	4b58      	ldr	r3, [pc, #352]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	4a57      	ldr	r2, [pc, #348]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	f023 0304 	bic.w	r3, r3, #4
 8003c68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d015      	beq.n	8003c9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c72:	f7fe f9e7 	bl	8002044 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fe f9e3 	bl	8002044 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e0b1      	b.n	8003df4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c90:	4b4b      	ldr	r3, [pc, #300]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0ee      	beq.n	8003c7a <HAL_RCC_OscConfig+0x37e>
 8003c9c:	e014      	b.n	8003cc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9e:	f7fe f9d1 	bl	8002044 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca4:	e00a      	b.n	8003cbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca6:	f7fe f9cd 	bl	8002044 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e09b      	b.n	8003df4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cbc:	4b40      	ldr	r3, [pc, #256]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1ee      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cc8:	7dfb      	ldrb	r3, [r7, #23]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d105      	bne.n	8003cda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cce:	4b3c      	ldr	r3, [pc, #240]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	4a3b      	ldr	r2, [pc, #236]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003cd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8087 	beq.w	8003df2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ce4:	4b36      	ldr	r3, [pc, #216]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 030c 	and.w	r3, r3, #12
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d061      	beq.n	8003db4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d146      	bne.n	8003d86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf8:	4b33      	ldr	r3, [pc, #204]	@ (8003dc8 <HAL_RCC_OscConfig+0x4cc>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfe:	f7fe f9a1 	bl	8002044 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d06:	f7fe f99d 	bl	8002044 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e06d      	b.n	8003df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d18:	4b29      	ldr	r3, [pc, #164]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f0      	bne.n	8003d06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d2c:	d108      	bne.n	8003d40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d2e:	4b24      	ldr	r3, [pc, #144]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	4921      	ldr	r1, [pc, #132]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d40:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a19      	ldr	r1, [r3, #32]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	430b      	orrs	r3, r1
 8003d52:	491b      	ldr	r1, [pc, #108]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d58:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc8 <HAL_RCC_OscConfig+0x4cc>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5e:	f7fe f971 	bl	8002044 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d66:	f7fe f96d 	bl	8002044 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e03d      	b.n	8003df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d78:	4b11      	ldr	r3, [pc, #68]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCC_OscConfig+0x46a>
 8003d84:	e035      	b.n	8003df2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d86:	4b10      	ldr	r3, [pc, #64]	@ (8003dc8 <HAL_RCC_OscConfig+0x4cc>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7fe f95a 	bl	8002044 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d94:	f7fe f956 	bl	8002044 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e026      	b.n	8003df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da6:	4b06      	ldr	r3, [pc, #24]	@ (8003dc0 <HAL_RCC_OscConfig+0x4c4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x498>
 8003db2:	e01e      	b.n	8003df2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d107      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e019      	b.n	8003df4 <HAL_RCC_OscConfig+0x4f8>
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40007000 	.word	0x40007000
 8003dc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <HAL_RCC_OscConfig+0x500>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d106      	bne.n	8003dee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d001      	beq.n	8003df2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40021000 	.word	0x40021000

08003e00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0d0      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e14:	4b6a      	ldr	r3, [pc, #424]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d910      	bls.n	8003e44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e22:	4b67      	ldr	r3, [pc, #412]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 0207 	bic.w	r2, r3, #7
 8003e2a:	4965      	ldr	r1, [pc, #404]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e32:	4b63      	ldr	r3, [pc, #396]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0b8      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d020      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e5c:	4b59      	ldr	r3, [pc, #356]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	4a58      	ldr	r2, [pc, #352]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e74:	4b53      	ldr	r3, [pc, #332]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	4a52      	ldr	r2, [pc, #328]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003e7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e80:	4b50      	ldr	r3, [pc, #320]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	494d      	ldr	r1, [pc, #308]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d040      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d107      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea6:	4b47      	ldr	r3, [pc, #284]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d115      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e07f      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ebe:	4b41      	ldr	r3, [pc, #260]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e073      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ece:	4b3d      	ldr	r3, [pc, #244]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e06b      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ede:	4b39      	ldr	r3, [pc, #228]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f023 0203 	bic.w	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4936      	ldr	r1, [pc, #216]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef0:	f7fe f8a8 	bl	8002044 <HAL_GetTick>
 8003ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef8:	f7fe f8a4 	bl	8002044 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e053      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f003 020c 	and.w	r2, r3, #12
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d1eb      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f20:	4b27      	ldr	r3, [pc, #156]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d210      	bcs.n	8003f50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b24      	ldr	r3, [pc, #144]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 0207 	bic.w	r2, r3, #7
 8003f36:	4922      	ldr	r1, [pc, #136]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3e:	4b20      	ldr	r3, [pc, #128]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e032      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f5c:	4b19      	ldr	r3, [pc, #100]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4916      	ldr	r1, [pc, #88]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f7a:	4b12      	ldr	r3, [pc, #72]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	490e      	ldr	r1, [pc, #56]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f8e:	f000 f821 	bl	8003fd4 <HAL_RCC_GetSysClockFreq>
 8003f92:	4602      	mov	r2, r0
 8003f94:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	091b      	lsrs	r3, r3, #4
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	490a      	ldr	r1, [pc, #40]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa0:	5ccb      	ldrb	r3, [r1, r3]
 8003fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa6:	4a09      	ldr	r2, [pc, #36]	@ (8003fcc <HAL_RCC_ClockConfig+0x1cc>)
 8003fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003faa:	4b09      	ldr	r3, [pc, #36]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1d0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe f806 	bl	8001fc0 <HAL_InitTick>

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40022000 	.word	0x40022000
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	080064a4 	.word	0x080064a4
 8003fcc:	2000000c 	.word	0x2000000c
 8003fd0:	20000010 	.word	0x20000010

08003fd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fee:	4b1e      	ldr	r3, [pc, #120]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d002      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0x30>
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d003      	beq.n	800400a <HAL_RCC_GetSysClockFreq+0x36>
 8004002:	e027      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004004:	4b19      	ldr	r3, [pc, #100]	@ (800406c <HAL_RCC_GetSysClockFreq+0x98>)
 8004006:	613b      	str	r3, [r7, #16]
      break;
 8004008:	e027      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	0c9b      	lsrs	r3, r3, #18
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	4a17      	ldr	r2, [pc, #92]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004014:	5cd3      	ldrb	r3, [r2, r3]
 8004016:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d010      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004022:	4b11      	ldr	r3, [pc, #68]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x94>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	0c5b      	lsrs	r3, r3, #17
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	4a11      	ldr	r2, [pc, #68]	@ (8004074 <HAL_RCC_GetSysClockFreq+0xa0>)
 800402e:	5cd3      	ldrb	r3, [r2, r3]
 8004030:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a0d      	ldr	r2, [pc, #52]	@ (800406c <HAL_RCC_GetSysClockFreq+0x98>)
 8004036:	fb03 f202 	mul.w	r2, r3, r2
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	e004      	b.n	800404e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a0c      	ldr	r2, [pc, #48]	@ (8004078 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004048:	fb02 f303 	mul.w	r3, r2, r3
 800404c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	613b      	str	r3, [r7, #16]
      break;
 8004052:	e002      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004054:	4b05      	ldr	r3, [pc, #20]	@ (800406c <HAL_RCC_GetSysClockFreq+0x98>)
 8004056:	613b      	str	r3, [r7, #16]
      break;
 8004058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800405a:	693b      	ldr	r3, [r7, #16]
}
 800405c:	4618      	mov	r0, r3
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000
 800406c:	007a1200 	.word	0x007a1200
 8004070:	080064bc 	.word	0x080064bc
 8004074:	080064cc 	.word	0x080064cc
 8004078:	003d0900 	.word	0x003d0900

0800407c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004080:	4b02      	ldr	r3, [pc, #8]	@ (800408c <HAL_RCC_GetHCLKFreq+0x10>)
 8004082:	681b      	ldr	r3, [r3, #0]
}
 8004084:	4618      	mov	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr
 800408c:	2000000c 	.word	0x2000000c

08004090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004094:	f7ff fff2 	bl	800407c <HAL_RCC_GetHCLKFreq>
 8004098:	4602      	mov	r2, r0
 800409a:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	0a1b      	lsrs	r3, r3, #8
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	4903      	ldr	r1, [pc, #12]	@ (80040b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040a6:	5ccb      	ldrb	r3, [r1, r3]
 80040a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40021000 	.word	0x40021000
 80040b4:	080064b4 	.word	0x080064b4

080040b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040bc:	f7ff ffde 	bl	800407c <HAL_RCC_GetHCLKFreq>
 80040c0:	4602      	mov	r2, r0
 80040c2:	4b05      	ldr	r3, [pc, #20]	@ (80040d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	0adb      	lsrs	r3, r3, #11
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	4903      	ldr	r1, [pc, #12]	@ (80040dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ce:	5ccb      	ldrb	r3, [r1, r3]
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40021000 	.word	0x40021000
 80040dc:	080064b4 	.word	0x080064b4

080040e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004114 <RCC_Delay+0x34>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004118 <RCC_Delay+0x38>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	0a5b      	lsrs	r3, r3, #9
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	fb02 f303 	mul.w	r3, r2, r3
 80040fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040fc:	bf00      	nop
  }
  while (Delay --);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1e5a      	subs	r2, r3, #1
 8004102:	60fa      	str	r2, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f9      	bne.n	80040fc <RCC_Delay+0x1c>
}
 8004108:	bf00      	nop
 800410a:	bf00      	nop
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr
 8004114:	2000000c 	.word	0x2000000c
 8004118:	10624dd3 	.word	0x10624dd3

0800411c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e042      	b.n	80041b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fd fdd6 	bl	8001cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2224      	movs	r2, #36	@ 0x24
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800415e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f91d 	bl	80043a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695a      	ldr	r2, [r3, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004184:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004194:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	@ 0x28
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	4613      	mov	r3, r2
 80041ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d16d      	bne.n	80042b8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_UART_Transmit+0x2c>
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e066      	b.n	80042ba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2221      	movs	r2, #33	@ 0x21
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041fa:	f7fd ff23 	bl	8002044 <HAL_GetTick>
 80041fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	88fa      	ldrh	r2, [r7, #6]
 8004204:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	88fa      	ldrh	r2, [r7, #6]
 800420a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004214:	d108      	bne.n	8004228 <HAL_UART_Transmit+0x6c>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d104      	bne.n	8004228 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	e003      	b.n	8004230 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800422c:	2300      	movs	r3, #0
 800422e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004230:	e02a      	b.n	8004288 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2200      	movs	r2, #0
 800423a:	2180      	movs	r1, #128	@ 0x80
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f840 	bl	80042c2 <UART_WaitOnFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e036      	b.n	80042ba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10b      	bne.n	800426a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004260:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	3302      	adds	r3, #2
 8004266:	61bb      	str	r3, [r7, #24]
 8004268:	e007      	b.n	800427a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	3301      	adds	r3, #1
 8004278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1cf      	bne.n	8004232 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2200      	movs	r2, #0
 800429a:	2140      	movs	r1, #64	@ 0x40
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 f810 	bl	80042c2 <UART_WaitOnFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e006      	b.n	80042ba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	e000      	b.n	80042ba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80042b8:	2302      	movs	r3, #2
  }
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b090      	sub	sp, #64	@ 0x40
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	603b      	str	r3, [r7, #0]
 80042ce:	4613      	mov	r3, r2
 80042d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d2:	e050      	b.n	8004376 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d04c      	beq.n	8004376 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80042e2:	f7fd feaf 	bl	8002044 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d241      	bcs.n	8004376 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	330c      	adds	r3, #12
 8004310:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004312:	637a      	str	r2, [r7, #52]	@ 0x34
 8004314:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004318:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e5      	bne.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3314      	adds	r3, #20
 800432c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	613b      	str	r3, [r7, #16]
   return(result);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3314      	adds	r3, #20
 8004344:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004346:	623a      	str	r2, [r7, #32]
 8004348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	69f9      	ldr	r1, [r7, #28]
 800434c:	6a3a      	ldr	r2, [r7, #32]
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	61bb      	str	r3, [r7, #24]
   return(result);
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e00f      	b.n	8004396 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4013      	ands	r3, r2
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	bf0c      	ite	eq
 8004386:	2301      	moveq	r3, #1
 8004388:	2300      	movne	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	429a      	cmp	r2, r3
 8004392:	d09f      	beq.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3740      	adds	r7, #64	@ 0x40
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80043da:	f023 030c 	bic.w	r3, r3, #12
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	68b9      	ldr	r1, [r7, #8]
 80043e4:	430b      	orrs	r3, r1
 80043e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a2c      	ldr	r2, [pc, #176]	@ (80044b4 <UART_SetConfig+0x114>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d103      	bne.n	8004410 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004408:	f7ff fe56 	bl	80040b8 <HAL_RCC_GetPCLK2Freq>
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	e002      	b.n	8004416 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004410:	f7ff fe3e 	bl	8004090 <HAL_RCC_GetPCLK1Freq>
 8004414:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	009a      	lsls	r2, r3, #2
 8004420:	441a      	add	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	4a22      	ldr	r2, [pc, #136]	@ (80044b8 <UART_SetConfig+0x118>)
 800442e:	fba2 2303 	umull	r2, r3, r2, r3
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	0119      	lsls	r1, r3, #4
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	009a      	lsls	r2, r3, #2
 8004440:	441a      	add	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	fbb2 f2f3 	udiv	r2, r2, r3
 800444c:	4b1a      	ldr	r3, [pc, #104]	@ (80044b8 <UART_SetConfig+0x118>)
 800444e:	fba3 0302 	umull	r0, r3, r3, r2
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	2064      	movs	r0, #100	@ 0x64
 8004456:	fb00 f303 	mul.w	r3, r0, r3
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	3332      	adds	r3, #50	@ 0x32
 8004460:	4a15      	ldr	r2, [pc, #84]	@ (80044b8 <UART_SetConfig+0x118>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800446c:	4419      	add	r1, r3
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	009a      	lsls	r2, r3, #2
 8004478:	441a      	add	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	fbb2 f2f3 	udiv	r2, r2, r3
 8004484:	4b0c      	ldr	r3, [pc, #48]	@ (80044b8 <UART_SetConfig+0x118>)
 8004486:	fba3 0302 	umull	r0, r3, r3, r2
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	2064      	movs	r0, #100	@ 0x64
 800448e:	fb00 f303 	mul.w	r3, r0, r3
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	3332      	adds	r3, #50	@ 0x32
 8004498:	4a07      	ldr	r2, [pc, #28]	@ (80044b8 <UART_SetConfig+0x118>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	f003 020f 	and.w	r2, r3, #15
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	440a      	add	r2, r1
 80044aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044ac:	bf00      	nop
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40013800 	.word	0x40013800
 80044b8:	51eb851f 	.word	0x51eb851f

080044bc <malloc>:
 80044bc:	4b02      	ldr	r3, [pc, #8]	@ (80044c8 <malloc+0xc>)
 80044be:	4601      	mov	r1, r0
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	f000 b82d 	b.w	8004520 <_malloc_r>
 80044c6:	bf00      	nop
 80044c8:	20000024 	.word	0x20000024

080044cc <free>:
 80044cc:	4b02      	ldr	r3, [pc, #8]	@ (80044d8 <free+0xc>)
 80044ce:	4601      	mov	r1, r0
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	f000 ba83 	b.w	80049dc <_free_r>
 80044d6:	bf00      	nop
 80044d8:	20000024 	.word	0x20000024

080044dc <sbrk_aligned>:
 80044dc:	b570      	push	{r4, r5, r6, lr}
 80044de:	4e0f      	ldr	r6, [pc, #60]	@ (800451c <sbrk_aligned+0x40>)
 80044e0:	460c      	mov	r4, r1
 80044e2:	6831      	ldr	r1, [r6, #0]
 80044e4:	4605      	mov	r5, r0
 80044e6:	b911      	cbnz	r1, 80044ee <sbrk_aligned+0x12>
 80044e8:	f000 fa1a 	bl	8004920 <_sbrk_r>
 80044ec:	6030      	str	r0, [r6, #0]
 80044ee:	4621      	mov	r1, r4
 80044f0:	4628      	mov	r0, r5
 80044f2:	f000 fa15 	bl	8004920 <_sbrk_r>
 80044f6:	1c43      	adds	r3, r0, #1
 80044f8:	d103      	bne.n	8004502 <sbrk_aligned+0x26>
 80044fa:	f04f 34ff 	mov.w	r4, #4294967295
 80044fe:	4620      	mov	r0, r4
 8004500:	bd70      	pop	{r4, r5, r6, pc}
 8004502:	1cc4      	adds	r4, r0, #3
 8004504:	f024 0403 	bic.w	r4, r4, #3
 8004508:	42a0      	cmp	r0, r4
 800450a:	d0f8      	beq.n	80044fe <sbrk_aligned+0x22>
 800450c:	1a21      	subs	r1, r4, r0
 800450e:	4628      	mov	r0, r5
 8004510:	f000 fa06 	bl	8004920 <_sbrk_r>
 8004514:	3001      	adds	r0, #1
 8004516:	d1f2      	bne.n	80044fe <sbrk_aligned+0x22>
 8004518:	e7ef      	b.n	80044fa <sbrk_aligned+0x1e>
 800451a:	bf00      	nop
 800451c:	20000668 	.word	0x20000668

08004520 <_malloc_r>:
 8004520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004524:	1ccd      	adds	r5, r1, #3
 8004526:	f025 0503 	bic.w	r5, r5, #3
 800452a:	3508      	adds	r5, #8
 800452c:	2d0c      	cmp	r5, #12
 800452e:	bf38      	it	cc
 8004530:	250c      	movcc	r5, #12
 8004532:	2d00      	cmp	r5, #0
 8004534:	4606      	mov	r6, r0
 8004536:	db01      	blt.n	800453c <_malloc_r+0x1c>
 8004538:	42a9      	cmp	r1, r5
 800453a:	d904      	bls.n	8004546 <_malloc_r+0x26>
 800453c:	230c      	movs	r3, #12
 800453e:	6033      	str	r3, [r6, #0]
 8004540:	2000      	movs	r0, #0
 8004542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004546:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800461c <_malloc_r+0xfc>
 800454a:	f000 f869 	bl	8004620 <__malloc_lock>
 800454e:	f8d8 3000 	ldr.w	r3, [r8]
 8004552:	461c      	mov	r4, r3
 8004554:	bb44      	cbnz	r4, 80045a8 <_malloc_r+0x88>
 8004556:	4629      	mov	r1, r5
 8004558:	4630      	mov	r0, r6
 800455a:	f7ff ffbf 	bl	80044dc <sbrk_aligned>
 800455e:	1c43      	adds	r3, r0, #1
 8004560:	4604      	mov	r4, r0
 8004562:	d158      	bne.n	8004616 <_malloc_r+0xf6>
 8004564:	f8d8 4000 	ldr.w	r4, [r8]
 8004568:	4627      	mov	r7, r4
 800456a:	2f00      	cmp	r7, #0
 800456c:	d143      	bne.n	80045f6 <_malloc_r+0xd6>
 800456e:	2c00      	cmp	r4, #0
 8004570:	d04b      	beq.n	800460a <_malloc_r+0xea>
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	4639      	mov	r1, r7
 8004576:	4630      	mov	r0, r6
 8004578:	eb04 0903 	add.w	r9, r4, r3
 800457c:	f000 f9d0 	bl	8004920 <_sbrk_r>
 8004580:	4581      	cmp	r9, r0
 8004582:	d142      	bne.n	800460a <_malloc_r+0xea>
 8004584:	6821      	ldr	r1, [r4, #0]
 8004586:	4630      	mov	r0, r6
 8004588:	1a6d      	subs	r5, r5, r1
 800458a:	4629      	mov	r1, r5
 800458c:	f7ff ffa6 	bl	80044dc <sbrk_aligned>
 8004590:	3001      	adds	r0, #1
 8004592:	d03a      	beq.n	800460a <_malloc_r+0xea>
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	442b      	add	r3, r5
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	f8d8 3000 	ldr.w	r3, [r8]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	bb62      	cbnz	r2, 80045fc <_malloc_r+0xdc>
 80045a2:	f8c8 7000 	str.w	r7, [r8]
 80045a6:	e00f      	b.n	80045c8 <_malloc_r+0xa8>
 80045a8:	6822      	ldr	r2, [r4, #0]
 80045aa:	1b52      	subs	r2, r2, r5
 80045ac:	d420      	bmi.n	80045f0 <_malloc_r+0xd0>
 80045ae:	2a0b      	cmp	r2, #11
 80045b0:	d917      	bls.n	80045e2 <_malloc_r+0xc2>
 80045b2:	1961      	adds	r1, r4, r5
 80045b4:	42a3      	cmp	r3, r4
 80045b6:	6025      	str	r5, [r4, #0]
 80045b8:	bf18      	it	ne
 80045ba:	6059      	strne	r1, [r3, #4]
 80045bc:	6863      	ldr	r3, [r4, #4]
 80045be:	bf08      	it	eq
 80045c0:	f8c8 1000 	streq.w	r1, [r8]
 80045c4:	5162      	str	r2, [r4, r5]
 80045c6:	604b      	str	r3, [r1, #4]
 80045c8:	4630      	mov	r0, r6
 80045ca:	f000 f82f 	bl	800462c <__malloc_unlock>
 80045ce:	f104 000b 	add.w	r0, r4, #11
 80045d2:	1d23      	adds	r3, r4, #4
 80045d4:	f020 0007 	bic.w	r0, r0, #7
 80045d8:	1ac2      	subs	r2, r0, r3
 80045da:	bf1c      	itt	ne
 80045dc:	1a1b      	subne	r3, r3, r0
 80045de:	50a3      	strne	r3, [r4, r2]
 80045e0:	e7af      	b.n	8004542 <_malloc_r+0x22>
 80045e2:	6862      	ldr	r2, [r4, #4]
 80045e4:	42a3      	cmp	r3, r4
 80045e6:	bf0c      	ite	eq
 80045e8:	f8c8 2000 	streq.w	r2, [r8]
 80045ec:	605a      	strne	r2, [r3, #4]
 80045ee:	e7eb      	b.n	80045c8 <_malloc_r+0xa8>
 80045f0:	4623      	mov	r3, r4
 80045f2:	6864      	ldr	r4, [r4, #4]
 80045f4:	e7ae      	b.n	8004554 <_malloc_r+0x34>
 80045f6:	463c      	mov	r4, r7
 80045f8:	687f      	ldr	r7, [r7, #4]
 80045fa:	e7b6      	b.n	800456a <_malloc_r+0x4a>
 80045fc:	461a      	mov	r2, r3
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	42a3      	cmp	r3, r4
 8004602:	d1fb      	bne.n	80045fc <_malloc_r+0xdc>
 8004604:	2300      	movs	r3, #0
 8004606:	6053      	str	r3, [r2, #4]
 8004608:	e7de      	b.n	80045c8 <_malloc_r+0xa8>
 800460a:	230c      	movs	r3, #12
 800460c:	4630      	mov	r0, r6
 800460e:	6033      	str	r3, [r6, #0]
 8004610:	f000 f80c 	bl	800462c <__malloc_unlock>
 8004614:	e794      	b.n	8004540 <_malloc_r+0x20>
 8004616:	6005      	str	r5, [r0, #0]
 8004618:	e7d6      	b.n	80045c8 <_malloc_r+0xa8>
 800461a:	bf00      	nop
 800461c:	2000066c 	.word	0x2000066c

08004620 <__malloc_lock>:
 8004620:	4801      	ldr	r0, [pc, #4]	@ (8004628 <__malloc_lock+0x8>)
 8004622:	f000 b9ca 	b.w	80049ba <__retarget_lock_acquire_recursive>
 8004626:	bf00      	nop
 8004628:	200007b0 	.word	0x200007b0

0800462c <__malloc_unlock>:
 800462c:	4801      	ldr	r0, [pc, #4]	@ (8004634 <__malloc_unlock+0x8>)
 800462e:	f000 b9c5 	b.w	80049bc <__retarget_lock_release_recursive>
 8004632:	bf00      	nop
 8004634:	200007b0 	.word	0x200007b0

08004638 <std>:
 8004638:	2300      	movs	r3, #0
 800463a:	b510      	push	{r4, lr}
 800463c:	4604      	mov	r4, r0
 800463e:	e9c0 3300 	strd	r3, r3, [r0]
 8004642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004646:	6083      	str	r3, [r0, #8]
 8004648:	8181      	strh	r1, [r0, #12]
 800464a:	6643      	str	r3, [r0, #100]	@ 0x64
 800464c:	81c2      	strh	r2, [r0, #14]
 800464e:	6183      	str	r3, [r0, #24]
 8004650:	4619      	mov	r1, r3
 8004652:	2208      	movs	r2, #8
 8004654:	305c      	adds	r0, #92	@ 0x5c
 8004656:	f000 f927 	bl	80048a8 <memset>
 800465a:	4b0d      	ldr	r3, [pc, #52]	@ (8004690 <std+0x58>)
 800465c:	6224      	str	r4, [r4, #32]
 800465e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004660:	4b0c      	ldr	r3, [pc, #48]	@ (8004694 <std+0x5c>)
 8004662:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004664:	4b0c      	ldr	r3, [pc, #48]	@ (8004698 <std+0x60>)
 8004666:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004668:	4b0c      	ldr	r3, [pc, #48]	@ (800469c <std+0x64>)
 800466a:	6323      	str	r3, [r4, #48]	@ 0x30
 800466c:	4b0c      	ldr	r3, [pc, #48]	@ (80046a0 <std+0x68>)
 800466e:	429c      	cmp	r4, r3
 8004670:	d006      	beq.n	8004680 <std+0x48>
 8004672:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004676:	4294      	cmp	r4, r2
 8004678:	d002      	beq.n	8004680 <std+0x48>
 800467a:	33d0      	adds	r3, #208	@ 0xd0
 800467c:	429c      	cmp	r4, r3
 800467e:	d105      	bne.n	800468c <std+0x54>
 8004680:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004688:	f000 b996 	b.w	80049b8 <__retarget_lock_init_recursive>
 800468c:	bd10      	pop	{r4, pc}
 800468e:	bf00      	nop
 8004690:	080047e1 	.word	0x080047e1
 8004694:	08004803 	.word	0x08004803
 8004698:	0800483b 	.word	0x0800483b
 800469c:	0800485f 	.word	0x0800485f
 80046a0:	20000670 	.word	0x20000670

080046a4 <stdio_exit_handler>:
 80046a4:	4a02      	ldr	r2, [pc, #8]	@ (80046b0 <stdio_exit_handler+0xc>)
 80046a6:	4903      	ldr	r1, [pc, #12]	@ (80046b4 <stdio_exit_handler+0x10>)
 80046a8:	4803      	ldr	r0, [pc, #12]	@ (80046b8 <stdio_exit_handler+0x14>)
 80046aa:	f000 b869 	b.w	8004780 <_fwalk_sglue>
 80046ae:	bf00      	nop
 80046b0:	20000018 	.word	0x20000018
 80046b4:	080053c1 	.word	0x080053c1
 80046b8:	20000028 	.word	0x20000028

080046bc <cleanup_stdio>:
 80046bc:	6841      	ldr	r1, [r0, #4]
 80046be:	4b0c      	ldr	r3, [pc, #48]	@ (80046f0 <cleanup_stdio+0x34>)
 80046c0:	b510      	push	{r4, lr}
 80046c2:	4299      	cmp	r1, r3
 80046c4:	4604      	mov	r4, r0
 80046c6:	d001      	beq.n	80046cc <cleanup_stdio+0x10>
 80046c8:	f000 fe7a 	bl	80053c0 <_fflush_r>
 80046cc:	68a1      	ldr	r1, [r4, #8]
 80046ce:	4b09      	ldr	r3, [pc, #36]	@ (80046f4 <cleanup_stdio+0x38>)
 80046d0:	4299      	cmp	r1, r3
 80046d2:	d002      	beq.n	80046da <cleanup_stdio+0x1e>
 80046d4:	4620      	mov	r0, r4
 80046d6:	f000 fe73 	bl	80053c0 <_fflush_r>
 80046da:	68e1      	ldr	r1, [r4, #12]
 80046dc:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <cleanup_stdio+0x3c>)
 80046de:	4299      	cmp	r1, r3
 80046e0:	d004      	beq.n	80046ec <cleanup_stdio+0x30>
 80046e2:	4620      	mov	r0, r4
 80046e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046e8:	f000 be6a 	b.w	80053c0 <_fflush_r>
 80046ec:	bd10      	pop	{r4, pc}
 80046ee:	bf00      	nop
 80046f0:	20000670 	.word	0x20000670
 80046f4:	200006d8 	.word	0x200006d8
 80046f8:	20000740 	.word	0x20000740

080046fc <global_stdio_init.part.0>:
 80046fc:	b510      	push	{r4, lr}
 80046fe:	4b0b      	ldr	r3, [pc, #44]	@ (800472c <global_stdio_init.part.0+0x30>)
 8004700:	4c0b      	ldr	r4, [pc, #44]	@ (8004730 <global_stdio_init.part.0+0x34>)
 8004702:	4a0c      	ldr	r2, [pc, #48]	@ (8004734 <global_stdio_init.part.0+0x38>)
 8004704:	4620      	mov	r0, r4
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	2104      	movs	r1, #4
 800470a:	2200      	movs	r2, #0
 800470c:	f7ff ff94 	bl	8004638 <std>
 8004710:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004714:	2201      	movs	r2, #1
 8004716:	2109      	movs	r1, #9
 8004718:	f7ff ff8e 	bl	8004638 <std>
 800471c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004720:	2202      	movs	r2, #2
 8004722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004726:	2112      	movs	r1, #18
 8004728:	f7ff bf86 	b.w	8004638 <std>
 800472c:	200007a8 	.word	0x200007a8
 8004730:	20000670 	.word	0x20000670
 8004734:	080046a5 	.word	0x080046a5

08004738 <__sfp_lock_acquire>:
 8004738:	4801      	ldr	r0, [pc, #4]	@ (8004740 <__sfp_lock_acquire+0x8>)
 800473a:	f000 b93e 	b.w	80049ba <__retarget_lock_acquire_recursive>
 800473e:	bf00      	nop
 8004740:	200007b1 	.word	0x200007b1

08004744 <__sfp_lock_release>:
 8004744:	4801      	ldr	r0, [pc, #4]	@ (800474c <__sfp_lock_release+0x8>)
 8004746:	f000 b939 	b.w	80049bc <__retarget_lock_release_recursive>
 800474a:	bf00      	nop
 800474c:	200007b1 	.word	0x200007b1

08004750 <__sinit>:
 8004750:	b510      	push	{r4, lr}
 8004752:	4604      	mov	r4, r0
 8004754:	f7ff fff0 	bl	8004738 <__sfp_lock_acquire>
 8004758:	6a23      	ldr	r3, [r4, #32]
 800475a:	b11b      	cbz	r3, 8004764 <__sinit+0x14>
 800475c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004760:	f7ff bff0 	b.w	8004744 <__sfp_lock_release>
 8004764:	4b04      	ldr	r3, [pc, #16]	@ (8004778 <__sinit+0x28>)
 8004766:	6223      	str	r3, [r4, #32]
 8004768:	4b04      	ldr	r3, [pc, #16]	@ (800477c <__sinit+0x2c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1f5      	bne.n	800475c <__sinit+0xc>
 8004770:	f7ff ffc4 	bl	80046fc <global_stdio_init.part.0>
 8004774:	e7f2      	b.n	800475c <__sinit+0xc>
 8004776:	bf00      	nop
 8004778:	080046bd 	.word	0x080046bd
 800477c:	200007a8 	.word	0x200007a8

08004780 <_fwalk_sglue>:
 8004780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004784:	4607      	mov	r7, r0
 8004786:	4688      	mov	r8, r1
 8004788:	4614      	mov	r4, r2
 800478a:	2600      	movs	r6, #0
 800478c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004790:	f1b9 0901 	subs.w	r9, r9, #1
 8004794:	d505      	bpl.n	80047a2 <_fwalk_sglue+0x22>
 8004796:	6824      	ldr	r4, [r4, #0]
 8004798:	2c00      	cmp	r4, #0
 800479a:	d1f7      	bne.n	800478c <_fwalk_sglue+0xc>
 800479c:	4630      	mov	r0, r6
 800479e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047a2:	89ab      	ldrh	r3, [r5, #12]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d907      	bls.n	80047b8 <_fwalk_sglue+0x38>
 80047a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047ac:	3301      	adds	r3, #1
 80047ae:	d003      	beq.n	80047b8 <_fwalk_sglue+0x38>
 80047b0:	4629      	mov	r1, r5
 80047b2:	4638      	mov	r0, r7
 80047b4:	47c0      	blx	r8
 80047b6:	4306      	orrs	r6, r0
 80047b8:	3568      	adds	r5, #104	@ 0x68
 80047ba:	e7e9      	b.n	8004790 <_fwalk_sglue+0x10>

080047bc <iprintf>:
 80047bc:	b40f      	push	{r0, r1, r2, r3}
 80047be:	b507      	push	{r0, r1, r2, lr}
 80047c0:	4906      	ldr	r1, [pc, #24]	@ (80047dc <iprintf+0x20>)
 80047c2:	ab04      	add	r3, sp, #16
 80047c4:	6808      	ldr	r0, [r1, #0]
 80047c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80047ca:	6881      	ldr	r1, [r0, #8]
 80047cc:	9301      	str	r3, [sp, #4]
 80047ce:	f000 facd 	bl	8004d6c <_vfiprintf_r>
 80047d2:	b003      	add	sp, #12
 80047d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047d8:	b004      	add	sp, #16
 80047da:	4770      	bx	lr
 80047dc:	20000024 	.word	0x20000024

080047e0 <__sread>:
 80047e0:	b510      	push	{r4, lr}
 80047e2:	460c      	mov	r4, r1
 80047e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e8:	f000 f888 	bl	80048fc <_read_r>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	bfab      	itete	ge
 80047f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80047f2:	89a3      	ldrhlt	r3, [r4, #12]
 80047f4:	181b      	addge	r3, r3, r0
 80047f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047fa:	bfac      	ite	ge
 80047fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80047fe:	81a3      	strhlt	r3, [r4, #12]
 8004800:	bd10      	pop	{r4, pc}

08004802 <__swrite>:
 8004802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004806:	461f      	mov	r7, r3
 8004808:	898b      	ldrh	r3, [r1, #12]
 800480a:	4605      	mov	r5, r0
 800480c:	05db      	lsls	r3, r3, #23
 800480e:	460c      	mov	r4, r1
 8004810:	4616      	mov	r6, r2
 8004812:	d505      	bpl.n	8004820 <__swrite+0x1e>
 8004814:	2302      	movs	r3, #2
 8004816:	2200      	movs	r2, #0
 8004818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800481c:	f000 f85c 	bl	80048d8 <_lseek_r>
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	4632      	mov	r2, r6
 8004824:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004828:	81a3      	strh	r3, [r4, #12]
 800482a:	4628      	mov	r0, r5
 800482c:	463b      	mov	r3, r7
 800482e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004836:	f000 b883 	b.w	8004940 <_write_r>

0800483a <__sseek>:
 800483a:	b510      	push	{r4, lr}
 800483c:	460c      	mov	r4, r1
 800483e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004842:	f000 f849 	bl	80048d8 <_lseek_r>
 8004846:	1c43      	adds	r3, r0, #1
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	bf15      	itete	ne
 800484c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800484e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004852:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004856:	81a3      	strheq	r3, [r4, #12]
 8004858:	bf18      	it	ne
 800485a:	81a3      	strhne	r3, [r4, #12]
 800485c:	bd10      	pop	{r4, pc}

0800485e <__sclose>:
 800485e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004862:	f000 b829 	b.w	80048b8 <_close_r>
	...

08004868 <_vsiprintf_r>:
 8004868:	b500      	push	{lr}
 800486a:	b09b      	sub	sp, #108	@ 0x6c
 800486c:	9100      	str	r1, [sp, #0]
 800486e:	9104      	str	r1, [sp, #16]
 8004870:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004874:	9105      	str	r1, [sp, #20]
 8004876:	9102      	str	r1, [sp, #8]
 8004878:	4905      	ldr	r1, [pc, #20]	@ (8004890 <_vsiprintf_r+0x28>)
 800487a:	9103      	str	r1, [sp, #12]
 800487c:	4669      	mov	r1, sp
 800487e:	f000 f951 	bl	8004b24 <_svfiprintf_r>
 8004882:	2200      	movs	r2, #0
 8004884:	9b00      	ldr	r3, [sp, #0]
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	b01b      	add	sp, #108	@ 0x6c
 800488a:	f85d fb04 	ldr.w	pc, [sp], #4
 800488e:	bf00      	nop
 8004890:	ffff0208 	.word	0xffff0208

08004894 <vsiprintf>:
 8004894:	4613      	mov	r3, r2
 8004896:	460a      	mov	r2, r1
 8004898:	4601      	mov	r1, r0
 800489a:	4802      	ldr	r0, [pc, #8]	@ (80048a4 <vsiprintf+0x10>)
 800489c:	6800      	ldr	r0, [r0, #0]
 800489e:	f7ff bfe3 	b.w	8004868 <_vsiprintf_r>
 80048a2:	bf00      	nop
 80048a4:	20000024 	.word	0x20000024

080048a8 <memset>:
 80048a8:	4603      	mov	r3, r0
 80048aa:	4402      	add	r2, r0
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d100      	bne.n	80048b2 <memset+0xa>
 80048b0:	4770      	bx	lr
 80048b2:	f803 1b01 	strb.w	r1, [r3], #1
 80048b6:	e7f9      	b.n	80048ac <memset+0x4>

080048b8 <_close_r>:
 80048b8:	b538      	push	{r3, r4, r5, lr}
 80048ba:	2300      	movs	r3, #0
 80048bc:	4d05      	ldr	r5, [pc, #20]	@ (80048d4 <_close_r+0x1c>)
 80048be:	4604      	mov	r4, r0
 80048c0:	4608      	mov	r0, r1
 80048c2:	602b      	str	r3, [r5, #0]
 80048c4:	f7fd fad3 	bl	8001e6e <_close>
 80048c8:	1c43      	adds	r3, r0, #1
 80048ca:	d102      	bne.n	80048d2 <_close_r+0x1a>
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	b103      	cbz	r3, 80048d2 <_close_r+0x1a>
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	bd38      	pop	{r3, r4, r5, pc}
 80048d4:	200007ac 	.word	0x200007ac

080048d8 <_lseek_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4604      	mov	r4, r0
 80048dc:	4608      	mov	r0, r1
 80048de:	4611      	mov	r1, r2
 80048e0:	2200      	movs	r2, #0
 80048e2:	4d05      	ldr	r5, [pc, #20]	@ (80048f8 <_lseek_r+0x20>)
 80048e4:	602a      	str	r2, [r5, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f7fd fae5 	bl	8001eb6 <_lseek>
 80048ec:	1c43      	adds	r3, r0, #1
 80048ee:	d102      	bne.n	80048f6 <_lseek_r+0x1e>
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	b103      	cbz	r3, 80048f6 <_lseek_r+0x1e>
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	bd38      	pop	{r3, r4, r5, pc}
 80048f8:	200007ac 	.word	0x200007ac

080048fc <_read_r>:
 80048fc:	b538      	push	{r3, r4, r5, lr}
 80048fe:	4604      	mov	r4, r0
 8004900:	4608      	mov	r0, r1
 8004902:	4611      	mov	r1, r2
 8004904:	2200      	movs	r2, #0
 8004906:	4d05      	ldr	r5, [pc, #20]	@ (800491c <_read_r+0x20>)
 8004908:	602a      	str	r2, [r5, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	f7fd fa76 	bl	8001dfc <_read>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d102      	bne.n	800491a <_read_r+0x1e>
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	b103      	cbz	r3, 800491a <_read_r+0x1e>
 8004918:	6023      	str	r3, [r4, #0]
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	200007ac 	.word	0x200007ac

08004920 <_sbrk_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	2300      	movs	r3, #0
 8004924:	4d05      	ldr	r5, [pc, #20]	@ (800493c <_sbrk_r+0x1c>)
 8004926:	4604      	mov	r4, r0
 8004928:	4608      	mov	r0, r1
 800492a:	602b      	str	r3, [r5, #0]
 800492c:	f7fd fad0 	bl	8001ed0 <_sbrk>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d102      	bne.n	800493a <_sbrk_r+0x1a>
 8004934:	682b      	ldr	r3, [r5, #0]
 8004936:	b103      	cbz	r3, 800493a <_sbrk_r+0x1a>
 8004938:	6023      	str	r3, [r4, #0]
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	200007ac 	.word	0x200007ac

08004940 <_write_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	4604      	mov	r4, r0
 8004944:	4608      	mov	r0, r1
 8004946:	4611      	mov	r1, r2
 8004948:	2200      	movs	r2, #0
 800494a:	4d05      	ldr	r5, [pc, #20]	@ (8004960 <_write_r+0x20>)
 800494c:	602a      	str	r2, [r5, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	f7fd fa71 	bl	8001e36 <_write>
 8004954:	1c43      	adds	r3, r0, #1
 8004956:	d102      	bne.n	800495e <_write_r+0x1e>
 8004958:	682b      	ldr	r3, [r5, #0]
 800495a:	b103      	cbz	r3, 800495e <_write_r+0x1e>
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	bd38      	pop	{r3, r4, r5, pc}
 8004960:	200007ac 	.word	0x200007ac

08004964 <__errno>:
 8004964:	4b01      	ldr	r3, [pc, #4]	@ (800496c <__errno+0x8>)
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	20000024 	.word	0x20000024

08004970 <__libc_init_array>:
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	2600      	movs	r6, #0
 8004974:	4d0c      	ldr	r5, [pc, #48]	@ (80049a8 <__libc_init_array+0x38>)
 8004976:	4c0d      	ldr	r4, [pc, #52]	@ (80049ac <__libc_init_array+0x3c>)
 8004978:	1b64      	subs	r4, r4, r5
 800497a:	10a4      	asrs	r4, r4, #2
 800497c:	42a6      	cmp	r6, r4
 800497e:	d109      	bne.n	8004994 <__libc_init_array+0x24>
 8004980:	f000 febc 	bl	80056fc <_init>
 8004984:	2600      	movs	r6, #0
 8004986:	4d0a      	ldr	r5, [pc, #40]	@ (80049b0 <__libc_init_array+0x40>)
 8004988:	4c0a      	ldr	r4, [pc, #40]	@ (80049b4 <__libc_init_array+0x44>)
 800498a:	1b64      	subs	r4, r4, r5
 800498c:	10a4      	asrs	r4, r4, #2
 800498e:	42a6      	cmp	r6, r4
 8004990:	d105      	bne.n	800499e <__libc_init_array+0x2e>
 8004992:	bd70      	pop	{r4, r5, r6, pc}
 8004994:	f855 3b04 	ldr.w	r3, [r5], #4
 8004998:	4798      	blx	r3
 800499a:	3601      	adds	r6, #1
 800499c:	e7ee      	b.n	800497c <__libc_init_array+0xc>
 800499e:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a2:	4798      	blx	r3
 80049a4:	3601      	adds	r6, #1
 80049a6:	e7f2      	b.n	800498e <__libc_init_array+0x1e>
 80049a8:	08006504 	.word	0x08006504
 80049ac:	08006504 	.word	0x08006504
 80049b0:	08006504 	.word	0x08006504
 80049b4:	08006508 	.word	0x08006508

080049b8 <__retarget_lock_init_recursive>:
 80049b8:	4770      	bx	lr

080049ba <__retarget_lock_acquire_recursive>:
 80049ba:	4770      	bx	lr

080049bc <__retarget_lock_release_recursive>:
 80049bc:	4770      	bx	lr

080049be <memcpy>:
 80049be:	440a      	add	r2, r1
 80049c0:	4291      	cmp	r1, r2
 80049c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80049c6:	d100      	bne.n	80049ca <memcpy+0xc>
 80049c8:	4770      	bx	lr
 80049ca:	b510      	push	{r4, lr}
 80049cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049d0:	4291      	cmp	r1, r2
 80049d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049d6:	d1f9      	bne.n	80049cc <memcpy+0xe>
 80049d8:	bd10      	pop	{r4, pc}
	...

080049dc <_free_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	4605      	mov	r5, r0
 80049e0:	2900      	cmp	r1, #0
 80049e2:	d040      	beq.n	8004a66 <_free_r+0x8a>
 80049e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049e8:	1f0c      	subs	r4, r1, #4
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	bfb8      	it	lt
 80049ee:	18e4      	addlt	r4, r4, r3
 80049f0:	f7ff fe16 	bl	8004620 <__malloc_lock>
 80049f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a68 <_free_r+0x8c>)
 80049f6:	6813      	ldr	r3, [r2, #0]
 80049f8:	b933      	cbnz	r3, 8004a08 <_free_r+0x2c>
 80049fa:	6063      	str	r3, [r4, #4]
 80049fc:	6014      	str	r4, [r2, #0]
 80049fe:	4628      	mov	r0, r5
 8004a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a04:	f7ff be12 	b.w	800462c <__malloc_unlock>
 8004a08:	42a3      	cmp	r3, r4
 8004a0a:	d908      	bls.n	8004a1e <_free_r+0x42>
 8004a0c:	6820      	ldr	r0, [r4, #0]
 8004a0e:	1821      	adds	r1, r4, r0
 8004a10:	428b      	cmp	r3, r1
 8004a12:	bf01      	itttt	eq
 8004a14:	6819      	ldreq	r1, [r3, #0]
 8004a16:	685b      	ldreq	r3, [r3, #4]
 8004a18:	1809      	addeq	r1, r1, r0
 8004a1a:	6021      	streq	r1, [r4, #0]
 8004a1c:	e7ed      	b.n	80049fa <_free_r+0x1e>
 8004a1e:	461a      	mov	r2, r3
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	b10b      	cbz	r3, 8004a28 <_free_r+0x4c>
 8004a24:	42a3      	cmp	r3, r4
 8004a26:	d9fa      	bls.n	8004a1e <_free_r+0x42>
 8004a28:	6811      	ldr	r1, [r2, #0]
 8004a2a:	1850      	adds	r0, r2, r1
 8004a2c:	42a0      	cmp	r0, r4
 8004a2e:	d10b      	bne.n	8004a48 <_free_r+0x6c>
 8004a30:	6820      	ldr	r0, [r4, #0]
 8004a32:	4401      	add	r1, r0
 8004a34:	1850      	adds	r0, r2, r1
 8004a36:	4283      	cmp	r3, r0
 8004a38:	6011      	str	r1, [r2, #0]
 8004a3a:	d1e0      	bne.n	80049fe <_free_r+0x22>
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4408      	add	r0, r1
 8004a42:	6010      	str	r0, [r2, #0]
 8004a44:	6053      	str	r3, [r2, #4]
 8004a46:	e7da      	b.n	80049fe <_free_r+0x22>
 8004a48:	d902      	bls.n	8004a50 <_free_r+0x74>
 8004a4a:	230c      	movs	r3, #12
 8004a4c:	602b      	str	r3, [r5, #0]
 8004a4e:	e7d6      	b.n	80049fe <_free_r+0x22>
 8004a50:	6820      	ldr	r0, [r4, #0]
 8004a52:	1821      	adds	r1, r4, r0
 8004a54:	428b      	cmp	r3, r1
 8004a56:	bf01      	itttt	eq
 8004a58:	6819      	ldreq	r1, [r3, #0]
 8004a5a:	685b      	ldreq	r3, [r3, #4]
 8004a5c:	1809      	addeq	r1, r1, r0
 8004a5e:	6021      	streq	r1, [r4, #0]
 8004a60:	6063      	str	r3, [r4, #4]
 8004a62:	6054      	str	r4, [r2, #4]
 8004a64:	e7cb      	b.n	80049fe <_free_r+0x22>
 8004a66:	bd38      	pop	{r3, r4, r5, pc}
 8004a68:	2000066c 	.word	0x2000066c

08004a6c <__ssputs_r>:
 8004a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a70:	461f      	mov	r7, r3
 8004a72:	688e      	ldr	r6, [r1, #8]
 8004a74:	4682      	mov	sl, r0
 8004a76:	42be      	cmp	r6, r7
 8004a78:	460c      	mov	r4, r1
 8004a7a:	4690      	mov	r8, r2
 8004a7c:	680b      	ldr	r3, [r1, #0]
 8004a7e:	d82d      	bhi.n	8004adc <__ssputs_r+0x70>
 8004a80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004a88:	d026      	beq.n	8004ad8 <__ssputs_r+0x6c>
 8004a8a:	6965      	ldr	r5, [r4, #20]
 8004a8c:	6909      	ldr	r1, [r1, #16]
 8004a8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a92:	eba3 0901 	sub.w	r9, r3, r1
 8004a96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a9a:	1c7b      	adds	r3, r7, #1
 8004a9c:	444b      	add	r3, r9
 8004a9e:	106d      	asrs	r5, r5, #1
 8004aa0:	429d      	cmp	r5, r3
 8004aa2:	bf38      	it	cc
 8004aa4:	461d      	movcc	r5, r3
 8004aa6:	0553      	lsls	r3, r2, #21
 8004aa8:	d527      	bpl.n	8004afa <__ssputs_r+0x8e>
 8004aaa:	4629      	mov	r1, r5
 8004aac:	f7ff fd38 	bl	8004520 <_malloc_r>
 8004ab0:	4606      	mov	r6, r0
 8004ab2:	b360      	cbz	r0, 8004b0e <__ssputs_r+0xa2>
 8004ab4:	464a      	mov	r2, r9
 8004ab6:	6921      	ldr	r1, [r4, #16]
 8004ab8:	f7ff ff81 	bl	80049be <memcpy>
 8004abc:	89a3      	ldrh	r3, [r4, #12]
 8004abe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac6:	81a3      	strh	r3, [r4, #12]
 8004ac8:	6126      	str	r6, [r4, #16]
 8004aca:	444e      	add	r6, r9
 8004acc:	6026      	str	r6, [r4, #0]
 8004ace:	463e      	mov	r6, r7
 8004ad0:	6165      	str	r5, [r4, #20]
 8004ad2:	eba5 0509 	sub.w	r5, r5, r9
 8004ad6:	60a5      	str	r5, [r4, #8]
 8004ad8:	42be      	cmp	r6, r7
 8004ada:	d900      	bls.n	8004ade <__ssputs_r+0x72>
 8004adc:	463e      	mov	r6, r7
 8004ade:	4632      	mov	r2, r6
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	6820      	ldr	r0, [r4, #0]
 8004ae4:	f000 fd28 	bl	8005538 <memmove>
 8004ae8:	2000      	movs	r0, #0
 8004aea:	68a3      	ldr	r3, [r4, #8]
 8004aec:	1b9b      	subs	r3, r3, r6
 8004aee:	60a3      	str	r3, [r4, #8]
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	4433      	add	r3, r6
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afa:	462a      	mov	r2, r5
 8004afc:	f000 fd44 	bl	8005588 <_realloc_r>
 8004b00:	4606      	mov	r6, r0
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d1e0      	bne.n	8004ac8 <__ssputs_r+0x5c>
 8004b06:	4650      	mov	r0, sl
 8004b08:	6921      	ldr	r1, [r4, #16]
 8004b0a:	f7ff ff67 	bl	80049dc <_free_r>
 8004b0e:	230c      	movs	r3, #12
 8004b10:	f8ca 3000 	str.w	r3, [sl]
 8004b14:	89a3      	ldrh	r3, [r4, #12]
 8004b16:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b1e:	81a3      	strh	r3, [r4, #12]
 8004b20:	e7e9      	b.n	8004af6 <__ssputs_r+0x8a>
	...

08004b24 <_svfiprintf_r>:
 8004b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b28:	4698      	mov	r8, r3
 8004b2a:	898b      	ldrh	r3, [r1, #12]
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	061b      	lsls	r3, r3, #24
 8004b30:	460d      	mov	r5, r1
 8004b32:	4614      	mov	r4, r2
 8004b34:	b09d      	sub	sp, #116	@ 0x74
 8004b36:	d510      	bpl.n	8004b5a <_svfiprintf_r+0x36>
 8004b38:	690b      	ldr	r3, [r1, #16]
 8004b3a:	b973      	cbnz	r3, 8004b5a <_svfiprintf_r+0x36>
 8004b3c:	2140      	movs	r1, #64	@ 0x40
 8004b3e:	f7ff fcef 	bl	8004520 <_malloc_r>
 8004b42:	6028      	str	r0, [r5, #0]
 8004b44:	6128      	str	r0, [r5, #16]
 8004b46:	b930      	cbnz	r0, 8004b56 <_svfiprintf_r+0x32>
 8004b48:	230c      	movs	r3, #12
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b50:	b01d      	add	sp, #116	@ 0x74
 8004b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b56:	2340      	movs	r3, #64	@ 0x40
 8004b58:	616b      	str	r3, [r5, #20]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b5e:	2320      	movs	r3, #32
 8004b60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b64:	2330      	movs	r3, #48	@ 0x30
 8004b66:	f04f 0901 	mov.w	r9, #1
 8004b6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b6e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004d08 <_svfiprintf_r+0x1e4>
 8004b72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b76:	4623      	mov	r3, r4
 8004b78:	469a      	mov	sl, r3
 8004b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b7e:	b10a      	cbz	r2, 8004b84 <_svfiprintf_r+0x60>
 8004b80:	2a25      	cmp	r2, #37	@ 0x25
 8004b82:	d1f9      	bne.n	8004b78 <_svfiprintf_r+0x54>
 8004b84:	ebba 0b04 	subs.w	fp, sl, r4
 8004b88:	d00b      	beq.n	8004ba2 <_svfiprintf_r+0x7e>
 8004b8a:	465b      	mov	r3, fp
 8004b8c:	4622      	mov	r2, r4
 8004b8e:	4629      	mov	r1, r5
 8004b90:	4638      	mov	r0, r7
 8004b92:	f7ff ff6b 	bl	8004a6c <__ssputs_r>
 8004b96:	3001      	adds	r0, #1
 8004b98:	f000 80a7 	beq.w	8004cea <_svfiprintf_r+0x1c6>
 8004b9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b9e:	445a      	add	r2, fp
 8004ba0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 809f 	beq.w	8004cea <_svfiprintf_r+0x1c6>
 8004bac:	2300      	movs	r3, #0
 8004bae:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bb6:	f10a 0a01 	add.w	sl, sl, #1
 8004bba:	9304      	str	r3, [sp, #16]
 8004bbc:	9307      	str	r3, [sp, #28]
 8004bbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bc2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bc4:	4654      	mov	r4, sl
 8004bc6:	2205      	movs	r2, #5
 8004bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bcc:	484e      	ldr	r0, [pc, #312]	@ (8004d08 <_svfiprintf_r+0x1e4>)
 8004bce:	f000 fccd 	bl	800556c <memchr>
 8004bd2:	9a04      	ldr	r2, [sp, #16]
 8004bd4:	b9d8      	cbnz	r0, 8004c0e <_svfiprintf_r+0xea>
 8004bd6:	06d0      	lsls	r0, r2, #27
 8004bd8:	bf44      	itt	mi
 8004bda:	2320      	movmi	r3, #32
 8004bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004be0:	0711      	lsls	r1, r2, #28
 8004be2:	bf44      	itt	mi
 8004be4:	232b      	movmi	r3, #43	@ 0x2b
 8004be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bea:	f89a 3000 	ldrb.w	r3, [sl]
 8004bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bf0:	d015      	beq.n	8004c1e <_svfiprintf_r+0xfa>
 8004bf2:	4654      	mov	r4, sl
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	f04f 0c0a 	mov.w	ip, #10
 8004bfa:	9a07      	ldr	r2, [sp, #28]
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c02:	3b30      	subs	r3, #48	@ 0x30
 8004c04:	2b09      	cmp	r3, #9
 8004c06:	d94b      	bls.n	8004ca0 <_svfiprintf_r+0x17c>
 8004c08:	b1b0      	cbz	r0, 8004c38 <_svfiprintf_r+0x114>
 8004c0a:	9207      	str	r2, [sp, #28]
 8004c0c:	e014      	b.n	8004c38 <_svfiprintf_r+0x114>
 8004c0e:	eba0 0308 	sub.w	r3, r0, r8
 8004c12:	fa09 f303 	lsl.w	r3, r9, r3
 8004c16:	4313      	orrs	r3, r2
 8004c18:	46a2      	mov	sl, r4
 8004c1a:	9304      	str	r3, [sp, #16]
 8004c1c:	e7d2      	b.n	8004bc4 <_svfiprintf_r+0xa0>
 8004c1e:	9b03      	ldr	r3, [sp, #12]
 8004c20:	1d19      	adds	r1, r3, #4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	9103      	str	r1, [sp, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	bfbb      	ittet	lt
 8004c2a:	425b      	neglt	r3, r3
 8004c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8004c30:	9307      	strge	r3, [sp, #28]
 8004c32:	9307      	strlt	r3, [sp, #28]
 8004c34:	bfb8      	it	lt
 8004c36:	9204      	strlt	r2, [sp, #16]
 8004c38:	7823      	ldrb	r3, [r4, #0]
 8004c3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c3c:	d10a      	bne.n	8004c54 <_svfiprintf_r+0x130>
 8004c3e:	7863      	ldrb	r3, [r4, #1]
 8004c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c42:	d132      	bne.n	8004caa <_svfiprintf_r+0x186>
 8004c44:	9b03      	ldr	r3, [sp, #12]
 8004c46:	3402      	adds	r4, #2
 8004c48:	1d1a      	adds	r2, r3, #4
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	9203      	str	r2, [sp, #12]
 8004c4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c52:	9305      	str	r3, [sp, #20]
 8004c54:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004d0c <_svfiprintf_r+0x1e8>
 8004c58:	2203      	movs	r2, #3
 8004c5a:	4650      	mov	r0, sl
 8004c5c:	7821      	ldrb	r1, [r4, #0]
 8004c5e:	f000 fc85 	bl	800556c <memchr>
 8004c62:	b138      	cbz	r0, 8004c74 <_svfiprintf_r+0x150>
 8004c64:	2240      	movs	r2, #64	@ 0x40
 8004c66:	9b04      	ldr	r3, [sp, #16]
 8004c68:	eba0 000a 	sub.w	r0, r0, sl
 8004c6c:	4082      	lsls	r2, r0
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	3401      	adds	r4, #1
 8004c72:	9304      	str	r3, [sp, #16]
 8004c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c78:	2206      	movs	r2, #6
 8004c7a:	4825      	ldr	r0, [pc, #148]	@ (8004d10 <_svfiprintf_r+0x1ec>)
 8004c7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c80:	f000 fc74 	bl	800556c <memchr>
 8004c84:	2800      	cmp	r0, #0
 8004c86:	d036      	beq.n	8004cf6 <_svfiprintf_r+0x1d2>
 8004c88:	4b22      	ldr	r3, [pc, #136]	@ (8004d14 <_svfiprintf_r+0x1f0>)
 8004c8a:	bb1b      	cbnz	r3, 8004cd4 <_svfiprintf_r+0x1b0>
 8004c8c:	9b03      	ldr	r3, [sp, #12]
 8004c8e:	3307      	adds	r3, #7
 8004c90:	f023 0307 	bic.w	r3, r3, #7
 8004c94:	3308      	adds	r3, #8
 8004c96:	9303      	str	r3, [sp, #12]
 8004c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c9a:	4433      	add	r3, r6
 8004c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c9e:	e76a      	b.n	8004b76 <_svfiprintf_r+0x52>
 8004ca0:	460c      	mov	r4, r1
 8004ca2:	2001      	movs	r0, #1
 8004ca4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ca8:	e7a8      	b.n	8004bfc <_svfiprintf_r+0xd8>
 8004caa:	2300      	movs	r3, #0
 8004cac:	f04f 0c0a 	mov.w	ip, #10
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	3401      	adds	r4, #1
 8004cb4:	9305      	str	r3, [sp, #20]
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cbc:	3a30      	subs	r2, #48	@ 0x30
 8004cbe:	2a09      	cmp	r2, #9
 8004cc0:	d903      	bls.n	8004cca <_svfiprintf_r+0x1a6>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0c6      	beq.n	8004c54 <_svfiprintf_r+0x130>
 8004cc6:	9105      	str	r1, [sp, #20]
 8004cc8:	e7c4      	b.n	8004c54 <_svfiprintf_r+0x130>
 8004cca:	4604      	mov	r4, r0
 8004ccc:	2301      	movs	r3, #1
 8004cce:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cd2:	e7f0      	b.n	8004cb6 <_svfiprintf_r+0x192>
 8004cd4:	ab03      	add	r3, sp, #12
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	462a      	mov	r2, r5
 8004cda:	4638      	mov	r0, r7
 8004cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8004d18 <_svfiprintf_r+0x1f4>)
 8004cde:	a904      	add	r1, sp, #16
 8004ce0:	f3af 8000 	nop.w
 8004ce4:	1c42      	adds	r2, r0, #1
 8004ce6:	4606      	mov	r6, r0
 8004ce8:	d1d6      	bne.n	8004c98 <_svfiprintf_r+0x174>
 8004cea:	89ab      	ldrh	r3, [r5, #12]
 8004cec:	065b      	lsls	r3, r3, #25
 8004cee:	f53f af2d 	bmi.w	8004b4c <_svfiprintf_r+0x28>
 8004cf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004cf4:	e72c      	b.n	8004b50 <_svfiprintf_r+0x2c>
 8004cf6:	ab03      	add	r3, sp, #12
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	462a      	mov	r2, r5
 8004cfc:	4638      	mov	r0, r7
 8004cfe:	4b06      	ldr	r3, [pc, #24]	@ (8004d18 <_svfiprintf_r+0x1f4>)
 8004d00:	a904      	add	r1, sp, #16
 8004d02:	f000 f9bd 	bl	8005080 <_printf_i>
 8004d06:	e7ed      	b.n	8004ce4 <_svfiprintf_r+0x1c0>
 8004d08:	080064ce 	.word	0x080064ce
 8004d0c:	080064d4 	.word	0x080064d4
 8004d10:	080064d8 	.word	0x080064d8
 8004d14:	00000000 	.word	0x00000000
 8004d18:	08004a6d 	.word	0x08004a6d

08004d1c <__sfputc_r>:
 8004d1c:	6893      	ldr	r3, [r2, #8]
 8004d1e:	b410      	push	{r4}
 8004d20:	3b01      	subs	r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	6093      	str	r3, [r2, #8]
 8004d26:	da07      	bge.n	8004d38 <__sfputc_r+0x1c>
 8004d28:	6994      	ldr	r4, [r2, #24]
 8004d2a:	42a3      	cmp	r3, r4
 8004d2c:	db01      	blt.n	8004d32 <__sfputc_r+0x16>
 8004d2e:	290a      	cmp	r1, #10
 8004d30:	d102      	bne.n	8004d38 <__sfputc_r+0x1c>
 8004d32:	bc10      	pop	{r4}
 8004d34:	f000 bb6c 	b.w	8005410 <__swbuf_r>
 8004d38:	6813      	ldr	r3, [r2, #0]
 8004d3a:	1c58      	adds	r0, r3, #1
 8004d3c:	6010      	str	r0, [r2, #0]
 8004d3e:	7019      	strb	r1, [r3, #0]
 8004d40:	4608      	mov	r0, r1
 8004d42:	bc10      	pop	{r4}
 8004d44:	4770      	bx	lr

08004d46 <__sfputs_r>:
 8004d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d48:	4606      	mov	r6, r0
 8004d4a:	460f      	mov	r7, r1
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	18d5      	adds	r5, r2, r3
 8004d50:	42ac      	cmp	r4, r5
 8004d52:	d101      	bne.n	8004d58 <__sfputs_r+0x12>
 8004d54:	2000      	movs	r0, #0
 8004d56:	e007      	b.n	8004d68 <__sfputs_r+0x22>
 8004d58:	463a      	mov	r2, r7
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d60:	f7ff ffdc 	bl	8004d1c <__sfputc_r>
 8004d64:	1c43      	adds	r3, r0, #1
 8004d66:	d1f3      	bne.n	8004d50 <__sfputs_r+0xa>
 8004d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d6c <_vfiprintf_r>:
 8004d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d70:	460d      	mov	r5, r1
 8004d72:	4614      	mov	r4, r2
 8004d74:	4698      	mov	r8, r3
 8004d76:	4606      	mov	r6, r0
 8004d78:	b09d      	sub	sp, #116	@ 0x74
 8004d7a:	b118      	cbz	r0, 8004d84 <_vfiprintf_r+0x18>
 8004d7c:	6a03      	ldr	r3, [r0, #32]
 8004d7e:	b90b      	cbnz	r3, 8004d84 <_vfiprintf_r+0x18>
 8004d80:	f7ff fce6 	bl	8004750 <__sinit>
 8004d84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d86:	07d9      	lsls	r1, r3, #31
 8004d88:	d405      	bmi.n	8004d96 <_vfiprintf_r+0x2a>
 8004d8a:	89ab      	ldrh	r3, [r5, #12]
 8004d8c:	059a      	lsls	r2, r3, #22
 8004d8e:	d402      	bmi.n	8004d96 <_vfiprintf_r+0x2a>
 8004d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d92:	f7ff fe12 	bl	80049ba <__retarget_lock_acquire_recursive>
 8004d96:	89ab      	ldrh	r3, [r5, #12]
 8004d98:	071b      	lsls	r3, r3, #28
 8004d9a:	d501      	bpl.n	8004da0 <_vfiprintf_r+0x34>
 8004d9c:	692b      	ldr	r3, [r5, #16]
 8004d9e:	b99b      	cbnz	r3, 8004dc8 <_vfiprintf_r+0x5c>
 8004da0:	4629      	mov	r1, r5
 8004da2:	4630      	mov	r0, r6
 8004da4:	f000 fb72 	bl	800548c <__swsetup_r>
 8004da8:	b170      	cbz	r0, 8004dc8 <_vfiprintf_r+0x5c>
 8004daa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dac:	07dc      	lsls	r4, r3, #31
 8004dae:	d504      	bpl.n	8004dba <_vfiprintf_r+0x4e>
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	b01d      	add	sp, #116	@ 0x74
 8004db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dba:	89ab      	ldrh	r3, [r5, #12]
 8004dbc:	0598      	lsls	r0, r3, #22
 8004dbe:	d4f7      	bmi.n	8004db0 <_vfiprintf_r+0x44>
 8004dc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dc2:	f7ff fdfb 	bl	80049bc <__retarget_lock_release_recursive>
 8004dc6:	e7f3      	b.n	8004db0 <_vfiprintf_r+0x44>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dcc:	2320      	movs	r3, #32
 8004dce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004dd2:	2330      	movs	r3, #48	@ 0x30
 8004dd4:	f04f 0901 	mov.w	r9, #1
 8004dd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ddc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004f88 <_vfiprintf_r+0x21c>
 8004de0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004de4:	4623      	mov	r3, r4
 8004de6:	469a      	mov	sl, r3
 8004de8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dec:	b10a      	cbz	r2, 8004df2 <_vfiprintf_r+0x86>
 8004dee:	2a25      	cmp	r2, #37	@ 0x25
 8004df0:	d1f9      	bne.n	8004de6 <_vfiprintf_r+0x7a>
 8004df2:	ebba 0b04 	subs.w	fp, sl, r4
 8004df6:	d00b      	beq.n	8004e10 <_vfiprintf_r+0xa4>
 8004df8:	465b      	mov	r3, fp
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f7ff ffa1 	bl	8004d46 <__sfputs_r>
 8004e04:	3001      	adds	r0, #1
 8004e06:	f000 80a7 	beq.w	8004f58 <_vfiprintf_r+0x1ec>
 8004e0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e0c:	445a      	add	r2, fp
 8004e0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e10:	f89a 3000 	ldrb.w	r3, [sl]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 809f 	beq.w	8004f58 <_vfiprintf_r+0x1ec>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e24:	f10a 0a01 	add.w	sl, sl, #1
 8004e28:	9304      	str	r3, [sp, #16]
 8004e2a:	9307      	str	r3, [sp, #28]
 8004e2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e30:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e32:	4654      	mov	r4, sl
 8004e34:	2205      	movs	r2, #5
 8004e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e3a:	4853      	ldr	r0, [pc, #332]	@ (8004f88 <_vfiprintf_r+0x21c>)
 8004e3c:	f000 fb96 	bl	800556c <memchr>
 8004e40:	9a04      	ldr	r2, [sp, #16]
 8004e42:	b9d8      	cbnz	r0, 8004e7c <_vfiprintf_r+0x110>
 8004e44:	06d1      	lsls	r1, r2, #27
 8004e46:	bf44      	itt	mi
 8004e48:	2320      	movmi	r3, #32
 8004e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e4e:	0713      	lsls	r3, r2, #28
 8004e50:	bf44      	itt	mi
 8004e52:	232b      	movmi	r3, #43	@ 0x2b
 8004e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e58:	f89a 3000 	ldrb.w	r3, [sl]
 8004e5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e5e:	d015      	beq.n	8004e8c <_vfiprintf_r+0x120>
 8004e60:	4654      	mov	r4, sl
 8004e62:	2000      	movs	r0, #0
 8004e64:	f04f 0c0a 	mov.w	ip, #10
 8004e68:	9a07      	ldr	r2, [sp, #28]
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e70:	3b30      	subs	r3, #48	@ 0x30
 8004e72:	2b09      	cmp	r3, #9
 8004e74:	d94b      	bls.n	8004f0e <_vfiprintf_r+0x1a2>
 8004e76:	b1b0      	cbz	r0, 8004ea6 <_vfiprintf_r+0x13a>
 8004e78:	9207      	str	r2, [sp, #28]
 8004e7a:	e014      	b.n	8004ea6 <_vfiprintf_r+0x13a>
 8004e7c:	eba0 0308 	sub.w	r3, r0, r8
 8004e80:	fa09 f303 	lsl.w	r3, r9, r3
 8004e84:	4313      	orrs	r3, r2
 8004e86:	46a2      	mov	sl, r4
 8004e88:	9304      	str	r3, [sp, #16]
 8004e8a:	e7d2      	b.n	8004e32 <_vfiprintf_r+0xc6>
 8004e8c:	9b03      	ldr	r3, [sp, #12]
 8004e8e:	1d19      	adds	r1, r3, #4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	9103      	str	r1, [sp, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bfbb      	ittet	lt
 8004e98:	425b      	neglt	r3, r3
 8004e9a:	f042 0202 	orrlt.w	r2, r2, #2
 8004e9e:	9307      	strge	r3, [sp, #28]
 8004ea0:	9307      	strlt	r3, [sp, #28]
 8004ea2:	bfb8      	it	lt
 8004ea4:	9204      	strlt	r2, [sp, #16]
 8004ea6:	7823      	ldrb	r3, [r4, #0]
 8004ea8:	2b2e      	cmp	r3, #46	@ 0x2e
 8004eaa:	d10a      	bne.n	8004ec2 <_vfiprintf_r+0x156>
 8004eac:	7863      	ldrb	r3, [r4, #1]
 8004eae:	2b2a      	cmp	r3, #42	@ 0x2a
 8004eb0:	d132      	bne.n	8004f18 <_vfiprintf_r+0x1ac>
 8004eb2:	9b03      	ldr	r3, [sp, #12]
 8004eb4:	3402      	adds	r4, #2
 8004eb6:	1d1a      	adds	r2, r3, #4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	9203      	str	r2, [sp, #12]
 8004ebc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ec0:	9305      	str	r3, [sp, #20]
 8004ec2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004f8c <_vfiprintf_r+0x220>
 8004ec6:	2203      	movs	r2, #3
 8004ec8:	4650      	mov	r0, sl
 8004eca:	7821      	ldrb	r1, [r4, #0]
 8004ecc:	f000 fb4e 	bl	800556c <memchr>
 8004ed0:	b138      	cbz	r0, 8004ee2 <_vfiprintf_r+0x176>
 8004ed2:	2240      	movs	r2, #64	@ 0x40
 8004ed4:	9b04      	ldr	r3, [sp, #16]
 8004ed6:	eba0 000a 	sub.w	r0, r0, sl
 8004eda:	4082      	lsls	r2, r0
 8004edc:	4313      	orrs	r3, r2
 8004ede:	3401      	adds	r4, #1
 8004ee0:	9304      	str	r3, [sp, #16]
 8004ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee6:	2206      	movs	r2, #6
 8004ee8:	4829      	ldr	r0, [pc, #164]	@ (8004f90 <_vfiprintf_r+0x224>)
 8004eea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004eee:	f000 fb3d 	bl	800556c <memchr>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d03f      	beq.n	8004f76 <_vfiprintf_r+0x20a>
 8004ef6:	4b27      	ldr	r3, [pc, #156]	@ (8004f94 <_vfiprintf_r+0x228>)
 8004ef8:	bb1b      	cbnz	r3, 8004f42 <_vfiprintf_r+0x1d6>
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	3307      	adds	r3, #7
 8004efe:	f023 0307 	bic.w	r3, r3, #7
 8004f02:	3308      	adds	r3, #8
 8004f04:	9303      	str	r3, [sp, #12]
 8004f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f08:	443b      	add	r3, r7
 8004f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f0c:	e76a      	b.n	8004de4 <_vfiprintf_r+0x78>
 8004f0e:	460c      	mov	r4, r1
 8004f10:	2001      	movs	r0, #1
 8004f12:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f16:	e7a8      	b.n	8004e6a <_vfiprintf_r+0xfe>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f04f 0c0a 	mov.w	ip, #10
 8004f1e:	4619      	mov	r1, r3
 8004f20:	3401      	adds	r4, #1
 8004f22:	9305      	str	r3, [sp, #20]
 8004f24:	4620      	mov	r0, r4
 8004f26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f2a:	3a30      	subs	r2, #48	@ 0x30
 8004f2c:	2a09      	cmp	r2, #9
 8004f2e:	d903      	bls.n	8004f38 <_vfiprintf_r+0x1cc>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0c6      	beq.n	8004ec2 <_vfiprintf_r+0x156>
 8004f34:	9105      	str	r1, [sp, #20]
 8004f36:	e7c4      	b.n	8004ec2 <_vfiprintf_r+0x156>
 8004f38:	4604      	mov	r4, r0
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f40:	e7f0      	b.n	8004f24 <_vfiprintf_r+0x1b8>
 8004f42:	ab03      	add	r3, sp, #12
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	462a      	mov	r2, r5
 8004f48:	4630      	mov	r0, r6
 8004f4a:	4b13      	ldr	r3, [pc, #76]	@ (8004f98 <_vfiprintf_r+0x22c>)
 8004f4c:	a904      	add	r1, sp, #16
 8004f4e:	f3af 8000 	nop.w
 8004f52:	4607      	mov	r7, r0
 8004f54:	1c78      	adds	r0, r7, #1
 8004f56:	d1d6      	bne.n	8004f06 <_vfiprintf_r+0x19a>
 8004f58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f5a:	07d9      	lsls	r1, r3, #31
 8004f5c:	d405      	bmi.n	8004f6a <_vfiprintf_r+0x1fe>
 8004f5e:	89ab      	ldrh	r3, [r5, #12]
 8004f60:	059a      	lsls	r2, r3, #22
 8004f62:	d402      	bmi.n	8004f6a <_vfiprintf_r+0x1fe>
 8004f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f66:	f7ff fd29 	bl	80049bc <__retarget_lock_release_recursive>
 8004f6a:	89ab      	ldrh	r3, [r5, #12]
 8004f6c:	065b      	lsls	r3, r3, #25
 8004f6e:	f53f af1f 	bmi.w	8004db0 <_vfiprintf_r+0x44>
 8004f72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f74:	e71e      	b.n	8004db4 <_vfiprintf_r+0x48>
 8004f76:	ab03      	add	r3, sp, #12
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	462a      	mov	r2, r5
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	4b06      	ldr	r3, [pc, #24]	@ (8004f98 <_vfiprintf_r+0x22c>)
 8004f80:	a904      	add	r1, sp, #16
 8004f82:	f000 f87d 	bl	8005080 <_printf_i>
 8004f86:	e7e4      	b.n	8004f52 <_vfiprintf_r+0x1e6>
 8004f88:	080064ce 	.word	0x080064ce
 8004f8c:	080064d4 	.word	0x080064d4
 8004f90:	080064d8 	.word	0x080064d8
 8004f94:	00000000 	.word	0x00000000
 8004f98:	08004d47 	.word	0x08004d47

08004f9c <_printf_common>:
 8004f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa0:	4616      	mov	r6, r2
 8004fa2:	4698      	mov	r8, r3
 8004fa4:	688a      	ldr	r2, [r1, #8]
 8004fa6:	690b      	ldr	r3, [r1, #16]
 8004fa8:	4607      	mov	r7, r0
 8004faa:	4293      	cmp	r3, r2
 8004fac:	bfb8      	it	lt
 8004fae:	4613      	movlt	r3, r2
 8004fb0:	6033      	str	r3, [r6, #0]
 8004fb2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fbc:	b10a      	cbz	r2, 8004fc2 <_printf_common+0x26>
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	6033      	str	r3, [r6, #0]
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	0699      	lsls	r1, r3, #26
 8004fc6:	bf42      	ittt	mi
 8004fc8:	6833      	ldrmi	r3, [r6, #0]
 8004fca:	3302      	addmi	r3, #2
 8004fcc:	6033      	strmi	r3, [r6, #0]
 8004fce:	6825      	ldr	r5, [r4, #0]
 8004fd0:	f015 0506 	ands.w	r5, r5, #6
 8004fd4:	d106      	bne.n	8004fe4 <_printf_common+0x48>
 8004fd6:	f104 0a19 	add.w	sl, r4, #25
 8004fda:	68e3      	ldr	r3, [r4, #12]
 8004fdc:	6832      	ldr	r2, [r6, #0]
 8004fde:	1a9b      	subs	r3, r3, r2
 8004fe0:	42ab      	cmp	r3, r5
 8004fe2:	dc2b      	bgt.n	800503c <_printf_common+0xa0>
 8004fe4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fe8:	6822      	ldr	r2, [r4, #0]
 8004fea:	3b00      	subs	r3, #0
 8004fec:	bf18      	it	ne
 8004fee:	2301      	movne	r3, #1
 8004ff0:	0692      	lsls	r2, r2, #26
 8004ff2:	d430      	bmi.n	8005056 <_printf_common+0xba>
 8004ff4:	4641      	mov	r1, r8
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ffc:	47c8      	blx	r9
 8004ffe:	3001      	adds	r0, #1
 8005000:	d023      	beq.n	800504a <_printf_common+0xae>
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	6922      	ldr	r2, [r4, #16]
 8005006:	f003 0306 	and.w	r3, r3, #6
 800500a:	2b04      	cmp	r3, #4
 800500c:	bf14      	ite	ne
 800500e:	2500      	movne	r5, #0
 8005010:	6833      	ldreq	r3, [r6, #0]
 8005012:	f04f 0600 	mov.w	r6, #0
 8005016:	bf08      	it	eq
 8005018:	68e5      	ldreq	r5, [r4, #12]
 800501a:	f104 041a 	add.w	r4, r4, #26
 800501e:	bf08      	it	eq
 8005020:	1aed      	subeq	r5, r5, r3
 8005022:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005026:	bf08      	it	eq
 8005028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800502c:	4293      	cmp	r3, r2
 800502e:	bfc4      	itt	gt
 8005030:	1a9b      	subgt	r3, r3, r2
 8005032:	18ed      	addgt	r5, r5, r3
 8005034:	42b5      	cmp	r5, r6
 8005036:	d11a      	bne.n	800506e <_printf_common+0xd2>
 8005038:	2000      	movs	r0, #0
 800503a:	e008      	b.n	800504e <_printf_common+0xb2>
 800503c:	2301      	movs	r3, #1
 800503e:	4652      	mov	r2, sl
 8005040:	4641      	mov	r1, r8
 8005042:	4638      	mov	r0, r7
 8005044:	47c8      	blx	r9
 8005046:	3001      	adds	r0, #1
 8005048:	d103      	bne.n	8005052 <_printf_common+0xb6>
 800504a:	f04f 30ff 	mov.w	r0, #4294967295
 800504e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005052:	3501      	adds	r5, #1
 8005054:	e7c1      	b.n	8004fda <_printf_common+0x3e>
 8005056:	2030      	movs	r0, #48	@ 0x30
 8005058:	18e1      	adds	r1, r4, r3
 800505a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005064:	4422      	add	r2, r4
 8005066:	3302      	adds	r3, #2
 8005068:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800506c:	e7c2      	b.n	8004ff4 <_printf_common+0x58>
 800506e:	2301      	movs	r3, #1
 8005070:	4622      	mov	r2, r4
 8005072:	4641      	mov	r1, r8
 8005074:	4638      	mov	r0, r7
 8005076:	47c8      	blx	r9
 8005078:	3001      	adds	r0, #1
 800507a:	d0e6      	beq.n	800504a <_printf_common+0xae>
 800507c:	3601      	adds	r6, #1
 800507e:	e7d9      	b.n	8005034 <_printf_common+0x98>

08005080 <_printf_i>:
 8005080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005084:	7e0f      	ldrb	r7, [r1, #24]
 8005086:	4691      	mov	r9, r2
 8005088:	2f78      	cmp	r7, #120	@ 0x78
 800508a:	4680      	mov	r8, r0
 800508c:	460c      	mov	r4, r1
 800508e:	469a      	mov	sl, r3
 8005090:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005092:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005096:	d807      	bhi.n	80050a8 <_printf_i+0x28>
 8005098:	2f62      	cmp	r7, #98	@ 0x62
 800509a:	d80a      	bhi.n	80050b2 <_printf_i+0x32>
 800509c:	2f00      	cmp	r7, #0
 800509e:	f000 80d3 	beq.w	8005248 <_printf_i+0x1c8>
 80050a2:	2f58      	cmp	r7, #88	@ 0x58
 80050a4:	f000 80ba 	beq.w	800521c <_printf_i+0x19c>
 80050a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050b0:	e03a      	b.n	8005128 <_printf_i+0xa8>
 80050b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050b6:	2b15      	cmp	r3, #21
 80050b8:	d8f6      	bhi.n	80050a8 <_printf_i+0x28>
 80050ba:	a101      	add	r1, pc, #4	@ (adr r1, 80050c0 <_printf_i+0x40>)
 80050bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050c0:	08005119 	.word	0x08005119
 80050c4:	0800512d 	.word	0x0800512d
 80050c8:	080050a9 	.word	0x080050a9
 80050cc:	080050a9 	.word	0x080050a9
 80050d0:	080050a9 	.word	0x080050a9
 80050d4:	080050a9 	.word	0x080050a9
 80050d8:	0800512d 	.word	0x0800512d
 80050dc:	080050a9 	.word	0x080050a9
 80050e0:	080050a9 	.word	0x080050a9
 80050e4:	080050a9 	.word	0x080050a9
 80050e8:	080050a9 	.word	0x080050a9
 80050ec:	0800522f 	.word	0x0800522f
 80050f0:	08005157 	.word	0x08005157
 80050f4:	080051e9 	.word	0x080051e9
 80050f8:	080050a9 	.word	0x080050a9
 80050fc:	080050a9 	.word	0x080050a9
 8005100:	08005251 	.word	0x08005251
 8005104:	080050a9 	.word	0x080050a9
 8005108:	08005157 	.word	0x08005157
 800510c:	080050a9 	.word	0x080050a9
 8005110:	080050a9 	.word	0x080050a9
 8005114:	080051f1 	.word	0x080051f1
 8005118:	6833      	ldr	r3, [r6, #0]
 800511a:	1d1a      	adds	r2, r3, #4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6032      	str	r2, [r6, #0]
 8005120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005124:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005128:	2301      	movs	r3, #1
 800512a:	e09e      	b.n	800526a <_printf_i+0x1ea>
 800512c:	6833      	ldr	r3, [r6, #0]
 800512e:	6820      	ldr	r0, [r4, #0]
 8005130:	1d19      	adds	r1, r3, #4
 8005132:	6031      	str	r1, [r6, #0]
 8005134:	0606      	lsls	r6, r0, #24
 8005136:	d501      	bpl.n	800513c <_printf_i+0xbc>
 8005138:	681d      	ldr	r5, [r3, #0]
 800513a:	e003      	b.n	8005144 <_printf_i+0xc4>
 800513c:	0645      	lsls	r5, r0, #25
 800513e:	d5fb      	bpl.n	8005138 <_printf_i+0xb8>
 8005140:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005144:	2d00      	cmp	r5, #0
 8005146:	da03      	bge.n	8005150 <_printf_i+0xd0>
 8005148:	232d      	movs	r3, #45	@ 0x2d
 800514a:	426d      	negs	r5, r5
 800514c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005150:	230a      	movs	r3, #10
 8005152:	4859      	ldr	r0, [pc, #356]	@ (80052b8 <_printf_i+0x238>)
 8005154:	e011      	b.n	800517a <_printf_i+0xfa>
 8005156:	6821      	ldr	r1, [r4, #0]
 8005158:	6833      	ldr	r3, [r6, #0]
 800515a:	0608      	lsls	r0, r1, #24
 800515c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005160:	d402      	bmi.n	8005168 <_printf_i+0xe8>
 8005162:	0649      	lsls	r1, r1, #25
 8005164:	bf48      	it	mi
 8005166:	b2ad      	uxthmi	r5, r5
 8005168:	2f6f      	cmp	r7, #111	@ 0x6f
 800516a:	6033      	str	r3, [r6, #0]
 800516c:	bf14      	ite	ne
 800516e:	230a      	movne	r3, #10
 8005170:	2308      	moveq	r3, #8
 8005172:	4851      	ldr	r0, [pc, #324]	@ (80052b8 <_printf_i+0x238>)
 8005174:	2100      	movs	r1, #0
 8005176:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800517a:	6866      	ldr	r6, [r4, #4]
 800517c:	2e00      	cmp	r6, #0
 800517e:	bfa8      	it	ge
 8005180:	6821      	ldrge	r1, [r4, #0]
 8005182:	60a6      	str	r6, [r4, #8]
 8005184:	bfa4      	itt	ge
 8005186:	f021 0104 	bicge.w	r1, r1, #4
 800518a:	6021      	strge	r1, [r4, #0]
 800518c:	b90d      	cbnz	r5, 8005192 <_printf_i+0x112>
 800518e:	2e00      	cmp	r6, #0
 8005190:	d04b      	beq.n	800522a <_printf_i+0x1aa>
 8005192:	4616      	mov	r6, r2
 8005194:	fbb5 f1f3 	udiv	r1, r5, r3
 8005198:	fb03 5711 	mls	r7, r3, r1, r5
 800519c:	5dc7      	ldrb	r7, [r0, r7]
 800519e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051a2:	462f      	mov	r7, r5
 80051a4:	42bb      	cmp	r3, r7
 80051a6:	460d      	mov	r5, r1
 80051a8:	d9f4      	bls.n	8005194 <_printf_i+0x114>
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d10b      	bne.n	80051c6 <_printf_i+0x146>
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	07df      	lsls	r7, r3, #31
 80051b2:	d508      	bpl.n	80051c6 <_printf_i+0x146>
 80051b4:	6923      	ldr	r3, [r4, #16]
 80051b6:	6861      	ldr	r1, [r4, #4]
 80051b8:	4299      	cmp	r1, r3
 80051ba:	bfde      	ittt	le
 80051bc:	2330      	movle	r3, #48	@ 0x30
 80051be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051c6:	1b92      	subs	r2, r2, r6
 80051c8:	6122      	str	r2, [r4, #16]
 80051ca:	464b      	mov	r3, r9
 80051cc:	4621      	mov	r1, r4
 80051ce:	4640      	mov	r0, r8
 80051d0:	f8cd a000 	str.w	sl, [sp]
 80051d4:	aa03      	add	r2, sp, #12
 80051d6:	f7ff fee1 	bl	8004f9c <_printf_common>
 80051da:	3001      	adds	r0, #1
 80051dc:	d14a      	bne.n	8005274 <_printf_i+0x1f4>
 80051de:	f04f 30ff 	mov.w	r0, #4294967295
 80051e2:	b004      	add	sp, #16
 80051e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	f043 0320 	orr.w	r3, r3, #32
 80051ee:	6023      	str	r3, [r4, #0]
 80051f0:	2778      	movs	r7, #120	@ 0x78
 80051f2:	4832      	ldr	r0, [pc, #200]	@ (80052bc <_printf_i+0x23c>)
 80051f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	6831      	ldr	r1, [r6, #0]
 80051fc:	061f      	lsls	r7, r3, #24
 80051fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8005202:	d402      	bmi.n	800520a <_printf_i+0x18a>
 8005204:	065f      	lsls	r7, r3, #25
 8005206:	bf48      	it	mi
 8005208:	b2ad      	uxthmi	r5, r5
 800520a:	6031      	str	r1, [r6, #0]
 800520c:	07d9      	lsls	r1, r3, #31
 800520e:	bf44      	itt	mi
 8005210:	f043 0320 	orrmi.w	r3, r3, #32
 8005214:	6023      	strmi	r3, [r4, #0]
 8005216:	b11d      	cbz	r5, 8005220 <_printf_i+0x1a0>
 8005218:	2310      	movs	r3, #16
 800521a:	e7ab      	b.n	8005174 <_printf_i+0xf4>
 800521c:	4826      	ldr	r0, [pc, #152]	@ (80052b8 <_printf_i+0x238>)
 800521e:	e7e9      	b.n	80051f4 <_printf_i+0x174>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	f023 0320 	bic.w	r3, r3, #32
 8005226:	6023      	str	r3, [r4, #0]
 8005228:	e7f6      	b.n	8005218 <_printf_i+0x198>
 800522a:	4616      	mov	r6, r2
 800522c:	e7bd      	b.n	80051aa <_printf_i+0x12a>
 800522e:	6833      	ldr	r3, [r6, #0]
 8005230:	6825      	ldr	r5, [r4, #0]
 8005232:	1d18      	adds	r0, r3, #4
 8005234:	6961      	ldr	r1, [r4, #20]
 8005236:	6030      	str	r0, [r6, #0]
 8005238:	062e      	lsls	r6, r5, #24
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	d501      	bpl.n	8005242 <_printf_i+0x1c2>
 800523e:	6019      	str	r1, [r3, #0]
 8005240:	e002      	b.n	8005248 <_printf_i+0x1c8>
 8005242:	0668      	lsls	r0, r5, #25
 8005244:	d5fb      	bpl.n	800523e <_printf_i+0x1be>
 8005246:	8019      	strh	r1, [r3, #0]
 8005248:	2300      	movs	r3, #0
 800524a:	4616      	mov	r6, r2
 800524c:	6123      	str	r3, [r4, #16]
 800524e:	e7bc      	b.n	80051ca <_printf_i+0x14a>
 8005250:	6833      	ldr	r3, [r6, #0]
 8005252:	2100      	movs	r1, #0
 8005254:	1d1a      	adds	r2, r3, #4
 8005256:	6032      	str	r2, [r6, #0]
 8005258:	681e      	ldr	r6, [r3, #0]
 800525a:	6862      	ldr	r2, [r4, #4]
 800525c:	4630      	mov	r0, r6
 800525e:	f000 f985 	bl	800556c <memchr>
 8005262:	b108      	cbz	r0, 8005268 <_printf_i+0x1e8>
 8005264:	1b80      	subs	r0, r0, r6
 8005266:	6060      	str	r0, [r4, #4]
 8005268:	6863      	ldr	r3, [r4, #4]
 800526a:	6123      	str	r3, [r4, #16]
 800526c:	2300      	movs	r3, #0
 800526e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005272:	e7aa      	b.n	80051ca <_printf_i+0x14a>
 8005274:	4632      	mov	r2, r6
 8005276:	4649      	mov	r1, r9
 8005278:	4640      	mov	r0, r8
 800527a:	6923      	ldr	r3, [r4, #16]
 800527c:	47d0      	blx	sl
 800527e:	3001      	adds	r0, #1
 8005280:	d0ad      	beq.n	80051de <_printf_i+0x15e>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	079b      	lsls	r3, r3, #30
 8005286:	d413      	bmi.n	80052b0 <_printf_i+0x230>
 8005288:	68e0      	ldr	r0, [r4, #12]
 800528a:	9b03      	ldr	r3, [sp, #12]
 800528c:	4298      	cmp	r0, r3
 800528e:	bfb8      	it	lt
 8005290:	4618      	movlt	r0, r3
 8005292:	e7a6      	b.n	80051e2 <_printf_i+0x162>
 8005294:	2301      	movs	r3, #1
 8005296:	4632      	mov	r2, r6
 8005298:	4649      	mov	r1, r9
 800529a:	4640      	mov	r0, r8
 800529c:	47d0      	blx	sl
 800529e:	3001      	adds	r0, #1
 80052a0:	d09d      	beq.n	80051de <_printf_i+0x15e>
 80052a2:	3501      	adds	r5, #1
 80052a4:	68e3      	ldr	r3, [r4, #12]
 80052a6:	9903      	ldr	r1, [sp, #12]
 80052a8:	1a5b      	subs	r3, r3, r1
 80052aa:	42ab      	cmp	r3, r5
 80052ac:	dcf2      	bgt.n	8005294 <_printf_i+0x214>
 80052ae:	e7eb      	b.n	8005288 <_printf_i+0x208>
 80052b0:	2500      	movs	r5, #0
 80052b2:	f104 0619 	add.w	r6, r4, #25
 80052b6:	e7f5      	b.n	80052a4 <_printf_i+0x224>
 80052b8:	080064df 	.word	0x080064df
 80052bc:	080064f0 	.word	0x080064f0

080052c0 <__sflush_r>:
 80052c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c6:	0716      	lsls	r6, r2, #28
 80052c8:	4605      	mov	r5, r0
 80052ca:	460c      	mov	r4, r1
 80052cc:	d454      	bmi.n	8005378 <__sflush_r+0xb8>
 80052ce:	684b      	ldr	r3, [r1, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	dc02      	bgt.n	80052da <__sflush_r+0x1a>
 80052d4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	dd48      	ble.n	800536c <__sflush_r+0xac>
 80052da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052dc:	2e00      	cmp	r6, #0
 80052de:	d045      	beq.n	800536c <__sflush_r+0xac>
 80052e0:	2300      	movs	r3, #0
 80052e2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80052e6:	682f      	ldr	r7, [r5, #0]
 80052e8:	6a21      	ldr	r1, [r4, #32]
 80052ea:	602b      	str	r3, [r5, #0]
 80052ec:	d030      	beq.n	8005350 <__sflush_r+0x90>
 80052ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	0759      	lsls	r1, r3, #29
 80052f4:	d505      	bpl.n	8005302 <__sflush_r+0x42>
 80052f6:	6863      	ldr	r3, [r4, #4]
 80052f8:	1ad2      	subs	r2, r2, r3
 80052fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80052fc:	b10b      	cbz	r3, 8005302 <__sflush_r+0x42>
 80052fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005300:	1ad2      	subs	r2, r2, r3
 8005302:	2300      	movs	r3, #0
 8005304:	4628      	mov	r0, r5
 8005306:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005308:	6a21      	ldr	r1, [r4, #32]
 800530a:	47b0      	blx	r6
 800530c:	1c43      	adds	r3, r0, #1
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	d106      	bne.n	8005320 <__sflush_r+0x60>
 8005312:	6829      	ldr	r1, [r5, #0]
 8005314:	291d      	cmp	r1, #29
 8005316:	d82b      	bhi.n	8005370 <__sflush_r+0xb0>
 8005318:	4a28      	ldr	r2, [pc, #160]	@ (80053bc <__sflush_r+0xfc>)
 800531a:	410a      	asrs	r2, r1
 800531c:	07d6      	lsls	r6, r2, #31
 800531e:	d427      	bmi.n	8005370 <__sflush_r+0xb0>
 8005320:	2200      	movs	r2, #0
 8005322:	6062      	str	r2, [r4, #4]
 8005324:	6922      	ldr	r2, [r4, #16]
 8005326:	04d9      	lsls	r1, r3, #19
 8005328:	6022      	str	r2, [r4, #0]
 800532a:	d504      	bpl.n	8005336 <__sflush_r+0x76>
 800532c:	1c42      	adds	r2, r0, #1
 800532e:	d101      	bne.n	8005334 <__sflush_r+0x74>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	b903      	cbnz	r3, 8005336 <__sflush_r+0x76>
 8005334:	6560      	str	r0, [r4, #84]	@ 0x54
 8005336:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005338:	602f      	str	r7, [r5, #0]
 800533a:	b1b9      	cbz	r1, 800536c <__sflush_r+0xac>
 800533c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005340:	4299      	cmp	r1, r3
 8005342:	d002      	beq.n	800534a <__sflush_r+0x8a>
 8005344:	4628      	mov	r0, r5
 8005346:	f7ff fb49 	bl	80049dc <_free_r>
 800534a:	2300      	movs	r3, #0
 800534c:	6363      	str	r3, [r4, #52]	@ 0x34
 800534e:	e00d      	b.n	800536c <__sflush_r+0xac>
 8005350:	2301      	movs	r3, #1
 8005352:	4628      	mov	r0, r5
 8005354:	47b0      	blx	r6
 8005356:	4602      	mov	r2, r0
 8005358:	1c50      	adds	r0, r2, #1
 800535a:	d1c9      	bne.n	80052f0 <__sflush_r+0x30>
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0c6      	beq.n	80052f0 <__sflush_r+0x30>
 8005362:	2b1d      	cmp	r3, #29
 8005364:	d001      	beq.n	800536a <__sflush_r+0xaa>
 8005366:	2b16      	cmp	r3, #22
 8005368:	d11d      	bne.n	80053a6 <__sflush_r+0xe6>
 800536a:	602f      	str	r7, [r5, #0]
 800536c:	2000      	movs	r0, #0
 800536e:	e021      	b.n	80053b4 <__sflush_r+0xf4>
 8005370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005374:	b21b      	sxth	r3, r3
 8005376:	e01a      	b.n	80053ae <__sflush_r+0xee>
 8005378:	690f      	ldr	r7, [r1, #16]
 800537a:	2f00      	cmp	r7, #0
 800537c:	d0f6      	beq.n	800536c <__sflush_r+0xac>
 800537e:	0793      	lsls	r3, r2, #30
 8005380:	bf18      	it	ne
 8005382:	2300      	movne	r3, #0
 8005384:	680e      	ldr	r6, [r1, #0]
 8005386:	bf08      	it	eq
 8005388:	694b      	ldreq	r3, [r1, #20]
 800538a:	1bf6      	subs	r6, r6, r7
 800538c:	600f      	str	r7, [r1, #0]
 800538e:	608b      	str	r3, [r1, #8]
 8005390:	2e00      	cmp	r6, #0
 8005392:	ddeb      	ble.n	800536c <__sflush_r+0xac>
 8005394:	4633      	mov	r3, r6
 8005396:	463a      	mov	r2, r7
 8005398:	4628      	mov	r0, r5
 800539a:	6a21      	ldr	r1, [r4, #32]
 800539c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80053a0:	47e0      	blx	ip
 80053a2:	2800      	cmp	r0, #0
 80053a4:	dc07      	bgt.n	80053b6 <__sflush_r+0xf6>
 80053a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053ae:	f04f 30ff 	mov.w	r0, #4294967295
 80053b2:	81a3      	strh	r3, [r4, #12]
 80053b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053b6:	4407      	add	r7, r0
 80053b8:	1a36      	subs	r6, r6, r0
 80053ba:	e7e9      	b.n	8005390 <__sflush_r+0xd0>
 80053bc:	dfbffffe 	.word	0xdfbffffe

080053c0 <_fflush_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	690b      	ldr	r3, [r1, #16]
 80053c4:	4605      	mov	r5, r0
 80053c6:	460c      	mov	r4, r1
 80053c8:	b913      	cbnz	r3, 80053d0 <_fflush_r+0x10>
 80053ca:	2500      	movs	r5, #0
 80053cc:	4628      	mov	r0, r5
 80053ce:	bd38      	pop	{r3, r4, r5, pc}
 80053d0:	b118      	cbz	r0, 80053da <_fflush_r+0x1a>
 80053d2:	6a03      	ldr	r3, [r0, #32]
 80053d4:	b90b      	cbnz	r3, 80053da <_fflush_r+0x1a>
 80053d6:	f7ff f9bb 	bl	8004750 <__sinit>
 80053da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0f3      	beq.n	80053ca <_fflush_r+0xa>
 80053e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80053e4:	07d0      	lsls	r0, r2, #31
 80053e6:	d404      	bmi.n	80053f2 <_fflush_r+0x32>
 80053e8:	0599      	lsls	r1, r3, #22
 80053ea:	d402      	bmi.n	80053f2 <_fflush_r+0x32>
 80053ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053ee:	f7ff fae4 	bl	80049ba <__retarget_lock_acquire_recursive>
 80053f2:	4628      	mov	r0, r5
 80053f4:	4621      	mov	r1, r4
 80053f6:	f7ff ff63 	bl	80052c0 <__sflush_r>
 80053fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053fc:	4605      	mov	r5, r0
 80053fe:	07da      	lsls	r2, r3, #31
 8005400:	d4e4      	bmi.n	80053cc <_fflush_r+0xc>
 8005402:	89a3      	ldrh	r3, [r4, #12]
 8005404:	059b      	lsls	r3, r3, #22
 8005406:	d4e1      	bmi.n	80053cc <_fflush_r+0xc>
 8005408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800540a:	f7ff fad7 	bl	80049bc <__retarget_lock_release_recursive>
 800540e:	e7dd      	b.n	80053cc <_fflush_r+0xc>

08005410 <__swbuf_r>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	460e      	mov	r6, r1
 8005414:	4614      	mov	r4, r2
 8005416:	4605      	mov	r5, r0
 8005418:	b118      	cbz	r0, 8005422 <__swbuf_r+0x12>
 800541a:	6a03      	ldr	r3, [r0, #32]
 800541c:	b90b      	cbnz	r3, 8005422 <__swbuf_r+0x12>
 800541e:	f7ff f997 	bl	8004750 <__sinit>
 8005422:	69a3      	ldr	r3, [r4, #24]
 8005424:	60a3      	str	r3, [r4, #8]
 8005426:	89a3      	ldrh	r3, [r4, #12]
 8005428:	071a      	lsls	r2, r3, #28
 800542a:	d501      	bpl.n	8005430 <__swbuf_r+0x20>
 800542c:	6923      	ldr	r3, [r4, #16]
 800542e:	b943      	cbnz	r3, 8005442 <__swbuf_r+0x32>
 8005430:	4621      	mov	r1, r4
 8005432:	4628      	mov	r0, r5
 8005434:	f000 f82a 	bl	800548c <__swsetup_r>
 8005438:	b118      	cbz	r0, 8005442 <__swbuf_r+0x32>
 800543a:	f04f 37ff 	mov.w	r7, #4294967295
 800543e:	4638      	mov	r0, r7
 8005440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	6922      	ldr	r2, [r4, #16]
 8005446:	b2f6      	uxtb	r6, r6
 8005448:	1a98      	subs	r0, r3, r2
 800544a:	6963      	ldr	r3, [r4, #20]
 800544c:	4637      	mov	r7, r6
 800544e:	4283      	cmp	r3, r0
 8005450:	dc05      	bgt.n	800545e <__swbuf_r+0x4e>
 8005452:	4621      	mov	r1, r4
 8005454:	4628      	mov	r0, r5
 8005456:	f7ff ffb3 	bl	80053c0 <_fflush_r>
 800545a:	2800      	cmp	r0, #0
 800545c:	d1ed      	bne.n	800543a <__swbuf_r+0x2a>
 800545e:	68a3      	ldr	r3, [r4, #8]
 8005460:	3b01      	subs	r3, #1
 8005462:	60a3      	str	r3, [r4, #8]
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	6022      	str	r2, [r4, #0]
 800546a:	701e      	strb	r6, [r3, #0]
 800546c:	6962      	ldr	r2, [r4, #20]
 800546e:	1c43      	adds	r3, r0, #1
 8005470:	429a      	cmp	r2, r3
 8005472:	d004      	beq.n	800547e <__swbuf_r+0x6e>
 8005474:	89a3      	ldrh	r3, [r4, #12]
 8005476:	07db      	lsls	r3, r3, #31
 8005478:	d5e1      	bpl.n	800543e <__swbuf_r+0x2e>
 800547a:	2e0a      	cmp	r6, #10
 800547c:	d1df      	bne.n	800543e <__swbuf_r+0x2e>
 800547e:	4621      	mov	r1, r4
 8005480:	4628      	mov	r0, r5
 8005482:	f7ff ff9d 	bl	80053c0 <_fflush_r>
 8005486:	2800      	cmp	r0, #0
 8005488:	d0d9      	beq.n	800543e <__swbuf_r+0x2e>
 800548a:	e7d6      	b.n	800543a <__swbuf_r+0x2a>

0800548c <__swsetup_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	4b29      	ldr	r3, [pc, #164]	@ (8005534 <__swsetup_r+0xa8>)
 8005490:	4605      	mov	r5, r0
 8005492:	6818      	ldr	r0, [r3, #0]
 8005494:	460c      	mov	r4, r1
 8005496:	b118      	cbz	r0, 80054a0 <__swsetup_r+0x14>
 8005498:	6a03      	ldr	r3, [r0, #32]
 800549a:	b90b      	cbnz	r3, 80054a0 <__swsetup_r+0x14>
 800549c:	f7ff f958 	bl	8004750 <__sinit>
 80054a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054a4:	0719      	lsls	r1, r3, #28
 80054a6:	d422      	bmi.n	80054ee <__swsetup_r+0x62>
 80054a8:	06da      	lsls	r2, r3, #27
 80054aa:	d407      	bmi.n	80054bc <__swsetup_r+0x30>
 80054ac:	2209      	movs	r2, #9
 80054ae:	602a      	str	r2, [r5, #0]
 80054b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054b4:	f04f 30ff 	mov.w	r0, #4294967295
 80054b8:	81a3      	strh	r3, [r4, #12]
 80054ba:	e033      	b.n	8005524 <__swsetup_r+0x98>
 80054bc:	0758      	lsls	r0, r3, #29
 80054be:	d512      	bpl.n	80054e6 <__swsetup_r+0x5a>
 80054c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054c2:	b141      	cbz	r1, 80054d6 <__swsetup_r+0x4a>
 80054c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054c8:	4299      	cmp	r1, r3
 80054ca:	d002      	beq.n	80054d2 <__swsetup_r+0x46>
 80054cc:	4628      	mov	r0, r5
 80054ce:	f7ff fa85 	bl	80049dc <_free_r>
 80054d2:	2300      	movs	r3, #0
 80054d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80054dc:	81a3      	strh	r3, [r4, #12]
 80054de:	2300      	movs	r3, #0
 80054e0:	6063      	str	r3, [r4, #4]
 80054e2:	6923      	ldr	r3, [r4, #16]
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	89a3      	ldrh	r3, [r4, #12]
 80054e8:	f043 0308 	orr.w	r3, r3, #8
 80054ec:	81a3      	strh	r3, [r4, #12]
 80054ee:	6923      	ldr	r3, [r4, #16]
 80054f0:	b94b      	cbnz	r3, 8005506 <__swsetup_r+0x7a>
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80054f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054fc:	d003      	beq.n	8005506 <__swsetup_r+0x7a>
 80054fe:	4621      	mov	r1, r4
 8005500:	4628      	mov	r0, r5
 8005502:	f000 f894 	bl	800562e <__smakebuf_r>
 8005506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800550a:	f013 0201 	ands.w	r2, r3, #1
 800550e:	d00a      	beq.n	8005526 <__swsetup_r+0x9a>
 8005510:	2200      	movs	r2, #0
 8005512:	60a2      	str	r2, [r4, #8]
 8005514:	6962      	ldr	r2, [r4, #20]
 8005516:	4252      	negs	r2, r2
 8005518:	61a2      	str	r2, [r4, #24]
 800551a:	6922      	ldr	r2, [r4, #16]
 800551c:	b942      	cbnz	r2, 8005530 <__swsetup_r+0xa4>
 800551e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005522:	d1c5      	bne.n	80054b0 <__swsetup_r+0x24>
 8005524:	bd38      	pop	{r3, r4, r5, pc}
 8005526:	0799      	lsls	r1, r3, #30
 8005528:	bf58      	it	pl
 800552a:	6962      	ldrpl	r2, [r4, #20]
 800552c:	60a2      	str	r2, [r4, #8]
 800552e:	e7f4      	b.n	800551a <__swsetup_r+0x8e>
 8005530:	2000      	movs	r0, #0
 8005532:	e7f7      	b.n	8005524 <__swsetup_r+0x98>
 8005534:	20000024 	.word	0x20000024

08005538 <memmove>:
 8005538:	4288      	cmp	r0, r1
 800553a:	b510      	push	{r4, lr}
 800553c:	eb01 0402 	add.w	r4, r1, r2
 8005540:	d902      	bls.n	8005548 <memmove+0x10>
 8005542:	4284      	cmp	r4, r0
 8005544:	4623      	mov	r3, r4
 8005546:	d807      	bhi.n	8005558 <memmove+0x20>
 8005548:	1e43      	subs	r3, r0, #1
 800554a:	42a1      	cmp	r1, r4
 800554c:	d008      	beq.n	8005560 <memmove+0x28>
 800554e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005552:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005556:	e7f8      	b.n	800554a <memmove+0x12>
 8005558:	4601      	mov	r1, r0
 800555a:	4402      	add	r2, r0
 800555c:	428a      	cmp	r2, r1
 800555e:	d100      	bne.n	8005562 <memmove+0x2a>
 8005560:	bd10      	pop	{r4, pc}
 8005562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800556a:	e7f7      	b.n	800555c <memmove+0x24>

0800556c <memchr>:
 800556c:	4603      	mov	r3, r0
 800556e:	b510      	push	{r4, lr}
 8005570:	b2c9      	uxtb	r1, r1
 8005572:	4402      	add	r2, r0
 8005574:	4293      	cmp	r3, r2
 8005576:	4618      	mov	r0, r3
 8005578:	d101      	bne.n	800557e <memchr+0x12>
 800557a:	2000      	movs	r0, #0
 800557c:	e003      	b.n	8005586 <memchr+0x1a>
 800557e:	7804      	ldrb	r4, [r0, #0]
 8005580:	3301      	adds	r3, #1
 8005582:	428c      	cmp	r4, r1
 8005584:	d1f6      	bne.n	8005574 <memchr+0x8>
 8005586:	bd10      	pop	{r4, pc}

08005588 <_realloc_r>:
 8005588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800558c:	4680      	mov	r8, r0
 800558e:	4615      	mov	r5, r2
 8005590:	460c      	mov	r4, r1
 8005592:	b921      	cbnz	r1, 800559e <_realloc_r+0x16>
 8005594:	4611      	mov	r1, r2
 8005596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800559a:	f7fe bfc1 	b.w	8004520 <_malloc_r>
 800559e:	b92a      	cbnz	r2, 80055ac <_realloc_r+0x24>
 80055a0:	f7ff fa1c 	bl	80049dc <_free_r>
 80055a4:	2400      	movs	r4, #0
 80055a6:	4620      	mov	r0, r4
 80055a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ac:	f000 f89e 	bl	80056ec <_malloc_usable_size_r>
 80055b0:	4285      	cmp	r5, r0
 80055b2:	4606      	mov	r6, r0
 80055b4:	d802      	bhi.n	80055bc <_realloc_r+0x34>
 80055b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80055ba:	d8f4      	bhi.n	80055a6 <_realloc_r+0x1e>
 80055bc:	4629      	mov	r1, r5
 80055be:	4640      	mov	r0, r8
 80055c0:	f7fe ffae 	bl	8004520 <_malloc_r>
 80055c4:	4607      	mov	r7, r0
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d0ec      	beq.n	80055a4 <_realloc_r+0x1c>
 80055ca:	42b5      	cmp	r5, r6
 80055cc:	462a      	mov	r2, r5
 80055ce:	4621      	mov	r1, r4
 80055d0:	bf28      	it	cs
 80055d2:	4632      	movcs	r2, r6
 80055d4:	f7ff f9f3 	bl	80049be <memcpy>
 80055d8:	4621      	mov	r1, r4
 80055da:	4640      	mov	r0, r8
 80055dc:	f7ff f9fe 	bl	80049dc <_free_r>
 80055e0:	463c      	mov	r4, r7
 80055e2:	e7e0      	b.n	80055a6 <_realloc_r+0x1e>

080055e4 <__swhatbuf_r>:
 80055e4:	b570      	push	{r4, r5, r6, lr}
 80055e6:	460c      	mov	r4, r1
 80055e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ec:	4615      	mov	r5, r2
 80055ee:	2900      	cmp	r1, #0
 80055f0:	461e      	mov	r6, r3
 80055f2:	b096      	sub	sp, #88	@ 0x58
 80055f4:	da0c      	bge.n	8005610 <__swhatbuf_r+0x2c>
 80055f6:	89a3      	ldrh	r3, [r4, #12]
 80055f8:	2100      	movs	r1, #0
 80055fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055fe:	bf14      	ite	ne
 8005600:	2340      	movne	r3, #64	@ 0x40
 8005602:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005606:	2000      	movs	r0, #0
 8005608:	6031      	str	r1, [r6, #0]
 800560a:	602b      	str	r3, [r5, #0]
 800560c:	b016      	add	sp, #88	@ 0x58
 800560e:	bd70      	pop	{r4, r5, r6, pc}
 8005610:	466a      	mov	r2, sp
 8005612:	f000 f849 	bl	80056a8 <_fstat_r>
 8005616:	2800      	cmp	r0, #0
 8005618:	dbed      	blt.n	80055f6 <__swhatbuf_r+0x12>
 800561a:	9901      	ldr	r1, [sp, #4]
 800561c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005620:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005624:	4259      	negs	r1, r3
 8005626:	4159      	adcs	r1, r3
 8005628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800562c:	e7eb      	b.n	8005606 <__swhatbuf_r+0x22>

0800562e <__smakebuf_r>:
 800562e:	898b      	ldrh	r3, [r1, #12]
 8005630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005632:	079d      	lsls	r5, r3, #30
 8005634:	4606      	mov	r6, r0
 8005636:	460c      	mov	r4, r1
 8005638:	d507      	bpl.n	800564a <__smakebuf_r+0x1c>
 800563a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800563e:	6023      	str	r3, [r4, #0]
 8005640:	6123      	str	r3, [r4, #16]
 8005642:	2301      	movs	r3, #1
 8005644:	6163      	str	r3, [r4, #20]
 8005646:	b003      	add	sp, #12
 8005648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800564a:	466a      	mov	r2, sp
 800564c:	ab01      	add	r3, sp, #4
 800564e:	f7ff ffc9 	bl	80055e4 <__swhatbuf_r>
 8005652:	9f00      	ldr	r7, [sp, #0]
 8005654:	4605      	mov	r5, r0
 8005656:	4639      	mov	r1, r7
 8005658:	4630      	mov	r0, r6
 800565a:	f7fe ff61 	bl	8004520 <_malloc_r>
 800565e:	b948      	cbnz	r0, 8005674 <__smakebuf_r+0x46>
 8005660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005664:	059a      	lsls	r2, r3, #22
 8005666:	d4ee      	bmi.n	8005646 <__smakebuf_r+0x18>
 8005668:	f023 0303 	bic.w	r3, r3, #3
 800566c:	f043 0302 	orr.w	r3, r3, #2
 8005670:	81a3      	strh	r3, [r4, #12]
 8005672:	e7e2      	b.n	800563a <__smakebuf_r+0xc>
 8005674:	89a3      	ldrh	r3, [r4, #12]
 8005676:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800567a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800567e:	81a3      	strh	r3, [r4, #12]
 8005680:	9b01      	ldr	r3, [sp, #4]
 8005682:	6020      	str	r0, [r4, #0]
 8005684:	b15b      	cbz	r3, 800569e <__smakebuf_r+0x70>
 8005686:	4630      	mov	r0, r6
 8005688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800568c:	f000 f81e 	bl	80056cc <_isatty_r>
 8005690:	b128      	cbz	r0, 800569e <__smakebuf_r+0x70>
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	f023 0303 	bic.w	r3, r3, #3
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	81a3      	strh	r3, [r4, #12]
 800569e:	89a3      	ldrh	r3, [r4, #12]
 80056a0:	431d      	orrs	r5, r3
 80056a2:	81a5      	strh	r5, [r4, #12]
 80056a4:	e7cf      	b.n	8005646 <__smakebuf_r+0x18>
	...

080056a8 <_fstat_r>:
 80056a8:	b538      	push	{r3, r4, r5, lr}
 80056aa:	2300      	movs	r3, #0
 80056ac:	4d06      	ldr	r5, [pc, #24]	@ (80056c8 <_fstat_r+0x20>)
 80056ae:	4604      	mov	r4, r0
 80056b0:	4608      	mov	r0, r1
 80056b2:	4611      	mov	r1, r2
 80056b4:	602b      	str	r3, [r5, #0]
 80056b6:	f7fc fbe5 	bl	8001e84 <_fstat>
 80056ba:	1c43      	adds	r3, r0, #1
 80056bc:	d102      	bne.n	80056c4 <_fstat_r+0x1c>
 80056be:	682b      	ldr	r3, [r5, #0]
 80056c0:	b103      	cbz	r3, 80056c4 <_fstat_r+0x1c>
 80056c2:	6023      	str	r3, [r4, #0]
 80056c4:	bd38      	pop	{r3, r4, r5, pc}
 80056c6:	bf00      	nop
 80056c8:	200007ac 	.word	0x200007ac

080056cc <_isatty_r>:
 80056cc:	b538      	push	{r3, r4, r5, lr}
 80056ce:	2300      	movs	r3, #0
 80056d0:	4d05      	ldr	r5, [pc, #20]	@ (80056e8 <_isatty_r+0x1c>)
 80056d2:	4604      	mov	r4, r0
 80056d4:	4608      	mov	r0, r1
 80056d6:	602b      	str	r3, [r5, #0]
 80056d8:	f7fc fbe3 	bl	8001ea2 <_isatty>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	d102      	bne.n	80056e6 <_isatty_r+0x1a>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	b103      	cbz	r3, 80056e6 <_isatty_r+0x1a>
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	200007ac 	.word	0x200007ac

080056ec <_malloc_usable_size_r>:
 80056ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056f0:	1f18      	subs	r0, r3, #4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bfbc      	itt	lt
 80056f6:	580b      	ldrlt	r3, [r1, r0]
 80056f8:	18c0      	addlt	r0, r0, r3
 80056fa:	4770      	bx	lr

080056fc <_init>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	bf00      	nop
 8005700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005702:	bc08      	pop	{r3}
 8005704:	469e      	mov	lr, r3
 8005706:	4770      	bx	lr

08005708 <_fini>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	bf00      	nop
 800570c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570e:	bc08      	pop	{r3}
 8005710:	469e      	mov	lr, r3
 8005712:	4770      	bx	lr
