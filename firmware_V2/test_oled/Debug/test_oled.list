
test_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005764  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005874  08005874  00006874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058e4  080058e4  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  080058e4  080058e4  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058e4  080058e4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e4  080058e4  000068e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058e8  080058e8  000068e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080058ec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008dc  20000068  08005954  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  08005954  00007944  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7b5  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc7  00000000  00000000  00013846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00015810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091f  00000000  00000000  000163d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018881  00000000  00000000  00016cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e579  00000000  00000000  0002f570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087546  00000000  00000000  0003dae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c502f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd8  00000000  00000000  000c5074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000c8c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	0800585c 	.word	0x0800585c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	0800585c 	.word	0x0800585c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_frsub>:
 8000a3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a40:	e002      	b.n	8000a48 <__addsf3>
 8000a42:	bf00      	nop

08000a44 <__aeabi_fsub>:
 8000a44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a48 <__addsf3>:
 8000a48:	0042      	lsls	r2, r0, #1
 8000a4a:	bf1f      	itttt	ne
 8000a4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a50:	ea92 0f03 	teqne	r2, r3
 8000a54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a5c:	d06a      	beq.n	8000b34 <__addsf3+0xec>
 8000a5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a66:	bfc1      	itttt	gt
 8000a68:	18d2      	addgt	r2, r2, r3
 8000a6a:	4041      	eorgt	r1, r0
 8000a6c:	4048      	eorgt	r0, r1
 8000a6e:	4041      	eorgt	r1, r0
 8000a70:	bfb8      	it	lt
 8000a72:	425b      	neglt	r3, r3
 8000a74:	2b19      	cmp	r3, #25
 8000a76:	bf88      	it	hi
 8000a78:	4770      	bxhi	lr
 8000a7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a96:	bf18      	it	ne
 8000a98:	4249      	negne	r1, r1
 8000a9a:	ea92 0f03 	teq	r2, r3
 8000a9e:	d03f      	beq.n	8000b20 <__addsf3+0xd8>
 8000aa0:	f1a2 0201 	sub.w	r2, r2, #1
 8000aa4:	fa41 fc03 	asr.w	ip, r1, r3
 8000aa8:	eb10 000c 	adds.w	r0, r0, ip
 8000aac:	f1c3 0320 	rsb	r3, r3, #32
 8000ab0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ab4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ab8:	d502      	bpl.n	8000ac0 <__addsf3+0x78>
 8000aba:	4249      	negs	r1, r1
 8000abc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ac0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ac4:	d313      	bcc.n	8000aee <__addsf3+0xa6>
 8000ac6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000aca:	d306      	bcc.n	8000ada <__addsf3+0x92>
 8000acc:	0840      	lsrs	r0, r0, #1
 8000ace:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ad2:	f102 0201 	add.w	r2, r2, #1
 8000ad6:	2afe      	cmp	r2, #254	@ 0xfe
 8000ad8:	d251      	bcs.n	8000b7e <__addsf3+0x136>
 8000ada:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000ade:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ae2:	bf08      	it	eq
 8000ae4:	f020 0001 	biceq.w	r0, r0, #1
 8000ae8:	ea40 0003 	orr.w	r0, r0, r3
 8000aec:	4770      	bx	lr
 8000aee:	0049      	lsls	r1, r1, #1
 8000af0:	eb40 0000 	adc.w	r0, r0, r0
 8000af4:	3a01      	subs	r2, #1
 8000af6:	bf28      	it	cs
 8000af8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000afc:	d2ed      	bcs.n	8000ada <__addsf3+0x92>
 8000afe:	fab0 fc80 	clz	ip, r0
 8000b02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b06:	ebb2 020c 	subs.w	r2, r2, ip
 8000b0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b0e:	bfaa      	itet	ge
 8000b10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b14:	4252      	neglt	r2, r2
 8000b16:	4318      	orrge	r0, r3
 8000b18:	bfbc      	itt	lt
 8000b1a:	40d0      	lsrlt	r0, r2
 8000b1c:	4318      	orrlt	r0, r3
 8000b1e:	4770      	bx	lr
 8000b20:	f092 0f00 	teq	r2, #0
 8000b24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b28:	bf06      	itte	eq
 8000b2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b2e:	3201      	addeq	r2, #1
 8000b30:	3b01      	subne	r3, #1
 8000b32:	e7b5      	b.n	8000aa0 <__addsf3+0x58>
 8000b34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b3c:	bf18      	it	ne
 8000b3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b42:	d021      	beq.n	8000b88 <__addsf3+0x140>
 8000b44:	ea92 0f03 	teq	r2, r3
 8000b48:	d004      	beq.n	8000b54 <__addsf3+0x10c>
 8000b4a:	f092 0f00 	teq	r2, #0
 8000b4e:	bf08      	it	eq
 8000b50:	4608      	moveq	r0, r1
 8000b52:	4770      	bx	lr
 8000b54:	ea90 0f01 	teq	r0, r1
 8000b58:	bf1c      	itt	ne
 8000b5a:	2000      	movne	r0, #0
 8000b5c:	4770      	bxne	lr
 8000b5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b62:	d104      	bne.n	8000b6e <__addsf3+0x126>
 8000b64:	0040      	lsls	r0, r0, #1
 8000b66:	bf28      	it	cs
 8000b68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	4770      	bx	lr
 8000b6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b72:	bf3c      	itt	cc
 8000b74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bxcc	lr
 8000b7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b86:	4770      	bx	lr
 8000b88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b8c:	bf16      	itet	ne
 8000b8e:	4608      	movne	r0, r1
 8000b90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b94:	4601      	movne	r1, r0
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	bf06      	itte	eq
 8000b9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b9e:	ea90 0f01 	teqeq	r0, r1
 8000ba2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_ui2f>:
 8000ba8:	f04f 0300 	mov.w	r3, #0
 8000bac:	e004      	b.n	8000bb8 <__aeabi_i2f+0x8>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_i2f>:
 8000bb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000bb4:	bf48      	it	mi
 8000bb6:	4240      	negmi	r0, r0
 8000bb8:	ea5f 0c00 	movs.w	ip, r0
 8000bbc:	bf08      	it	eq
 8000bbe:	4770      	bxeq	lr
 8000bc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000bc4:	4601      	mov	r1, r0
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	e01c      	b.n	8000c06 <__aeabi_l2f+0x2a>

08000bcc <__aeabi_ul2f>:
 8000bcc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd0:	bf08      	it	eq
 8000bd2:	4770      	bxeq	lr
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	e00a      	b.n	8000bf0 <__aeabi_l2f+0x14>
 8000bda:	bf00      	nop

08000bdc <__aeabi_l2f>:
 8000bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000be0:	bf08      	it	eq
 8000be2:	4770      	bxeq	lr
 8000be4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000be8:	d502      	bpl.n	8000bf0 <__aeabi_l2f+0x14>
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	ea5f 0c01 	movs.w	ip, r1
 8000bf4:	bf02      	ittt	eq
 8000bf6:	4684      	moveq	ip, r0
 8000bf8:	4601      	moveq	r1, r0
 8000bfa:	2000      	moveq	r0, #0
 8000bfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c00:	bf08      	it	eq
 8000c02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c0a:	fabc f28c 	clz	r2, ip
 8000c0e:	3a08      	subs	r2, #8
 8000c10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c14:	db10      	blt.n	8000c38 <__aeabi_l2f+0x5c>
 8000c16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c1a:	4463      	add	r3, ip
 8000c1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c20:	f1c2 0220 	rsb	r2, r2, #32
 8000c24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c28:	fa20 f202 	lsr.w	r2, r0, r2
 8000c2c:	eb43 0002 	adc.w	r0, r3, r2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f102 0220 	add.w	r2, r2, #32
 8000c3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c40:	f1c2 0220 	rsb	r2, r2, #32
 8000c44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c48:	fa21 f202 	lsr.w	r2, r1, r2
 8000c4c:	eb43 0002 	adc.w	r0, r3, r2
 8000c50:	bf08      	it	eq
 8000c52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_fmul>:
 8000c58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c60:	bf1e      	ittt	ne
 8000c62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c66:	ea92 0f0c 	teqne	r2, ip
 8000c6a:	ea93 0f0c 	teqne	r3, ip
 8000c6e:	d06f      	beq.n	8000d50 <__aeabi_fmul+0xf8>
 8000c70:	441a      	add	r2, r3
 8000c72:	ea80 0c01 	eor.w	ip, r0, r1
 8000c76:	0240      	lsls	r0, r0, #9
 8000c78:	bf18      	it	ne
 8000c7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c7e:	d01e      	beq.n	8000cbe <__aeabi_fmul+0x66>
 8000c80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c98:	bf3e      	ittt	cc
 8000c9a:	0049      	lslcc	r1, r1, #1
 8000c9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ca0:	005b      	lslcc	r3, r3, #1
 8000ca2:	ea40 0001 	orr.w	r0, r0, r1
 8000ca6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000caa:	2afd      	cmp	r2, #253	@ 0xfd
 8000cac:	d81d      	bhi.n	8000cea <__aeabi_fmul+0x92>
 8000cae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cb6:	bf08      	it	eq
 8000cb8:	f020 0001 	biceq.w	r0, r0, #1
 8000cbc:	4770      	bx	lr
 8000cbe:	f090 0f00 	teq	r0, #0
 8000cc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000cc6:	bf08      	it	eq
 8000cc8:	0249      	lsleq	r1, r1, #9
 8000cca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000cd4:	bfc2      	ittt	gt
 8000cd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000cda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cde:	4770      	bxgt	lr
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	dc5d      	bgt.n	8000da8 <__aeabi_fmul+0x150>
 8000cec:	f112 0f19 	cmn.w	r2, #25
 8000cf0:	bfdc      	itt	le
 8000cf2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000cf6:	4770      	bxle	lr
 8000cf8:	f1c2 0200 	rsb	r2, r2, #0
 8000cfc:	0041      	lsls	r1, r0, #1
 8000cfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000d02:	f1c2 0220 	rsb	r2, r2, #32
 8000d06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d0e:	f140 0000 	adc.w	r0, r0, #0
 8000d12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d16:	bf08      	it	eq
 8000d18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d1c:	4770      	bx	lr
 8000d1e:	f092 0f00 	teq	r2, #0
 8000d22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d26:	bf02      	ittt	eq
 8000d28:	0040      	lsleq	r0, r0, #1
 8000d2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d2e:	3a01      	subeq	r2, #1
 8000d30:	d0f9      	beq.n	8000d26 <__aeabi_fmul+0xce>
 8000d32:	ea40 000c 	orr.w	r0, r0, ip
 8000d36:	f093 0f00 	teq	r3, #0
 8000d3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d3e:	bf02      	ittt	eq
 8000d40:	0049      	lsleq	r1, r1, #1
 8000d42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d46:	3b01      	subeq	r3, #1
 8000d48:	d0f9      	beq.n	8000d3e <__aeabi_fmul+0xe6>
 8000d4a:	ea41 010c 	orr.w	r1, r1, ip
 8000d4e:	e78f      	b.n	8000c70 <__aeabi_fmul+0x18>
 8000d50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d54:	ea92 0f0c 	teq	r2, ip
 8000d58:	bf18      	it	ne
 8000d5a:	ea93 0f0c 	teqne	r3, ip
 8000d5e:	d00a      	beq.n	8000d76 <__aeabi_fmul+0x11e>
 8000d60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d64:	bf18      	it	ne
 8000d66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d6a:	d1d8      	bne.n	8000d1e <__aeabi_fmul+0xc6>
 8000d6c:	ea80 0001 	eor.w	r0, r0, r1
 8000d70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d74:	4770      	bx	lr
 8000d76:	f090 0f00 	teq	r0, #0
 8000d7a:	bf17      	itett	ne
 8000d7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d80:	4608      	moveq	r0, r1
 8000d82:	f091 0f00 	teqne	r1, #0
 8000d86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d8a:	d014      	beq.n	8000db6 <__aeabi_fmul+0x15e>
 8000d8c:	ea92 0f0c 	teq	r2, ip
 8000d90:	d101      	bne.n	8000d96 <__aeabi_fmul+0x13e>
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	d10f      	bne.n	8000db6 <__aeabi_fmul+0x15e>
 8000d96:	ea93 0f0c 	teq	r3, ip
 8000d9a:	d103      	bne.n	8000da4 <__aeabi_fmul+0x14c>
 8000d9c:	024b      	lsls	r3, r1, #9
 8000d9e:	bf18      	it	ne
 8000da0:	4608      	movne	r0, r1
 8000da2:	d108      	bne.n	8000db6 <__aeabi_fmul+0x15e>
 8000da4:	ea80 0001 	eor.w	r0, r0, r1
 8000da8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000db0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000db4:	4770      	bx	lr
 8000db6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_fdiv>:
 8000dc0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc8:	bf1e      	ittt	ne
 8000dca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dce:	ea92 0f0c 	teqne	r2, ip
 8000dd2:	ea93 0f0c 	teqne	r3, ip
 8000dd6:	d069      	beq.n	8000eac <__aeabi_fdiv+0xec>
 8000dd8:	eba2 0203 	sub.w	r2, r2, r3
 8000ddc:	ea80 0c01 	eor.w	ip, r0, r1
 8000de0:	0249      	lsls	r1, r1, #9
 8000de2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000de6:	d037      	beq.n	8000e58 <__aeabi_fdiv+0x98>
 8000de8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000dec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000df0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	bf38      	it	cc
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e06:	428b      	cmp	r3, r1
 8000e08:	bf24      	itt	cs
 8000e0a:	1a5b      	subcs	r3, r3, r1
 8000e0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e14:	bf24      	itt	cs
 8000e16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e22:	bf24      	itt	cs
 8000e24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e30:	bf24      	itt	cs
 8000e32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	bf18      	it	ne
 8000e3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e42:	d1e0      	bne.n	8000e06 <__aeabi_fdiv+0x46>
 8000e44:	2afd      	cmp	r2, #253	@ 0xfd
 8000e46:	f63f af50 	bhi.w	8000cea <__aeabi_fmul+0x92>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e50:	bf08      	it	eq
 8000e52:	f020 0001 	biceq.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e60:	327f      	adds	r2, #127	@ 0x7f
 8000e62:	bfc2      	ittt	gt
 8000e64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e6c:	4770      	bxgt	lr
 8000e6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e72:	f04f 0300 	mov.w	r3, #0
 8000e76:	3a01      	subs	r2, #1
 8000e78:	e737      	b.n	8000cea <__aeabi_fmul+0x92>
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fdiv+0xc2>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fdiv+0xda>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e795      	b.n	8000dd8 <__aeabi_fdiv+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d108      	bne.n	8000ec8 <__aeabi_fdiv+0x108>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	f47f af7d 	bne.w	8000db6 <__aeabi_fmul+0x15e>
 8000ebc:	ea93 0f0c 	teq	r3, ip
 8000ec0:	f47f af70 	bne.w	8000da4 <__aeabi_fmul+0x14c>
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	e776      	b.n	8000db6 <__aeabi_fmul+0x15e>
 8000ec8:	ea93 0f0c 	teq	r3, ip
 8000ecc:	d104      	bne.n	8000ed8 <__aeabi_fdiv+0x118>
 8000ece:	024b      	lsls	r3, r1, #9
 8000ed0:	f43f af4c 	beq.w	8000d6c <__aeabi_fmul+0x114>
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e76e      	b.n	8000db6 <__aeabi_fmul+0x15e>
 8000ed8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000edc:	bf18      	it	ne
 8000ede:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ee2:	d1ca      	bne.n	8000e7a <__aeabi_fdiv+0xba>
 8000ee4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ee8:	f47f af5c 	bne.w	8000da4 <__aeabi_fmul+0x14c>
 8000eec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ef0:	f47f af3c 	bne.w	8000d6c <__aeabi_fmul+0x114>
 8000ef4:	e75f      	b.n	8000db6 <__aeabi_fmul+0x15e>
 8000ef6:	bf00      	nop

08000ef8 <__gesf2>:
 8000ef8:	f04f 3cff 	mov.w	ip, #4294967295
 8000efc:	e006      	b.n	8000f0c <__cmpsf2+0x4>
 8000efe:	bf00      	nop

08000f00 <__lesf2>:
 8000f00:	f04f 0c01 	mov.w	ip, #1
 8000f04:	e002      	b.n	8000f0c <__cmpsf2+0x4>
 8000f06:	bf00      	nop

08000f08 <__cmpsf2>:
 8000f08:	f04f 0c01 	mov.w	ip, #1
 8000f0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f1c:	bf18      	it	ne
 8000f1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f22:	d011      	beq.n	8000f48 <__cmpsf2+0x40>
 8000f24:	b001      	add	sp, #4
 8000f26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f2a:	bf18      	it	ne
 8000f2c:	ea90 0f01 	teqne	r0, r1
 8000f30:	bf58      	it	pl
 8000f32:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f36:	bf88      	it	hi
 8000f38:	17c8      	asrhi	r0, r1, #31
 8000f3a:	bf38      	it	cc
 8000f3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f40:	bf18      	it	ne
 8000f42:	f040 0001 	orrne.w	r0, r0, #1
 8000f46:	4770      	bx	lr
 8000f48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f4c:	d102      	bne.n	8000f54 <__cmpsf2+0x4c>
 8000f4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f52:	d105      	bne.n	8000f60 <__cmpsf2+0x58>
 8000f54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f58:	d1e4      	bne.n	8000f24 <__cmpsf2+0x1c>
 8000f5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f5e:	d0e1      	beq.n	8000f24 <__cmpsf2+0x1c>
 8000f60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <__aeabi_cfrcmple>:
 8000f68:	4684      	mov	ip, r0
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	4661      	mov	r1, ip
 8000f6e:	e7ff      	b.n	8000f70 <__aeabi_cfcmpeq>

08000f70 <__aeabi_cfcmpeq>:
 8000f70:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f72:	f7ff ffc9 	bl	8000f08 <__cmpsf2>
 8000f76:	2800      	cmp	r0, #0
 8000f78:	bf48      	it	mi
 8000f7a:	f110 0f00 	cmnmi.w	r0, #0
 8000f7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f80 <__aeabi_fcmpeq>:
 8000f80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f84:	f7ff fff4 	bl	8000f70 <__aeabi_cfcmpeq>
 8000f88:	bf0c      	ite	eq
 8000f8a:	2001      	moveq	r0, #1
 8000f8c:	2000      	movne	r0, #0
 8000f8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f92:	bf00      	nop

08000f94 <__aeabi_fcmplt>:
 8000f94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f98:	f7ff ffea 	bl	8000f70 <__aeabi_cfcmpeq>
 8000f9c:	bf34      	ite	cc
 8000f9e:	2001      	movcc	r0, #1
 8000fa0:	2000      	movcs	r0, #0
 8000fa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_fcmple>:
 8000fa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fac:	f7ff ffe0 	bl	8000f70 <__aeabi_cfcmpeq>
 8000fb0:	bf94      	ite	ls
 8000fb2:	2001      	movls	r0, #1
 8000fb4:	2000      	movhi	r0, #0
 8000fb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fba:	bf00      	nop

08000fbc <__aeabi_fcmpge>:
 8000fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc0:	f7ff ffd2 	bl	8000f68 <__aeabi_cfrcmple>
 8000fc4:	bf94      	ite	ls
 8000fc6:	2001      	movls	r0, #1
 8000fc8:	2000      	movhi	r0, #0
 8000fca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fce:	bf00      	nop

08000fd0 <__aeabi_fcmpgt>:
 8000fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd4:	f7ff ffc8 	bl	8000f68 <__aeabi_cfrcmple>
 8000fd8:	bf34      	ite	cc
 8000fda:	2001      	movcc	r0, #1
 8000fdc:	2000      	movcs	r0, #0
 8000fde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3304      	adds	r3, #4
 8001040:	2280      	movs	r2, #128	@ 0x80
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f003 fe86 	bl	8004d56 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3384      	adds	r3, #132	@ 0x84
 800104e:	2280      	movs	r2, #128	@ 0x80
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f003 fe7f 	bl	8004d56 <memset>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af02      	add	r7, sp, #8
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	461a      	mov	r2, r3
 800106c:	460b      	mov	r3, r1
 800106e:	72fb      	strb	r3, [r7, #11]
 8001070:	4613      	mov	r3, r2
 8001072:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001074:	893b      	ldrh	r3, [r7, #8]
 8001076:	3301      	adds	r3, #1
 8001078:	4618      	mov	r0, r3
 800107a:	f003 fc97 	bl	80049ac <malloc>
 800107e:	4603      	mov	r3, r0
 8001080:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	7afa      	ldrb	r2, [r7, #11]
 8001086:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d009      	beq.n	80010a2 <max30102_write+0x42>
 800108e:	893b      	ldrh	r3, [r7, #8]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d006      	beq.n	80010a2 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3301      	adds	r3, #1
 8001098:	893a      	ldrh	r2, [r7, #8]
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	f003 fee6 	bl	8004e6e <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	893b      	ldrh	r3, [r7, #8]
 80010a8:	3301      	adds	r3, #1
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010b0:	9200      	str	r2, [sp, #0]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	21ae      	movs	r1, #174	@ 0xae
 80010b6:	f001 fe7b 	bl	8002db0 <HAL_I2C_Master_Transmit>
    free(payload);
 80010ba:	6978      	ldr	r0, [r7, #20]
 80010bc:	f003 fc7e 	bl	80049bc <free>
}
 80010c0:	bf00      	nop
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	461a      	mov	r2, r3
 80010d4:	460b      	mov	r3, r1
 80010d6:	72fb      	strb	r3, [r7, #11]
 80010d8:	4613      	mov	r3, r2
 80010da:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 80010dc:	7afb      	ldrb	r3, [r7, #11]
 80010de:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	f107 0217 	add.w	r2, r7, #23
 80010e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	21ae      	movs	r1, #174	@ 0xae
 80010f2:	f001 fe5d 	bl	8002db0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	893b      	ldrh	r3, [r7, #8]
 80010fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001100:	9200      	str	r2, [sp, #0]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	21ae      	movs	r1, #174	@ 0xae
 8001106:	f001 ff51 	bl	8002fac <HAL_I2C_Master_Receive>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 800111a:	2340      	movs	r3, #64	@ 0x40
 800111c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 800111e:	f107 020f 	add.w	r2, r7, #15
 8001122:	2301      	movs	r3, #1
 8001124:	2109      	movs	r1, #9
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ff9a 	bl	8001060 <max30102_write>
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8001144:	f107 020f 	add.w	r2, r7, #15
 8001148:	2301      	movs	r3, #1
 800114a:	2102      	movs	r1, #2
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ffbb 	bl	80010c8 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001158:	b2db      	uxtb	r3, r3
 800115a:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	01db      	lsls	r3, r3, #7
 8001160:	b25a      	sxtb	r2, r3
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	b25b      	sxtb	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b25b      	sxtb	r3, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800116e:	f107 020f 	add.w	r2, r7, #15
 8001172:	2301      	movs	r3, #1
 8001174:	2102      	movs	r1, #2
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff72 	bl	8001060 <max30102_write>
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	b2db      	uxtb	r3, r3
 800119c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 800119e:	f107 020f 	add.w	r2, r7, #15
 80011a2:	2301      	movs	r3, #1
 80011a4:	2103      	movs	r1, #3
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff5a 	bl	8001060 <max30102_write>
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 80011ce:	f107 020f 	add.w	r2, r7, #15
 80011d2:	2301      	movs	r3, #1
 80011d4:	2121      	movs	r1, #33	@ 0x21
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ff42 	bl	8001060 <max30102_write>
}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr

080011fe <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 8001206:	2300      	movs	r3, #0
 8001208:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 800120a:	f107 020c 	add.w	r2, r7, #12
 800120e:	2302      	movs	r3, #2
 8001210:	2100      	movs	r1, #0
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ff58 	bl	80010c8 <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 8001218:	7b3b      	ldrb	r3, [r7, #12]
 800121a:	09db      	lsrs	r3, r3, #7
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f952 	bl	80014d0 <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 800122c:	7b7b      	ldrb	r3, [r7, #13]
 800122e:	085b      	lsrs	r3, r3, #1
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d007      	beq.n	800124a <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 800123a:	f107 020a 	add.w	r2, r7, #10
 800123e:	f107 030b 	add.w	r3, r7, #11
 8001242:	4619      	mov	r1, r3
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 fafb 	bl	8001840 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	460b      	mov	r3, r1
 8001264:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8001266:	f107 020f 	add.w	r2, r7, #15
 800126a:	2301      	movs	r3, #1
 800126c:	2109      	movs	r1, #9
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff2a 	bl	80010c8 <max30102_read>
    config = (config & 0xf8) | mode;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	b25b      	sxtb	r3, r3
 8001278:	f023 0307 	bic.w	r3, r3, #7
 800127c:	b25a      	sxtb	r2, r3
 800127e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001282:	4313      	orrs	r3, r2
 8001284:	b25b      	sxtb	r3, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 800128a:	f107 020f 	add.w	r2, r7, #15
 800128e:	2301      	movs	r3, #1
 8001290:	2109      	movs	r1, #9
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fee4 	bl	8001060 <max30102_write>
    max30102_clear_fifo(obj);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f8f7 	bl	800148c <max30102_clear_fifo>
}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	460b      	mov	r3, r1
 80012b0:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80012b2:	f107 020f 	add.w	r2, r7, #15
 80012b6:	2301      	movs	r3, #1
 80012b8:	210a      	movs	r1, #10
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ff04 	bl	80010c8 <max30102_read>
    config = (config & 0x63) << MAX30102_SPO2_SR;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80012ce:	f107 020f 	add.w	r2, r7, #15
 80012d2:	2301      	movs	r3, #1
 80012d4:	210a      	movs	r1, #10
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fec2 	bl	8001060 <max30102_write>
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80012f0:	f107 020f 	add.w	r2, r7, #15
 80012f4:	2301      	movs	r3, #1
 80012f6:	210a      	movs	r1, #10
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff fee5 	bl	80010c8 <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	b25b      	sxtb	r3, r3
 8001302:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8001306:	b25a      	sxtb	r2, r3
 8001308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800130c:	4313      	orrs	r3, r2
 800130e:	b25b      	sxtb	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001314:	f107 020f 	add.w	r2, r7, #15
 8001318:	2301      	movs	r3, #1
 800131a:	210a      	movs	r1, #10
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff fe9f 	bl	8001060 <max30102_write>
}
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b084      	sub	sp, #16
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	460b      	mov	r3, r1
 8001334:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001336:	f107 020f 	add.w	r2, r7, #15
 800133a:	2301      	movs	r3, #1
 800133c:	210a      	movs	r1, #10
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fec2 	bl	80010c8 <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	b25b      	sxtb	r3, r3
 8001348:	f003 031f 	and.w	r3, r3, #31
 800134c:	b25a      	sxtb	r2, r3
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	015b      	lsls	r3, r3, #5
 8001352:	b25b      	sxtb	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b25b      	sxtb	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800135c:	f107 020f 	add.w	r2, r7, #15
 8001360:	2301      	movs	r3, #1
 8001362:	210a      	movs	r1, #10
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fe7b 	bl	8001060 <max30102_write>
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	0000      	movs	r0, r0
 8001374:	0000      	movs	r0, r0
	...

08001378 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8001382:	6838      	ldr	r0, [r7, #0]
 8001384:	f7ff f848 	bl	8000418 <__aeabi_f2d>
 8001388:	a30d      	add	r3, pc, #52	@ (adr r3, 80013c0 <max30102_set_led_current_1+0x48>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7ff f9c5 	bl	800071c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f7ff fb2f 	bl	80009fc <__aeabi_d2uiz>
 800139e:	4603      	mov	r3, r0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 80013a4:	f107 020f 	add.w	r2, r7, #15
 80013a8:	2301      	movs	r3, #1
 80013aa:	210c      	movs	r1, #12
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff fe57 	bl	8001060 <max30102_write>
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	9999999a 	.word	0x9999999a
 80013c4:	3fc99999 	.word	0x3fc99999

080013c8 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 80013d2:	6838      	ldr	r0, [r7, #0]
 80013d4:	f7ff f820 	bl	8000418 <__aeabi_f2d>
 80013d8:	a30d      	add	r3, pc, #52	@ (adr r3, 8001410 <max30102_set_led_current_2+0x48>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7ff f99d 	bl	800071c <__aeabi_ddiv>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f7ff fb07 	bl	80009fc <__aeabi_d2uiz>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 80013f4:	f107 020f 	add.w	r2, r7, #15
 80013f8:	2301      	movs	r3, #1
 80013fa:	210d      	movs	r1, #13
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff fe2f 	bl	8001060 <max30102_write>
}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	f3af 8000 	nop.w
 8001410:	9999999a 	.word	0x9999999a
 8001414:	3fc99999 	.word	0x3fc99999

08001418 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	4608      	mov	r0, r1
 8001422:	4611      	mov	r1, r2
 8001424:	461a      	mov	r2, r3
 8001426:	4603      	mov	r3, r0
 8001428:	70fb      	strb	r3, [r7, #3]
 800142a:	460b      	mov	r3, r1
 800142c:	70bb      	strb	r3, [r7, #2]
 800142e:	4613      	mov	r3, r2
 8001430:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 8001436:	78fb      	ldrb	r3, [r7, #3]
 8001438:	015b      	lsls	r3, r3, #5
 800143a:	b25a      	sxtb	r2, r3
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	b25b      	sxtb	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b25b      	sxtb	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8001448:	78bb      	ldrb	r3, [r7, #2]
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	b25b      	sxtb	r3, r3
 800144e:	f003 0310 	and.w	r3, r3, #16
 8001452:	b25a      	sxtb	r2, r3
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	b25b      	sxtb	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	b25b      	sxtb	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8001460:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	b25a      	sxtb	r2, r3
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	b25b      	sxtb	r3, r3
 800146e:	4313      	orrs	r3, r2
 8001470:	b25b      	sxtb	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 8001476:	f107 020f 	add.w	r2, r7, #15
 800147a:	2301      	movs	r3, #1
 800147c:	2108      	movs	r1, #8
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fdee 	bl	8001060 <max30102_write>
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8001494:	2300      	movs	r3, #0
 8001496:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8001498:	f107 020f 	add.w	r2, r7, #15
 800149c:	2303      	movs	r3, #3
 800149e:	2104      	movs	r1, #4
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff fddd 	bl	8001060 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 80014a6:	f107 020f 	add.w	r2, r7, #15
 80014aa:	2303      	movs	r3, #3
 80014ac:	2106      	movs	r1, #6
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fdd6 	bl	8001060 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 80014b4:	f107 020f 	add.w	r2, r7, #15
 80014b8:	2303      	movs	r3, #3
 80014ba:	2105      	movs	r1, #5
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff fdcf 	bl	8001060 <max30102_write>
}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	0000      	movs	r0, r0
 80014cc:	0000      	movs	r0, r0
	...

080014d0 <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	b08a      	sub	sp, #40	@ 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	76fb      	strb	r3, [r7, #27]
 80014dc:	2300      	movs	r3, #0
 80014de:	76bb      	strb	r3, [r7, #26]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 80014e0:	f107 021b 	add.w	r2, r7, #27
 80014e4:	2301      	movs	r3, #1
 80014e6:	2104      	movs	r1, #4
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fded 	bl	80010c8 <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 80014ee:	f107 021a 	add.w	r2, r7, #26
 80014f2:	2301      	movs	r3, #1
 80014f4:	2106      	movs	r1, #6
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fde6 	bl	80010c8 <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 80014fc:	7efa      	ldrb	r2, [r7, #27]
 80014fe:	7ebb      	ldrb	r3, [r7, #26]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (num_samples < 1)
 8001508:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800150c:	2b00      	cmp	r3, #0
 800150e:	dc05      	bgt.n	800151c <max30102_read_fifo+0x4c>
    {
        num_samples += 32;
 8001510:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001514:	3320      	adds	r3, #32
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 800151c:	2300      	movs	r3, #0
 800151e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001522:	e153      	b.n	80017cc <max30102_read_fifo+0x2fc>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 8001524:	f107 0214 	add.w	r2, r7, #20
 8001528:	2306      	movs	r3, #6
 800152a:	2107      	movs	r1, #7
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff fdcb 	bl	80010c8 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8001532:	7d3b      	ldrb	r3, [r7, #20]
 8001534:	041a      	lsls	r2, r3, #16
 8001536:	7d7b      	ldrb	r3, [r7, #21]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	4313      	orrs	r3, r2
 800153c:	7dba      	ldrb	r2, [r7, #22]
 800153e:	4313      	orrs	r3, r2
 8001540:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001544:	613b      	str	r3, [r7, #16]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	041a      	lsls	r2, r3, #16
 800154a:	7e3b      	ldrb	r3, [r7, #24]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	4313      	orrs	r3, r2
 8001550:	7e7a      	ldrb	r2, [r7, #25]
 8001552:	4313      	orrs	r3, r2
 8001554:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001558:	60fb      	str	r3, [r7, #12]
        obj->_ir_samples[i] = ir_sample;
 800155a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 8001568:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	3320      	adds	r3, #32
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f000 fc1c 	bl	8001dbc <max30102_plot>

        static uint8_t eachBeatSampleCount = 0;    //这次心跳历经了多少个样本
        static uint8_t lastTenBeatSampleCount[10]; //过去十次心跳每一次的样本数
        static uint32_t last_iRed = 0;             //上一次红外的值，过滤后的
        uint8_t i, ii;
        for (i = 0; i < num_samples; i++)
 8001584:	2300      	movs	r3, #0
 8001586:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800158a:	e111      	b.n	80017b0 <max30102_read_fifo+0x2e0>
        {
            if (obj->_ir_samples[i] < 40000) //无手指不计算，跳过
 800158c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800159c:	4293      	cmp	r3, r2
 800159e:	d809      	bhi.n	80015b4 <max30102_read_fifo+0xe4>
            {
                heartRate = 0;
 80015a0:	4b99      	ldr	r3, [pc, #612]	@ (8001808 <max30102_read_fifo+0x338>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
                spo2 = 0;
 80015a6:	4b99      	ldr	r3, [pc, #612]	@ (800180c <max30102_read_fifo+0x33c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
                eachSampleDiff = 0;
 80015ac:	4b98      	ldr	r3, [pc, #608]	@ (8001810 <max30102_read_fifo+0x340>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	801a      	strh	r2, [r3, #0]
                continue;
 80015b2:	e0f8      	b.n	80017a6 <max30102_read_fifo+0x2d6>
            }
            buffInsert(ir_sample,red_sample);
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f98e 	bl	80018dc <buffInsert>
            calAcDc(&redAC, &redDC, &iRedAC, &iRedDC);
 80015c0:	4b94      	ldr	r3, [pc, #592]	@ (8001814 <max30102_read_fifo+0x344>)
 80015c2:	4a95      	ldr	r2, [pc, #596]	@ (8001818 <max30102_read_fifo+0x348>)
 80015c4:	4995      	ldr	r1, [pc, #596]	@ (800181c <max30102_read_fifo+0x34c>)
 80015c6:	4896      	ldr	r0, [pc, #600]	@ (8001820 <max30102_read_fifo+0x350>)
 80015c8:	f000 f9b8 	bl	800193c <calAcDc>
            filter(&max30102,&ir_sample,&red_sample);
 80015cc:	f107 020c 	add.w	r2, r7, #12
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	4619      	mov	r1, r3
 80015d6:	4893      	ldr	r0, [pc, #588]	@ (8001824 <max30102_read_fifo+0x354>)
 80015d8:	f000 f948 	bl	800186c <filter>

            float R = (((float)(redAC)) / ((float)(redDC))) / (((float)(iRedAC)) / ((float)(iRedDC)));
 80015dc:	4b90      	ldr	r3, [pc, #576]	@ (8001820 <max30102_read_fifo+0x350>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fae1 	bl	8000ba8 <__aeabi_ui2f>
 80015e6:	4604      	mov	r4, r0
 80015e8:	4b8c      	ldr	r3, [pc, #560]	@ (800181c <max30102_read_fifo+0x34c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fadb 	bl	8000ba8 <__aeabi_ui2f>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4619      	mov	r1, r3
 80015f6:	4620      	mov	r0, r4
 80015f8:	f7ff fbe2 	bl	8000dc0 <__aeabi_fdiv>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461d      	mov	r5, r3
 8001600:	4b85      	ldr	r3, [pc, #532]	@ (8001818 <max30102_read_fifo+0x348>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff facf 	bl	8000ba8 <__aeabi_ui2f>
 800160a:	4604      	mov	r4, r0
 800160c:	4b81      	ldr	r3, [pc, #516]	@ (8001814 <max30102_read_fifo+0x344>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fac9 	bl	8000ba8 <__aeabi_ui2f>
 8001616:	4603      	mov	r3, r0
 8001618:	4619      	mov	r1, r3
 800161a:	4620      	mov	r0, r4
 800161c:	f7ff fbd0 	bl	8000dc0 <__aeabi_fdiv>
 8001620:	4603      	mov	r3, r0
 8001622:	4619      	mov	r1, r3
 8001624:	4628      	mov	r0, r5
 8001626:	f7ff fbcb 	bl	8000dc0 <__aeabi_fdiv>
 800162a:	4603      	mov	r3, r0
 800162c:	61fb      	str	r3, [r7, #28]
            if (R >= 0.36 && R < 0.66)
 800162e:	69f8      	ldr	r0, [r7, #28]
 8001630:	f7fe fef2 	bl	8000418 <__aeabi_f2d>
 8001634:	a36c      	add	r3, pc, #432	@ (adr r3, 80017e8 <max30102_read_fifo+0x318>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7ff f9cb 	bl	80009d4 <__aeabi_dcmpge>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d01c      	beq.n	800167e <max30102_read_fifo+0x1ae>
 8001644:	69f8      	ldr	r0, [r7, #28]
 8001646:	f7fe fee7 	bl	8000418 <__aeabi_f2d>
 800164a:	a369      	add	r3, pc, #420	@ (adr r3, 80017f0 <max30102_read_fifo+0x320>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7ff f9ac 	bl	80009ac <__aeabi_dcmplt>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d011      	beq.n	800167e <max30102_read_fifo+0x1ae>
                spo2 = (uint8_t)(107 - 20 * R);
 800165a:	4973      	ldr	r1, [pc, #460]	@ (8001828 <max30102_read_fifo+0x358>)
 800165c:	69f8      	ldr	r0, [r7, #28]
 800165e:	f7ff fafb 	bl	8000c58 <__aeabi_fmul>
 8001662:	4603      	mov	r3, r0
 8001664:	4619      	mov	r1, r3
 8001666:	4871      	ldr	r0, [pc, #452]	@ (800182c <max30102_read_fifo+0x35c>)
 8001668:	f7ff f9ec 	bl	8000a44 <__aeabi_fsub>
 800166c:	4603      	mov	r3, r0
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fcb8 	bl	8000fe4 <__aeabi_f2uiz>
 8001674:	4603      	mov	r3, r0
 8001676:	b2da      	uxtb	r2, r3
 8001678:	4b64      	ldr	r3, [pc, #400]	@ (800180c <max30102_read_fifo+0x33c>)
 800167a:	701a      	strb	r2, [r3, #0]
 800167c:	e02b      	b.n	80016d6 <max30102_read_fifo+0x206>
            else if (R >= 0.66 && R < 1)
 800167e:	69f8      	ldr	r0, [r7, #28]
 8001680:	f7fe feca 	bl	8000418 <__aeabi_f2d>
 8001684:	a35a      	add	r3, pc, #360	@ (adr r3, 80017f0 <max30102_read_fifo+0x320>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7ff f9a3 	bl	80009d4 <__aeabi_dcmpge>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d020      	beq.n	80016d6 <max30102_read_fifo+0x206>
 8001694:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001698:	69f8      	ldr	r0, [r7, #28]
 800169a:	f7ff fc7b 	bl	8000f94 <__aeabi_fcmplt>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d018      	beq.n	80016d6 <max30102_read_fifo+0x206>
                spo2 = (uint8_t)(129.64 - 54 * R);
 80016a4:	4962      	ldr	r1, [pc, #392]	@ (8001830 <max30102_read_fifo+0x360>)
 80016a6:	69f8      	ldr	r0, [r7, #28]
 80016a8:	f7ff fad6 	bl	8000c58 <__aeabi_fmul>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe feb2 	bl	8000418 <__aeabi_f2d>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	a14f      	add	r1, pc, #316	@ (adr r1, 80017f8 <max30102_read_fifo+0x328>)
 80016ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016be:	f7fe fd4b 	bl	8000158 <__aeabi_dsub>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f7ff f997 	bl	80009fc <__aeabi_d2uiz>
 80016ce:	4603      	mov	r3, r0
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4b4e      	ldr	r3, [pc, #312]	@ (800180c <max30102_read_fifo+0x33c>)
 80016d4:	701a      	strb	r2, [r3, #0]
            //计算心率,30-250ppm  count:200-12
            eachSampleDiff = last_iRed - ir_sample;
 80016d6:	4b57      	ldr	r3, [pc, #348]	@ (8001834 <max30102_read_fifo+0x364>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	b29a      	uxth	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001810 <max30102_read_fifo+0x340>)
 80016e8:	801a      	strh	r2, [r3, #0]
            if (eachSampleDiff > 50 && eachBeatSampleCount > 12)
 80016ea:	4b49      	ldr	r3, [pc, #292]	@ (8001810 <max30102_read_fifo+0x340>)
 80016ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f0:	2b32      	cmp	r3, #50	@ 0x32
 80016f2:	dd4f      	ble.n	8001794 <max30102_read_fifo+0x2c4>
 80016f4:	4b50      	ldr	r3, [pc, #320]	@ (8001838 <max30102_read_fifo+0x368>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b0c      	cmp	r3, #12
 80016fa:	d94b      	bls.n	8001794 <max30102_read_fifo+0x2c4>
            {
                for (ii = 9; ii > 0; ii--)
 80016fc:	2309      	movs	r3, #9
 80016fe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001702:	e00d      	b.n	8001720 <max30102_read_fifo+0x250>
                    lastTenBeatSampleCount[i] = lastTenBeatSampleCount[i - 1];
 8001704:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001708:	1e5a      	subs	r2, r3, #1
 800170a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800170e:	494b      	ldr	r1, [pc, #300]	@ (800183c <max30102_read_fifo+0x36c>)
 8001710:	5c89      	ldrb	r1, [r1, r2]
 8001712:	4a4a      	ldr	r2, [pc, #296]	@ (800183c <max30102_read_fifo+0x36c>)
 8001714:	54d1      	strb	r1, [r2, r3]
                for (ii = 9; ii > 0; ii--)
 8001716:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800171a:	3b01      	subs	r3, #1
 800171c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001720:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1ed      	bne.n	8001704 <max30102_read_fifo+0x234>
                lastTenBeatSampleCount[0] = eachBeatSampleCount;
 8001728:	4b43      	ldr	r3, [pc, #268]	@ (8001838 <max30102_read_fifo+0x368>)
 800172a:	781a      	ldrb	r2, [r3, #0]
 800172c:	4b43      	ldr	r3, [pc, #268]	@ (800183c <max30102_read_fifo+0x36c>)
 800172e:	701a      	strb	r2, [r3, #0]
                uint32_t totalTime = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
                for (ii = 0; ii < 10; ii++)
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800173a:	e00c      	b.n	8001756 <max30102_read_fifo+0x286>
                    totalTime += lastTenBeatSampleCount[i];
 800173c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001740:	4a3e      	ldr	r2, [pc, #248]	@ (800183c <max30102_read_fifo+0x36c>)
 8001742:	5cd3      	ldrb	r3, [r2, r3]
 8001744:	461a      	mov	r2, r3
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	4413      	add	r3, r2
 800174a:	623b      	str	r3, [r7, #32]
                for (ii = 0; ii < 10; ii++)
 800174c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001750:	3301      	adds	r3, #1
 8001752:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001756:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800175a:	2b09      	cmp	r3, #9
 800175c:	d9ee      	bls.n	800173c <max30102_read_fifo+0x26c>
                heartRate = (uint8_t)(60.0 * 10 / 0.02 / ((float)totalTime));
 800175e:	6a38      	ldr	r0, [r7, #32]
 8001760:	f7ff fa22 	bl	8000ba8 <__aeabi_ui2f>
 8001764:	4603      	mov	r3, r0
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fe56 	bl	8000418 <__aeabi_f2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	a123      	add	r1, pc, #140	@ (adr r1, 8001800 <max30102_read_fifo+0x330>)
 8001772:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001776:	f7fe ffd1 	bl	800071c <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f7ff f93b 	bl	80009fc <__aeabi_d2uiz>
 8001786:	4603      	mov	r3, r0
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b1f      	ldr	r3, [pc, #124]	@ (8001808 <max30102_read_fifo+0x338>)
 800178c:	701a      	strb	r2, [r3, #0]
                eachBeatSampleCount = 0;
 800178e:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <max30102_read_fifo+0x368>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
            }
            last_iRed = ir_sample;
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4a27      	ldr	r2, [pc, #156]	@ (8001834 <max30102_read_fifo+0x364>)
 8001798:	6013      	str	r3, [r2, #0]
            eachBeatSampleCount++;
 800179a:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <max30102_read_fifo+0x368>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <max30102_read_fifo+0x368>)
 80017a4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < num_samples; i++)
 80017a6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80017aa:	3301      	adds	r3, #1
 80017ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80017b0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80017b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f6ff aee7 	blt.w	800158c <max30102_read_fifo+0xbc>
    for (int8_t i = 0; i < num_samples; i++)
 80017be:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	3301      	adds	r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80017cc:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 80017d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80017d4:	429a      	cmp	r2, r3
 80017d6:	f6ff aea5 	blt.w	8001524 <max30102_read_fifo+0x54>
        }
    }
}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	@ 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bdb0      	pop	{r4, r5, r7, pc}
 80017e4:	f3af 8000 	nop.w
 80017e8:	70a3d70a 	.word	0x70a3d70a
 80017ec:	3fd70a3d 	.word	0x3fd70a3d
 80017f0:	51eb851f 	.word	0x51eb851f
 80017f4:	3fe51eb8 	.word	0x3fe51eb8
 80017f8:	e147ae14 	.word	0xe147ae14
 80017fc:	4060347a 	.word	0x4060347a
 8001800:	00000000 	.word	0x00000000
 8001804:	40dd4c00 	.word	0x40dd4c00
 8001808:	20000214 	.word	0x20000214
 800180c:	20000215 	.word	0x20000215
 8001810:	20000224 	.word	0x20000224
 8001814:	20000220 	.word	0x20000220
 8001818:	2000021c 	.word	0x2000021c
 800181c:	20000218 	.word	0x20000218
 8001820:	20000216 	.word	0x20000216
 8001824:	200006e0 	.word	0x200006e0
 8001828:	41a00000 	.word	0x41a00000
 800182c:	42d60000 	.word	0x42d60000
 8001830:	42580000 	.word	0x42580000
 8001834:	20000228 	.word	0x20000228
 8001838:	2000022c 	.word	0x2000022c
 800183c:	20000230 	.word	0x20000230

08001840 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 800184c:	2301      	movs	r3, #1
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	211f      	movs	r1, #31
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f7ff fc38 	bl	80010c8 <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8001858:	2301      	movs	r3, #1
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	2120      	movs	r1, #32
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f7ff fc32 	bl	80010c8 <max30102_read>
}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <filter>:



void filter(max30102_t *obj, uint32_t *red_sample,uint32_t *ir_sample)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	@ 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
    uint8_t i;
    uint32_t red = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
    uint32_t ired = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < FILTER_LEVEL - 1; i++)
 8001880:	2300      	movs	r3, #0
 8001882:	77fb      	strb	r3, [r7, #31]
 8001884:	e013      	b.n	80018ae <filter+0x42>
    {
        red += obj->_red_samples[i];
 8001886:	7ffb      	ldrb	r3, [r7, #31]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	3320      	adds	r3, #32
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4413      	add	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        ired += obj->_ir_samples[i];
 8001898:	7ffb      	ldrb	r3, [r7, #31]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4413      	add	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]
    for (i = 0; i < FILTER_LEVEL - 1; i++)
 80018a8:	7ffb      	ldrb	r3, [r7, #31]
 80018aa:	3301      	adds	r3, #1
 80018ac:	77fb      	strb	r3, [r7, #31]
 80018ae:	7ffb      	ldrb	r3, [r7, #31]
 80018b0:	2b06      	cmp	r3, #6
 80018b2:	d9e8      	bls.n	8001886 <filter+0x1a>
    }
    *red_sample = (red + *red_sample) / FILTER_LEVEL;
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	4413      	add	r3, r2
 80018bc:	08da      	lsrs	r2, r3, #3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	601a      	str	r2, [r3, #0]
    *ir_sample = (ired + *ir_sample) / FILTER_LEVEL;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	4413      	add	r3, r2
 80018ca:	08da      	lsrs	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	601a      	str	r2, [r3, #0]
}
 80018d0:	bf00      	nop
 80018d2:	3724      	adds	r7, #36	@ 0x24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
	...

080018dc <buffInsert>:

void buffInsert(uint32_t red,uint32_t ir)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
    uint8_t i;
    for (i = BUFF_SIZE - 1; i > 0; i--)
 80018e6:	2331      	movs	r3, #49	@ 0x31
 80018e8:	73fb      	strb	r3, [r7, #15]
 80018ea:	e016      	b.n	800191a <buffInsert+0x3e>
    {
        sampleBuff[i].red = sampleBuff[i - 1].red;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	1e5a      	subs	r2, r3, #1
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	4911      	ldr	r1, [pc, #68]	@ (8001938 <buffInsert+0x5c>)
 80018f4:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 80018f8:	490f      	ldr	r1, [pc, #60]	@ (8001938 <buffInsert+0x5c>)
 80018fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        sampleBuff[i].ir = sampleBuff[i - 1].ir;
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	3b01      	subs	r3, #1
 8001902:	7bf9      	ldrb	r1, [r7, #15]
 8001904:	4a0c      	ldr	r2, [pc, #48]	@ (8001938 <buffInsert+0x5c>)
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4413      	add	r3, r2
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	480a      	ldr	r0, [pc, #40]	@ (8001938 <buffInsert+0x5c>)
 800190e:	00cb      	lsls	r3, r1, #3
 8001910:	4403      	add	r3, r0
 8001912:	605a      	str	r2, [r3, #4]
    for (i = BUFF_SIZE - 1; i > 0; i--)
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	3b01      	subs	r3, #1
 8001918:	73fb      	strb	r3, [r7, #15]
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1e5      	bne.n	80018ec <buffInsert+0x10>
    }
    sampleBuff[0].red = red;
 8001920:	4a05      	ldr	r2, [pc, #20]	@ (8001938 <buffInsert+0x5c>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
    sampleBuff[0].ir = ir;
 8001926:	4a04      	ldr	r2, [pc, #16]	@ (8001938 <buffInsert+0x5c>)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	6053      	str	r3, [r2, #4]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000084 	.word	0x20000084

0800193c <calAcDc>:

void calAcDc(uint16_t *rac, uint32_t *rdc, uint16_t *iac, uint32_t *idc)
{
 800193c:	b480      	push	{r7}
 800193e:	b08b      	sub	sp, #44	@ 0x2c
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	603b      	str	r3, [r7, #0]
    uint32_t rMax = sampleBuff[0].red;
 800194a:	4b35      	ldr	r3, [pc, #212]	@ (8001a20 <calAcDc+0xe4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rMin = sampleBuff[0].red;
 8001950:	4b33      	ldr	r3, [pc, #204]	@ (8001a20 <calAcDc+0xe4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	623b      	str	r3, [r7, #32]
    uint32_t iMax = sampleBuff[0].ir;
 8001956:	4b32      	ldr	r3, [pc, #200]	@ (8001a20 <calAcDc+0xe4>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	61fb      	str	r3, [r7, #28]
    uint32_t iMin = sampleBuff[0].ir;
 800195c:	4b30      	ldr	r3, [pc, #192]	@ (8001a20 <calAcDc+0xe4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	61bb      	str	r3, [r7, #24]

    uint8_t i;
    for (i = 0; i < BUFF_SIZE; i++)
 8001962:	2300      	movs	r3, #0
 8001964:	75fb      	strb	r3, [r7, #23]
 8001966:	e036      	b.n	80019d6 <calAcDc+0x9a>
    {
        if (sampleBuff[i].red > rMax)
 8001968:	7dfb      	ldrb	r3, [r7, #23]
 800196a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a20 <calAcDc+0xe4>)
 800196c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001972:	429a      	cmp	r2, r3
 8001974:	d204      	bcs.n	8001980 <calAcDc+0x44>
            rMax = sampleBuff[i].red;
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	4a29      	ldr	r2, [pc, #164]	@ (8001a20 <calAcDc+0xe4>)
 800197a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (sampleBuff[i].red < rMin)
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	4a27      	ldr	r2, [pc, #156]	@ (8001a20 <calAcDc+0xe4>)
 8001984:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001988:	6a3a      	ldr	r2, [r7, #32]
 800198a:	429a      	cmp	r2, r3
 800198c:	d904      	bls.n	8001998 <calAcDc+0x5c>
            rMin = sampleBuff[i].red;
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	4a23      	ldr	r2, [pc, #140]	@ (8001a20 <calAcDc+0xe4>)
 8001992:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001996:	623b      	str	r3, [r7, #32]
        if (sampleBuff[i].ir > iMax)
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	4a21      	ldr	r2, [pc, #132]	@ (8001a20 <calAcDc+0xe4>)
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4413      	add	r3, r2
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d205      	bcs.n	80019b4 <calAcDc+0x78>
            iMax = sampleBuff[i].ir;
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
 80019aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001a20 <calAcDc+0xe4>)
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4413      	add	r3, r2
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	61fb      	str	r3, [r7, #28]
        if (sampleBuff[i].ir < iMin)
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001a20 <calAcDc+0xe4>)
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4413      	add	r3, r2
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d905      	bls.n	80019d0 <calAcDc+0x94>
            iMin = sampleBuff[i].ir;
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	4a16      	ldr	r2, [pc, #88]	@ (8001a20 <calAcDc+0xe4>)
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < BUFF_SIZE; i++)
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	3301      	adds	r3, #1
 80019d4:	75fb      	strb	r3, [r7, #23]
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	2b31      	cmp	r3, #49	@ 0x31
 80019da:	d9c5      	bls.n	8001968 <calAcDc+0x2c>
    }
    *rac = rMax - rMin;
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	b29a      	uxth	r2, r3
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	801a      	strh	r2, [r3, #0]
    *rdc = (rMax + rMin) / 2;
 80019ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	4413      	add	r3, r2
 80019f2:	085a      	lsrs	r2, r3, #1
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	601a      	str	r2, [r3, #0]
    *iac = iMax - iMin;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	801a      	strh	r2, [r3, #0]
    *idc = (iMax + iMin) / 2;
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	085a      	lsrs	r2, r3, #1
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	601a      	str	r2, [r3, #0]
}
 8001a14:	bf00      	nop
 8001a16:	372c      	adds	r7, #44	@ 0x2c
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000084 	.word	0x20000084

08001a24 <max30102_getHeartRate>:

uint8_t max30102_getHeartRate() { return heartRate; }
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4b02      	ldr	r3, [pc, #8]	@ (8001a34 <max30102_getHeartRate+0x10>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	20000214 	.word	0x20000214

08001a38 <max30102_getSpO2>:
uint8_t max30102_getSpO2() { return spo2; }
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4b02      	ldr	r3, [pc, #8]	@ (8001a48 <max30102_getSpO2+0x10>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	20000215 	.word	0x20000215

08001a4c <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(void) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001a52:	f000 f905 	bl	8001c60 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001a56:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	2178      	movs	r1, #120	@ 0x78
 8001a5e:	485b      	ldr	r0, [pc, #364]	@ (8001bcc <SSD1306_Init+0x180>)
 8001a60:	f001 fd10 	bl	8003484 <HAL_I2C_IsDeviceReady>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e0a9      	b.n	8001bc2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001a6e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001a72:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a74:	e002      	b.n	8001a7c <SSD1306_Init+0x30>
		p--;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f9      	bne.n	8001a76 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001a82:	22ae      	movs	r2, #174	@ 0xae
 8001a84:	2100      	movs	r1, #0
 8001a86:	2078      	movs	r0, #120	@ 0x78
 8001a88:	f000 f964 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2078      	movs	r0, #120	@ 0x78
 8001a92:	f000 f95f 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001a96:	2210      	movs	r2, #16
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2078      	movs	r0, #120	@ 0x78
 8001a9c:	f000 f95a 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001aa0:	22b0      	movs	r2, #176	@ 0xb0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2078      	movs	r0, #120	@ 0x78
 8001aa6:	f000 f955 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001aaa:	22c8      	movs	r2, #200	@ 0xc8
 8001aac:	2100      	movs	r1, #0
 8001aae:	2078      	movs	r0, #120	@ 0x78
 8001ab0:	f000 f950 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2078      	movs	r0, #120	@ 0x78
 8001aba:	f000 f94b 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001abe:	2210      	movs	r2, #16
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2078      	movs	r0, #120	@ 0x78
 8001ac4:	f000 f946 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001ac8:	2240      	movs	r2, #64	@ 0x40
 8001aca:	2100      	movs	r1, #0
 8001acc:	2078      	movs	r0, #120	@ 0x78
 8001ace:	f000 f941 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001ad2:	2281      	movs	r2, #129	@ 0x81
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2078      	movs	r0, #120	@ 0x78
 8001ad8:	f000 f93c 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001adc:	22ff      	movs	r2, #255	@ 0xff
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2078      	movs	r0, #120	@ 0x78
 8001ae2:	f000 f937 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001ae6:	22a1      	movs	r2, #161	@ 0xa1
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2078      	movs	r0, #120	@ 0x78
 8001aec:	f000 f932 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001af0:	22a6      	movs	r2, #166	@ 0xa6
 8001af2:	2100      	movs	r1, #0
 8001af4:	2078      	movs	r0, #120	@ 0x78
 8001af6:	f000 f92d 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001afa:	22a8      	movs	r2, #168	@ 0xa8
 8001afc:	2100      	movs	r1, #0
 8001afe:	2078      	movs	r0, #120	@ 0x78
 8001b00:	f000 f928 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001b04:	223f      	movs	r2, #63	@ 0x3f
 8001b06:	2100      	movs	r1, #0
 8001b08:	2078      	movs	r0, #120	@ 0x78
 8001b0a:	f000 f923 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b0e:	22a4      	movs	r2, #164	@ 0xa4
 8001b10:	2100      	movs	r1, #0
 8001b12:	2078      	movs	r0, #120	@ 0x78
 8001b14:	f000 f91e 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001b18:	22d3      	movs	r2, #211	@ 0xd3
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2078      	movs	r0, #120	@ 0x78
 8001b1e:	f000 f919 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	2078      	movs	r0, #120	@ 0x78
 8001b28:	f000 f914 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b2c:	22d5      	movs	r2, #213	@ 0xd5
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2078      	movs	r0, #120	@ 0x78
 8001b32:	f000 f90f 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001b36:	22f0      	movs	r2, #240	@ 0xf0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2078      	movs	r0, #120	@ 0x78
 8001b3c:	f000 f90a 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001b40:	22d9      	movs	r2, #217	@ 0xd9
 8001b42:	2100      	movs	r1, #0
 8001b44:	2078      	movs	r0, #120	@ 0x78
 8001b46:	f000 f905 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001b4a:	2222      	movs	r2, #34	@ 0x22
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2078      	movs	r0, #120	@ 0x78
 8001b50:	f000 f900 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001b54:	22da      	movs	r2, #218	@ 0xda
 8001b56:	2100      	movs	r1, #0
 8001b58:	2078      	movs	r0, #120	@ 0x78
 8001b5a:	f000 f8fb 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001b5e:	2212      	movs	r2, #18
 8001b60:	2100      	movs	r1, #0
 8001b62:	2078      	movs	r0, #120	@ 0x78
 8001b64:	f000 f8f6 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001b68:	22db      	movs	r2, #219	@ 0xdb
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2078      	movs	r0, #120	@ 0x78
 8001b6e:	f000 f8f1 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001b72:	2220      	movs	r2, #32
 8001b74:	2100      	movs	r1, #0
 8001b76:	2078      	movs	r0, #120	@ 0x78
 8001b78:	f000 f8ec 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001b7c:	228d      	movs	r2, #141	@ 0x8d
 8001b7e:	2100      	movs	r1, #0
 8001b80:	2078      	movs	r0, #120	@ 0x78
 8001b82:	f000 f8e7 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001b86:	2214      	movs	r2, #20
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2078      	movs	r0, #120	@ 0x78
 8001b8c:	f000 f8e2 	bl	8001d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001b90:	22af      	movs	r2, #175	@ 0xaf
 8001b92:	2100      	movs	r1, #0
 8001b94:	2078      	movs	r0, #120	@ 0x78
 8001b96:	f000 f8dd 	bl	8001d54 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001b9a:	222e      	movs	r2, #46	@ 0x2e
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2078      	movs	r0, #120	@ 0x78
 8001ba0:	f000 f8d8 	bl	8001d54 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f000 f843 	bl	8001c30 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001baa:	f000 f813 	bl	8001bd4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001bae:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <SSD1306_Init+0x184>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <SSD1306_Init+0x184>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001bba:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <SSD1306_Init+0x184>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000644 	.word	0x20000644
 8001bd0:	2000063c 	.word	0x2000063c

08001bd4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001bda:	2300      	movs	r3, #0
 8001bdc:	71fb      	strb	r3, [r7, #7]
 8001bde:	e01d      	b.n	8001c1c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	3b50      	subs	r3, #80	@ 0x50
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	461a      	mov	r2, r3
 8001be8:	2100      	movs	r1, #0
 8001bea:	2078      	movs	r0, #120	@ 0x78
 8001bec:	f000 f8b2 	bl	8001d54 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2078      	movs	r0, #120	@ 0x78
 8001bf6:	f000 f8ad 	bl	8001d54 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001bfa:	2210      	movs	r2, #16
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	2078      	movs	r0, #120	@ 0x78
 8001c00:	f000 f8a8 	bl	8001d54 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	01db      	lsls	r3, r3, #7
 8001c08:	4a08      	ldr	r2, [pc, #32]	@ (8001c2c <SSD1306_UpdateScreen+0x58>)
 8001c0a:	441a      	add	r2, r3
 8001c0c:	2380      	movs	r3, #128	@ 0x80
 8001c0e:	2140      	movs	r1, #64	@ 0x40
 8001c10:	2078      	movs	r0, #120	@ 0x78
 8001c12:	f000 f839 	bl	8001c88 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	71fb      	strb	r3, [r7, #7]
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	2b07      	cmp	r3, #7
 8001c20:	d9de      	bls.n	8001be0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001c22:	bf00      	nop
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	2000023c 	.word	0x2000023c

08001c30 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <SSD1306_Fill+0x14>
 8001c40:	2300      	movs	r3, #0
 8001c42:	e000      	b.n	8001c46 <SSD1306_Fill+0x16>
 8001c44:	23ff      	movs	r3, #255	@ 0xff
 8001c46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4803      	ldr	r0, [pc, #12]	@ (8001c5c <SSD1306_Fill+0x2c>)
 8001c4e:	f003 f882 	bl	8004d56 <memset>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000023c 	.word	0x2000023c

08001c60 <ssd1306_I2C_Init>:
}


/* I2C Functions */

void ssd1306_I2C_Init() {
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 8001c66:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <ssd1306_I2C_Init+0x24>)
 8001c68:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c6a:	e002      	b.n	8001c72 <ssd1306_I2C_Init+0x12>
		p--;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f9      	bne.n	8001c6c <ssd1306_I2C_Init+0xc>
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	0003d090 	.word	0x0003d090

08001c88 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b0c7      	sub	sp, #284	@ 0x11c
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	4604      	mov	r4, r0
 8001c90:	4608      	mov	r0, r1
 8001c92:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001c96:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001c9a:	600a      	str	r2, [r1, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ca2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001ca6:	4622      	mov	r2, r4
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cae:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cbe:	460a      	mov	r2, r1
 8001cc0:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8001cc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cca:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001cce:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001cd2:	7812      	ldrb	r2, [r2, #0]
 8001cd4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001cdc:	e015      	b.n	8001d0a <ssd1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 8001cde:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001ce2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001ce6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	441a      	add	r2, r3
 8001cee:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	7811      	ldrb	r1, [r2, #0]
 8001cf6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001cfa:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001cfe:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8001d00:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d04:	3301      	adds	r3, #1
 8001d06:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001d0a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d14:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001d18:	8812      	ldrh	r2, [r2, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d8df      	bhi.n	8001cde <ssd1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 100);
 8001d1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d22:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b299      	uxth	r1, r3
 8001d2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	f107 020c 	add.w	r2, r7, #12
 8001d3c:	2064      	movs	r0, #100	@ 0x64
 8001d3e:	9000      	str	r0, [sp, #0]
 8001d40:	4803      	ldr	r0, [pc, #12]	@ (8001d50 <ssd1306_I2C_WriteMulti+0xc8>)
 8001d42:	f001 f835 	bl	8002db0 <HAL_I2C_Master_Transmit>
}
 8001d46:	bf00      	nop
 8001d48:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd90      	pop	{r4, r7, pc}
 8001d50:	20000644 	.word	0x20000644

08001d54 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	71bb      	strb	r3, [r7, #6]
 8001d62:	4613      	mov	r3, r2
 8001d64:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001d66:	79bb      	ldrb	r3, [r7, #6]
 8001d68:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001d6a:	797b      	ldrb	r3, [r7, #5]
 8001d6c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 100);
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	b299      	uxth	r1, r3
 8001d72:	f107 020c 	add.w	r2, r7, #12
 8001d76:	2364      	movs	r3, #100	@ 0x64
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	4803      	ldr	r0, [pc, #12]	@ (8001d8c <ssd1306_I2C_Write+0x38>)
 8001d7e:	f001 f817 	bl	8002db0 <HAL_I2C_Master_Transmit>
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000644 	.word	0x20000644

08001d90 <__io_putchar>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
int __io_putchar(int ch)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint8_t temp = ch;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart1, &temp, 1, HAL_MAX_DELAY);
 8001d9e:	f107 010f 	add.w	r1, r7, #15
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	2201      	movs	r2, #1
 8001da8:	4803      	ldr	r0, [pc, #12]	@ (8001db8 <__io_putchar+0x28>)
 8001daa:	f002 fc7f 	bl	80046ac <HAL_UART_Transmit>
  return ch;
 8001dae:	687b      	ldr	r3, [r7, #4]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000698 	.word	0x20000698

08001dbc <max30102_plot>:
// Override plot function



void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
    // printf("ir:%u\n", ir_sample);                  // Print IR only
    // printf("r:%u\n", red_sample);                  // Print Red only
    printf("ir:%lu,r:%lu\n", ir_sample, red_sample);    // Print IR and Red
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4803      	ldr	r0, [pc, #12]	@ (8001dd8 <max30102_plot+0x1c>)
 8001dcc:	f002 ff6e 	bl	8004cac <iprintf>

}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	08005874 	.word	0x08005874

08001ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001de2:	f000 fb4f 	bl	8002484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001de6:	f000 f86b 	bl	8001ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dea:	f000 f903 	bl	8001ff4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001dee:	f000 f8a9 	bl	8001f44 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001df2:	f000 f8d5 	bl	8001fa0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  max30102_init(&max30102, &hi2c1);
 8001df6:	492c      	ldr	r1, [pc, #176]	@ (8001ea8 <main+0xcc>)
 8001df8:	482c      	ldr	r0, [pc, #176]	@ (8001eac <main+0xd0>)
 8001dfa:	f7ff f913 	bl	8001024 <max30102_init>
  max30102_reset(&max30102);
 8001dfe:	482b      	ldr	r0, [pc, #172]	@ (8001eac <main+0xd0>)
 8001e00:	f7ff f987 	bl	8001112 <max30102_reset>
  max30102_clear_fifo(&max30102);
 8001e04:	4829      	ldr	r0, [pc, #164]	@ (8001eac <main+0xd0>)
 8001e06:	f7ff fb41 	bl	800148c <max30102_clear_fifo>
  max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2103      	movs	r1, #3
 8001e10:	4826      	ldr	r0, [pc, #152]	@ (8001eac <main+0xd0>)
 8001e12:	f7ff fb01 	bl	8001418 <max30102_set_fifo_config>

  // Sensor settings
  max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8001e16:	2101      	movs	r1, #1
 8001e18:	4824      	ldr	r0, [pc, #144]	@ (8001eac <main+0xd0>)
 8001e1a:	f7ff fa63 	bl	80012e4 <max30102_set_led_pulse_width>
  max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4822      	ldr	r0, [pc, #136]	@ (8001eac <main+0xd0>)
 8001e22:	f7ff fa82 	bl	800132a <max30102_set_adc_resolution>
  max30102_set_sampling_rate(&max30102, max30102_sr_800);
 8001e26:	2104      	movs	r1, #4
 8001e28:	4820      	ldr	r0, [pc, #128]	@ (8001eac <main+0xd0>)
 8001e2a:	f7ff fa3c 	bl	80012a6 <max30102_set_sampling_rate>
  max30102_set_led_current_1(&max30102, 6.2);
 8001e2e:	4920      	ldr	r1, [pc, #128]	@ (8001eb0 <main+0xd4>)
 8001e30:	481e      	ldr	r0, [pc, #120]	@ (8001eac <main+0xd0>)
 8001e32:	f7ff faa1 	bl	8001378 <max30102_set_led_current_1>
  max30102_set_led_current_2(&max30102, 6.2);
 8001e36:	491e      	ldr	r1, [pc, #120]	@ (8001eb0 <main+0xd4>)
 8001e38:	481c      	ldr	r0, [pc, #112]	@ (8001eac <main+0xd0>)
 8001e3a:	f7ff fac5 	bl	80013c8 <max30102_set_led_current_2>

  // Enter SpO2 mode
  max30102_set_mode(&max30102, max30102_spo2);
 8001e3e:	2103      	movs	r1, #3
 8001e40:	481a      	ldr	r0, [pc, #104]	@ (8001eac <main+0xd0>)
 8001e42:	f7ff fa0a 	bl	800125a <max30102_set_mode>
  max30102_set_a_full(&max30102, 1);
 8001e46:	2101      	movs	r1, #1
 8001e48:	4818      	ldr	r0, [pc, #96]	@ (8001eac <main+0xd0>)
 8001e4a:	f7ff f973 	bl	8001134 <max30102_set_a_full>

  // Initiate 1 temperature measurement
  max30102_set_die_temp_en(&max30102, 1);
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4816      	ldr	r0, [pc, #88]	@ (8001eac <main+0xd0>)
 8001e52:	f7ff f9af 	bl	80011b4 <max30102_set_die_temp_en>
  max30102_set_die_temp_rdy(&max30102, 1);
 8001e56:	2101      	movs	r1, #1
 8001e58:	4814      	ldr	r0, [pc, #80]	@ (8001eac <main+0xd0>)
 8001e5a:	f7ff f993 	bl	8001184 <max30102_set_die_temp_rdy>

  uint8_t en_reg[2] = {0};
 8001e5e:	2300      	movs	r3, #0
 8001e60:	80bb      	strh	r3, [r7, #4]
  max30102_read(&max30102, 0x00, en_reg, 1);
 8001e62:	1d3a      	adds	r2, r7, #4
 8001e64:	2301      	movs	r3, #1
 8001e66:	2100      	movs	r1, #0
 8001e68:	4810      	ldr	r0, [pc, #64]	@ (8001eac <main+0xd0>)
 8001e6a:	f7ff f92d 	bl	80010c8 <max30102_read>
  HAL_Delay(1000);
 8001e6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e72:	f000 fb69 	bl	8002548 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001e76:	2201      	movs	r2, #1
 8001e78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e7c:	480d      	ldr	r0, [pc, #52]	@ (8001eb4 <main+0xd8>)
 8001e7e:	f000 fe19 	bl	8002ab4 <HAL_GPIO_WritePin>

  SSD1306_Init();
 8001e82:	f7ff fde3 	bl	8001a4c <SSD1306_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    //if (max30102_has_interrupt(&max30102))
	   // {
		      max30102_interrupt_handler(&max30102);
 8001e86:	4809      	ldr	r0, [pc, #36]	@ (8001eac <main+0xd0>)
 8001e88:	f7ff f9b9 	bl	80011fe <max30102_interrupt_handler>
		      heart_rate = max30102_getHeartRate();
 8001e8c:	f7ff fdca 	bl	8001a24 <max30102_getHeartRate>
 8001e90:	4603      	mov	r3, r0
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <main+0xdc>)
 8001e96:	701a      	strb	r2, [r3, #0]
		      SpO2_value = max30102_getSpO2();
 8001e98:	f7ff fdce 	bl	8001a38 <max30102_getSpO2>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <main+0xe0>)
 8001ea2:	701a      	strb	r2, [r3, #0]
		      max30102_interrupt_handler(&max30102);
 8001ea4:	bf00      	nop
 8001ea6:	e7ee      	b.n	8001e86 <main+0xaa>
 8001ea8:	20000644 	.word	0x20000644
 8001eac:	200006e0 	.word	0x200006e0
 8001eb0:	40c66666 	.word	0x40c66666
 8001eb4:	40011000 	.word	0x40011000
 8001eb8:	200007ec 	.word	0x200007ec
 8001ebc:	200007ed 	.word	0x200007ed

08001ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b090      	sub	sp, #64	@ 0x40
 8001ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ec6:	f107 0318 	add.w	r3, r7, #24
 8001eca:	2228      	movs	r2, #40	@ 0x28
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 ff41 	bl	8004d56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	60da      	str	r2, [r3, #12]
 8001ee0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eea:	2310      	movs	r3, #16
 8001eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001ef6:	f44f 1320 	mov.w	r3, #2621440	@ 0x280000
 8001efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001efc:	f107 0318 	add.w	r3, r7, #24
 8001f00:	4618      	mov	r0, r3
 8001f02:	f001 ff73 	bl	8003dec <HAL_RCC_OscConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001f0c:	f000 f8f4 	bl	80020f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f10:	230f      	movs	r3, #15
 8001f12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f14:	2302      	movs	r3, #2
 8001f16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2101      	movs	r1, #1
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f002 f9e0 	bl	80042f0 <HAL_RCC_ClockConfig>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001f36:	f000 f8df 	bl	80020f8 <Error_Handler>
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	3740      	adds	r7, #64	@ 0x40
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f48:	4b12      	ldr	r3, [pc, #72]	@ (8001f94 <MX_I2C1_Init+0x50>)
 8001f4a:	4a13      	ldr	r2, [pc, #76]	@ (8001f98 <MX_I2C1_Init+0x54>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f4e:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <MX_I2C1_Init+0x50>)
 8001f50:	4a12      	ldr	r2, [pc, #72]	@ (8001f9c <MX_I2C1_Init+0x58>)
 8001f52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f54:	4b0f      	ldr	r3, [pc, #60]	@ (8001f94 <MX_I2C1_Init+0x50>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <MX_I2C1_Init+0x50>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <MX_I2C1_Init+0x50>)
 8001f62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f68:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <MX_I2C1_Init+0x50>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f6e:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <MX_I2C1_Init+0x50>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f74:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <MX_I2C1_Init+0x50>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f7a:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <MX_I2C1_Init+0x50>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f80:	4804      	ldr	r0, [pc, #16]	@ (8001f94 <MX_I2C1_Init+0x50>)
 8001f82:	f000 fdd1 	bl	8002b28 <HAL_I2C_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f8c:	f000 f8b4 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000644 	.word	0x20000644
 8001f98:	40005400 	.word	0x40005400
 8001f9c:	00061a80 	.word	0x00061a80

08001fa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <MX_USART1_UART_Init+0x4c>)
 8001fa6:	4a12      	ldr	r2, [pc, #72]	@ (8001ff0 <MX_USART1_UART_Init+0x50>)
 8001fa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001faa:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <MX_USART1_UART_Init+0x4c>)
 8001fac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <MX_USART1_UART_Init+0x4c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <MX_USART1_UART_Init+0x4c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <MX_USART1_UART_Init+0x4c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <MX_USART1_UART_Init+0x4c>)
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fca:	4b08      	ldr	r3, [pc, #32]	@ (8001fec <MX_USART1_UART_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <MX_USART1_UART_Init+0x4c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fd6:	4805      	ldr	r0, [pc, #20]	@ (8001fec <MX_USART1_UART_Init+0x4c>)
 8001fd8:	f002 fb18 	bl	800460c <HAL_UART_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fe2:	f000 f889 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000698 	.word	0x20000698
 8001ff0:	40013800 	.word	0x40013800

08001ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffa:	f107 0310 	add.w	r3, r7, #16
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002008:	4b37      	ldr	r3, [pc, #220]	@ (80020e8 <MX_GPIO_Init+0xf4>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4a36      	ldr	r2, [pc, #216]	@ (80020e8 <MX_GPIO_Init+0xf4>)
 800200e:	f043 0310 	orr.w	r3, r3, #16
 8002012:	6193      	str	r3, [r2, #24]
 8002014:	4b34      	ldr	r3, [pc, #208]	@ (80020e8 <MX_GPIO_Init+0xf4>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002020:	4b31      	ldr	r3, [pc, #196]	@ (80020e8 <MX_GPIO_Init+0xf4>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	4a30      	ldr	r2, [pc, #192]	@ (80020e8 <MX_GPIO_Init+0xf4>)
 8002026:	f043 0320 	orr.w	r3, r3, #32
 800202a:	6193      	str	r3, [r2, #24]
 800202c:	4b2e      	ldr	r3, [pc, #184]	@ (80020e8 <MX_GPIO_Init+0xf4>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002038:	4b2b      	ldr	r3, [pc, #172]	@ (80020e8 <MX_GPIO_Init+0xf4>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a2a      	ldr	r2, [pc, #168]	@ (80020e8 <MX_GPIO_Init+0xf4>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b28      	ldr	r3, [pc, #160]	@ (80020e8 <MX_GPIO_Init+0xf4>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002050:	4b25      	ldr	r3, [pc, #148]	@ (80020e8 <MX_GPIO_Init+0xf4>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	4a24      	ldr	r2, [pc, #144]	@ (80020e8 <MX_GPIO_Init+0xf4>)
 8002056:	f043 0308 	orr.w	r3, r3, #8
 800205a:	6193      	str	r3, [r2, #24]
 800205c:	4b22      	ldr	r3, [pc, #136]	@ (80020e8 <MX_GPIO_Init+0xf4>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 8002068:	2200      	movs	r2, #0
 800206a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800206e:	481f      	ldr	r0, [pc, #124]	@ (80020ec <MX_GPIO_Init+0xf8>)
 8002070:	f000 fd20 	bl	8002ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8002074:	2200      	movs	r2, #0
 8002076:	2108      	movs	r1, #8
 8002078:	481d      	ldr	r0, [pc, #116]	@ (80020f0 <MX_GPIO_Init+0xfc>)
 800207a:	f000 fd1b 	bl	8002ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 800207e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002082:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002084:	2301      	movs	r3, #1
 8002086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2302      	movs	r3, #2
 800208e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8002090:	f107 0310 	add.w	r3, r7, #16
 8002094:	4619      	mov	r1, r3
 8002096:	4815      	ldr	r0, [pc, #84]	@ (80020ec <MX_GPIO_Init+0xf8>)
 8002098:	f000 fb88 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pin : buzzer_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 800209c:	2308      	movs	r3, #8
 800209e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2302      	movs	r3, #2
 80020aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 80020ac:	f107 0310 	add.w	r3, r7, #16
 80020b0:	4619      	mov	r1, r3
 80020b2:	480f      	ldr	r0, [pc, #60]	@ (80020f0 <MX_GPIO_Init+0xfc>)
 80020b4:	f000 fb7a 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 80020b8:	2310      	movs	r3, #16
 80020ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020bc:	4b0d      	ldr	r3, [pc, #52]	@ (80020f4 <MX_GPIO_Init+0x100>)
 80020be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	4619      	mov	r1, r3
 80020ca:	4809      	ldr	r0, [pc, #36]	@ (80020f0 <MX_GPIO_Init+0xfc>)
 80020cc:	f000 fb6e 	bl	80027ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	200a      	movs	r0, #10
 80020d6:	f000 fb32 	bl	800273e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80020da:	200a      	movs	r0, #10
 80020dc:	f000 fb4b 	bl	8002776 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020e0:	bf00      	nop
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40011000 	.word	0x40011000
 80020f0:	40010800 	.word	0x40010800
 80020f4:	10210000 	.word	0x10210000

080020f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020fc:	b672      	cpsid	i
}
 80020fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <Error_Handler+0x8>

08002104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800210a:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <HAL_MspInit+0x5c>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	4a14      	ldr	r2, [pc, #80]	@ (8002160 <HAL_MspInit+0x5c>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6193      	str	r3, [r2, #24]
 8002116:	4b12      	ldr	r3, [pc, #72]	@ (8002160 <HAL_MspInit+0x5c>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	4b0f      	ldr	r3, [pc, #60]	@ (8002160 <HAL_MspInit+0x5c>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a0e      	ldr	r2, [pc, #56]	@ (8002160 <HAL_MspInit+0x5c>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <HAL_MspInit+0x5c>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800213a:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <HAL_MspInit+0x60>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <HAL_MspInit+0x60>)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	40021000 	.word	0x40021000
 8002164:	40010000 	.word	0x40010000

08002168 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a15      	ldr	r2, [pc, #84]	@ (80021d8 <HAL_I2C_MspInit+0x70>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d123      	bne.n	80021d0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002188:	4b14      	ldr	r3, [pc, #80]	@ (80021dc <HAL_I2C_MspInit+0x74>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4a13      	ldr	r2, [pc, #76]	@ (80021dc <HAL_I2C_MspInit+0x74>)
 800218e:	f043 0308 	orr.w	r3, r3, #8
 8002192:	6193      	str	r3, [r2, #24]
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <HAL_I2C_MspInit+0x74>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021a0:	23c0      	movs	r3, #192	@ 0xc0
 80021a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a4:	2312      	movs	r3, #18
 80021a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021a8:	2303      	movs	r3, #3
 80021aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ac:	f107 0310 	add.w	r3, r7, #16
 80021b0:	4619      	mov	r1, r3
 80021b2:	480b      	ldr	r0, [pc, #44]	@ (80021e0 <HAL_I2C_MspInit+0x78>)
 80021b4:	f000 fafa 	bl	80027ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021b8:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <HAL_I2C_MspInit+0x74>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	4a07      	ldr	r2, [pc, #28]	@ (80021dc <HAL_I2C_MspInit+0x74>)
 80021be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021c2:	61d3      	str	r3, [r2, #28]
 80021c4:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <HAL_I2C_MspInit+0x74>)
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021d0:	bf00      	nop
 80021d2:	3720      	adds	r7, #32
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40005400 	.word	0x40005400
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40010c00 	.word	0x40010c00

080021e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 0310 	add.w	r3, r7, #16
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002270 <HAL_UART_MspInit+0x8c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d131      	bne.n	8002268 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002204:	4b1b      	ldr	r3, [pc, #108]	@ (8002274 <HAL_UART_MspInit+0x90>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	4a1a      	ldr	r2, [pc, #104]	@ (8002274 <HAL_UART_MspInit+0x90>)
 800220a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800220e:	6193      	str	r3, [r2, #24]
 8002210:	4b18      	ldr	r3, [pc, #96]	@ (8002274 <HAL_UART_MspInit+0x90>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221c:	4b15      	ldr	r3, [pc, #84]	@ (8002274 <HAL_UART_MspInit+0x90>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a14      	ldr	r2, [pc, #80]	@ (8002274 <HAL_UART_MspInit+0x90>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	6193      	str	r3, [r2, #24]
 8002228:	4b12      	ldr	r3, [pc, #72]	@ (8002274 <HAL_UART_MspInit+0x90>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002234:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002238:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	f107 0310 	add.w	r3, r7, #16
 8002246:	4619      	mov	r1, r3
 8002248:	480b      	ldr	r0, [pc, #44]	@ (8002278 <HAL_UART_MspInit+0x94>)
 800224a:	f000 faaf 	bl	80027ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800224e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002252:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225c:	f107 0310 	add.w	r3, r7, #16
 8002260:	4619      	mov	r1, r3
 8002262:	4805      	ldr	r0, [pc, #20]	@ (8002278 <HAL_UART_MspInit+0x94>)
 8002264:	f000 faa2 	bl	80027ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002268:	bf00      	nop
 800226a:	3720      	adds	r7, #32
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40013800 	.word	0x40013800
 8002274:	40021000 	.word	0x40021000
 8002278:	40010800 	.word	0x40010800

0800227c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <NMI_Handler+0x4>

08002284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002288:	bf00      	nop
 800228a:	e7fd      	b.n	8002288 <HardFault_Handler+0x4>

0800228c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <MemManage_Handler+0x4>

08002294 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <BusFault_Handler+0x4>

0800229c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <UsageFault_Handler+0x4>

080022a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022cc:	f000 f920 	bl	8002510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	max30102_on_interrupt(&max30102);
 80022d8:	4803      	ldr	r0, [pc, #12]	@ (80022e8 <EXTI4_IRQHandler+0x14>)
 80022da:	f7fe ff83 	bl	80011e4 <max30102_on_interrupt>

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 80022de:	2010      	movs	r0, #16
 80022e0:	f000 fc00 	bl	8002ae4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	200006e0 	.word	0x200006e0

080022ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	e00a      	b.n	8002314 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022fe:	f3af 8000 	nop.w
 8002302:	4601      	mov	r1, r0
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	60ba      	str	r2, [r7, #8]
 800230a:	b2ca      	uxtb	r2, r1
 800230c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3301      	adds	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	dbf0      	blt.n	80022fe <_read+0x12>
  }

  return len;
 800231c:	687b      	ldr	r3, [r7, #4]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e009      	b.n	800234c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	60ba      	str	r2, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fd25 	bl	8001d90 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3301      	adds	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	dbf1      	blt.n	8002338 <_write+0x12>
  }
  return len;
 8002354:	687b      	ldr	r3, [r7, #4]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_close>:

int _close(int file)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002384:	605a      	str	r2, [r3, #4]
  return 0;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <_isatty>:

int _isatty(int file)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800239a:	2301      	movs	r3, #1
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
	...

080023c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c8:	4a14      	ldr	r2, [pc, #80]	@ (800241c <_sbrk+0x5c>)
 80023ca:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <_sbrk+0x60>)
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d4:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <_sbrk+0x64>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023dc:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <_sbrk+0x64>)
 80023de:	4a12      	ldr	r2, [pc, #72]	@ (8002428 <_sbrk+0x68>)
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d207      	bcs.n	8002400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f0:	f002 fd10 	bl	8004e14 <__errno>
 80023f4:	4603      	mov	r3, r0
 80023f6:	220c      	movs	r2, #12
 80023f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	e009      	b.n	8002414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002400:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002406:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	4a05      	ldr	r2, [pc, #20]	@ (8002424 <_sbrk+0x64>)
 8002410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002412:	68fb      	ldr	r3, [r7, #12]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20005000 	.word	0x20005000
 8002420:	00000400 	.word	0x00000400
 8002424:	200007f0 	.word	0x200007f0
 8002428:	20000948 	.word	0x20000948

0800242c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002438:	f7ff fff8 	bl	800242c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800243c:	480b      	ldr	r0, [pc, #44]	@ (800246c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800243e:	490c      	ldr	r1, [pc, #48]	@ (8002470 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002440:	4a0c      	ldr	r2, [pc, #48]	@ (8002474 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002444:	e002      	b.n	800244c <LoopCopyDataInit>

08002446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244a:	3304      	adds	r3, #4

0800244c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800244c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002450:	d3f9      	bcc.n	8002446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002452:	4a09      	ldr	r2, [pc, #36]	@ (8002478 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002454:	4c09      	ldr	r4, [pc, #36]	@ (800247c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002458:	e001      	b.n	800245e <LoopFillZerobss>

0800245a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800245a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800245c:	3204      	adds	r2, #4

0800245e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002460:	d3fb      	bcc.n	800245a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002462:	f002 fcdd 	bl	8004e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002466:	f7ff fcb9 	bl	8001ddc <main>
  bx lr
 800246a:	4770      	bx	lr
  ldr r0, =_sdata
 800246c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002470:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002474:	080058ec 	.word	0x080058ec
  ldr r2, =_sbss
 8002478:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800247c:	20000944 	.word	0x20000944

08002480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002480:	e7fe      	b.n	8002480 <ADC1_2_IRQHandler>
	...

08002484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002488:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <HAL_Init+0x28>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a07      	ldr	r2, [pc, #28]	@ (80024ac <HAL_Init+0x28>)
 800248e:	f043 0310 	orr.w	r3, r3, #16
 8002492:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002494:	2003      	movs	r0, #3
 8002496:	f000 f947 	bl	8002728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800249a:	200f      	movs	r0, #15
 800249c:	f000 f808 	bl	80024b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a0:	f7ff fe30 	bl	8002104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40022000 	.word	0x40022000

080024b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b8:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <HAL_InitTick+0x54>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b12      	ldr	r3, [pc, #72]	@ (8002508 <HAL_InitTick+0x58>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	4619      	mov	r1, r3
 80024c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f95f 	bl	8002792 <HAL_SYSTICK_Config>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e00e      	b.n	80024fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b0f      	cmp	r3, #15
 80024e2:	d80a      	bhi.n	80024fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e4:	2200      	movs	r2, #0
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f000 f927 	bl	800273e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024f0:	4a06      	ldr	r2, [pc, #24]	@ (800250c <HAL_InitTick+0x5c>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e000      	b.n	80024fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000000 	.word	0x20000000
 8002508:	20000008 	.word	0x20000008
 800250c:	20000004 	.word	0x20000004

08002510 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002514:	4b05      	ldr	r3, [pc, #20]	@ (800252c <HAL_IncTick+0x1c>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <HAL_IncTick+0x20>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4413      	add	r3, r2
 8002520:	4a03      	ldr	r2, [pc, #12]	@ (8002530 <HAL_IncTick+0x20>)
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	20000008 	.word	0x20000008
 8002530:	200007f4 	.word	0x200007f4

08002534 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return uwTick;
 8002538:	4b02      	ldr	r3, [pc, #8]	@ (8002544 <HAL_GetTick+0x10>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	200007f4 	.word	0x200007f4

08002548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002550:	f7ff fff0 	bl	8002534 <HAL_GetTick>
 8002554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d005      	beq.n	800256e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002562:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <HAL_Delay+0x44>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800256e:	bf00      	nop
 8002570:	f7ff ffe0 	bl	8002534 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	429a      	cmp	r2, r3
 800257e:	d8f7      	bhi.n	8002570 <HAL_Delay+0x28>
  {
  }
}
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000008 	.word	0x20000008

08002590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a0:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025ac:	4013      	ands	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c2:	4a04      	ldr	r2, [pc, #16]	@ (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	60d3      	str	r3, [r2, #12]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025dc:	4b04      	ldr	r3, [pc, #16]	@ (80025f0 <__NVIC_GetPriorityGrouping+0x18>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	f003 0307 	and.w	r3, r3, #7
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	2b00      	cmp	r3, #0
 8002604:	db0b      	blt.n	800261e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	4906      	ldr	r1, [pc, #24]	@ (8002628 <__NVIC_EnableIRQ+0x34>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	2001      	movs	r0, #1
 8002616:	fa00 f202 	lsl.w	r2, r0, r2
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	e000e100 	.word	0xe000e100

0800262c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	6039      	str	r1, [r7, #0]
 8002636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	2b00      	cmp	r3, #0
 800263e:	db0a      	blt.n	8002656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	b2da      	uxtb	r2, r3
 8002644:	490c      	ldr	r1, [pc, #48]	@ (8002678 <__NVIC_SetPriority+0x4c>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	0112      	lsls	r2, r2, #4
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	440b      	add	r3, r1
 8002650:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002654:	e00a      	b.n	800266c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4908      	ldr	r1, [pc, #32]	@ (800267c <__NVIC_SetPriority+0x50>)
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	3b04      	subs	r3, #4
 8002664:	0112      	lsls	r2, r2, #4
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	440b      	add	r3, r1
 800266a:	761a      	strb	r2, [r3, #24]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	e000e100 	.word	0xe000e100
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002680:	b480      	push	{r7}
 8002682:	b089      	sub	sp, #36	@ 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f1c3 0307 	rsb	r3, r3, #7
 800269a:	2b04      	cmp	r3, #4
 800269c:	bf28      	it	cs
 800269e:	2304      	movcs	r3, #4
 80026a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3304      	adds	r3, #4
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d902      	bls.n	80026b0 <NVIC_EncodePriority+0x30>
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3b03      	subs	r3, #3
 80026ae:	e000      	b.n	80026b2 <NVIC_EncodePriority+0x32>
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	f04f 32ff 	mov.w	r2, #4294967295
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43da      	mvns	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	401a      	ands	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	43d9      	mvns	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d8:	4313      	orrs	r3, r2
         );
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3724      	adds	r7, #36	@ 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026f4:	d301      	bcc.n	80026fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00f      	b.n	800271a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002724 <SysTick_Config+0x40>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002702:	210f      	movs	r1, #15
 8002704:	f04f 30ff 	mov.w	r0, #4294967295
 8002708:	f7ff ff90 	bl	800262c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800270c:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <SysTick_Config+0x40>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002712:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <SysTick_Config+0x40>)
 8002714:	2207      	movs	r2, #7
 8002716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	e000e010 	.word	0xe000e010

08002728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff ff2d 	bl	8002590 <__NVIC_SetPriorityGrouping>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800273e:	b580      	push	{r7, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002750:	f7ff ff42 	bl	80025d8 <__NVIC_GetPriorityGrouping>
 8002754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	6978      	ldr	r0, [r7, #20]
 800275c:	f7ff ff90 	bl	8002680 <NVIC_EncodePriority>
 8002760:	4602      	mov	r2, r0
 8002762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff5f 	bl	800262c <__NVIC_SetPriority>
}
 800276e:	bf00      	nop
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	4603      	mov	r3, r0
 800277e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff35 	bl	80025f4 <__NVIC_EnableIRQ>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff ffa2 	bl	80026e4 <SysTick_Config>
 80027a0:	4603      	mov	r3, r0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b08b      	sub	sp, #44	@ 0x2c
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027ba:	2300      	movs	r3, #0
 80027bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027be:	e169      	b.n	8002a94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027c0:	2201      	movs	r2, #1
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	429a      	cmp	r2, r3
 80027da:	f040 8158 	bne.w	8002a8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4a9a      	ldr	r2, [pc, #616]	@ (8002a4c <HAL_GPIO_Init+0x2a0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d05e      	beq.n	80028a6 <HAL_GPIO_Init+0xfa>
 80027e8:	4a98      	ldr	r2, [pc, #608]	@ (8002a4c <HAL_GPIO_Init+0x2a0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d875      	bhi.n	80028da <HAL_GPIO_Init+0x12e>
 80027ee:	4a98      	ldr	r2, [pc, #608]	@ (8002a50 <HAL_GPIO_Init+0x2a4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d058      	beq.n	80028a6 <HAL_GPIO_Init+0xfa>
 80027f4:	4a96      	ldr	r2, [pc, #600]	@ (8002a50 <HAL_GPIO_Init+0x2a4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d86f      	bhi.n	80028da <HAL_GPIO_Init+0x12e>
 80027fa:	4a96      	ldr	r2, [pc, #600]	@ (8002a54 <HAL_GPIO_Init+0x2a8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d052      	beq.n	80028a6 <HAL_GPIO_Init+0xfa>
 8002800:	4a94      	ldr	r2, [pc, #592]	@ (8002a54 <HAL_GPIO_Init+0x2a8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d869      	bhi.n	80028da <HAL_GPIO_Init+0x12e>
 8002806:	4a94      	ldr	r2, [pc, #592]	@ (8002a58 <HAL_GPIO_Init+0x2ac>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d04c      	beq.n	80028a6 <HAL_GPIO_Init+0xfa>
 800280c:	4a92      	ldr	r2, [pc, #584]	@ (8002a58 <HAL_GPIO_Init+0x2ac>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d863      	bhi.n	80028da <HAL_GPIO_Init+0x12e>
 8002812:	4a92      	ldr	r2, [pc, #584]	@ (8002a5c <HAL_GPIO_Init+0x2b0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d046      	beq.n	80028a6 <HAL_GPIO_Init+0xfa>
 8002818:	4a90      	ldr	r2, [pc, #576]	@ (8002a5c <HAL_GPIO_Init+0x2b0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d85d      	bhi.n	80028da <HAL_GPIO_Init+0x12e>
 800281e:	2b12      	cmp	r3, #18
 8002820:	d82a      	bhi.n	8002878 <HAL_GPIO_Init+0xcc>
 8002822:	2b12      	cmp	r3, #18
 8002824:	d859      	bhi.n	80028da <HAL_GPIO_Init+0x12e>
 8002826:	a201      	add	r2, pc, #4	@ (adr r2, 800282c <HAL_GPIO_Init+0x80>)
 8002828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282c:	080028a7 	.word	0x080028a7
 8002830:	08002881 	.word	0x08002881
 8002834:	08002893 	.word	0x08002893
 8002838:	080028d5 	.word	0x080028d5
 800283c:	080028db 	.word	0x080028db
 8002840:	080028db 	.word	0x080028db
 8002844:	080028db 	.word	0x080028db
 8002848:	080028db 	.word	0x080028db
 800284c:	080028db 	.word	0x080028db
 8002850:	080028db 	.word	0x080028db
 8002854:	080028db 	.word	0x080028db
 8002858:	080028db 	.word	0x080028db
 800285c:	080028db 	.word	0x080028db
 8002860:	080028db 	.word	0x080028db
 8002864:	080028db 	.word	0x080028db
 8002868:	080028db 	.word	0x080028db
 800286c:	080028db 	.word	0x080028db
 8002870:	08002889 	.word	0x08002889
 8002874:	0800289d 	.word	0x0800289d
 8002878:	4a79      	ldr	r2, [pc, #484]	@ (8002a60 <HAL_GPIO_Init+0x2b4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800287e:	e02c      	b.n	80028da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	623b      	str	r3, [r7, #32]
          break;
 8002886:	e029      	b.n	80028dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	3304      	adds	r3, #4
 800288e:	623b      	str	r3, [r7, #32]
          break;
 8002890:	e024      	b.n	80028dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	3308      	adds	r3, #8
 8002898:	623b      	str	r3, [r7, #32]
          break;
 800289a:	e01f      	b.n	80028dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	330c      	adds	r3, #12
 80028a2:	623b      	str	r3, [r7, #32]
          break;
 80028a4:	e01a      	b.n	80028dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028ae:	2304      	movs	r3, #4
 80028b0:	623b      	str	r3, [r7, #32]
          break;
 80028b2:	e013      	b.n	80028dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d105      	bne.n	80028c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028bc:	2308      	movs	r3, #8
 80028be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	611a      	str	r2, [r3, #16]
          break;
 80028c6:	e009      	b.n	80028dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028c8:	2308      	movs	r3, #8
 80028ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	615a      	str	r2, [r3, #20]
          break;
 80028d2:	e003      	b.n	80028dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028d4:	2300      	movs	r3, #0
 80028d6:	623b      	str	r3, [r7, #32]
          break;
 80028d8:	e000      	b.n	80028dc <HAL_GPIO_Init+0x130>
          break;
 80028da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	2bff      	cmp	r3, #255	@ 0xff
 80028e0:	d801      	bhi.n	80028e6 <HAL_GPIO_Init+0x13a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	e001      	b.n	80028ea <HAL_GPIO_Init+0x13e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3304      	adds	r3, #4
 80028ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2bff      	cmp	r3, #255	@ 0xff
 80028f0:	d802      	bhi.n	80028f8 <HAL_GPIO_Init+0x14c>
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	e002      	b.n	80028fe <HAL_GPIO_Init+0x152>
 80028f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fa:	3b08      	subs	r3, #8
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	210f      	movs	r1, #15
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	fa01 f303 	lsl.w	r3, r1, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	401a      	ands	r2, r3
 8002910:	6a39      	ldr	r1, [r7, #32]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	fa01 f303 	lsl.w	r3, r1, r3
 8002918:	431a      	orrs	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80b1 	beq.w	8002a8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800292c:	4b4d      	ldr	r3, [pc, #308]	@ (8002a64 <HAL_GPIO_Init+0x2b8>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	4a4c      	ldr	r2, [pc, #304]	@ (8002a64 <HAL_GPIO_Init+0x2b8>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6193      	str	r3, [r2, #24]
 8002938:	4b4a      	ldr	r3, [pc, #296]	@ (8002a64 <HAL_GPIO_Init+0x2b8>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002944:	4a48      	ldr	r2, [pc, #288]	@ (8002a68 <HAL_GPIO_Init+0x2bc>)
 8002946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002948:	089b      	lsrs	r3, r3, #2
 800294a:	3302      	adds	r3, #2
 800294c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002950:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	220f      	movs	r2, #15
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4013      	ands	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a40      	ldr	r2, [pc, #256]	@ (8002a6c <HAL_GPIO_Init+0x2c0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d013      	beq.n	8002998 <HAL_GPIO_Init+0x1ec>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a3f      	ldr	r2, [pc, #252]	@ (8002a70 <HAL_GPIO_Init+0x2c4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d00d      	beq.n	8002994 <HAL_GPIO_Init+0x1e8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a3e      	ldr	r2, [pc, #248]	@ (8002a74 <HAL_GPIO_Init+0x2c8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d007      	beq.n	8002990 <HAL_GPIO_Init+0x1e4>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a3d      	ldr	r2, [pc, #244]	@ (8002a78 <HAL_GPIO_Init+0x2cc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d101      	bne.n	800298c <HAL_GPIO_Init+0x1e0>
 8002988:	2303      	movs	r3, #3
 800298a:	e006      	b.n	800299a <HAL_GPIO_Init+0x1ee>
 800298c:	2304      	movs	r3, #4
 800298e:	e004      	b.n	800299a <HAL_GPIO_Init+0x1ee>
 8002990:	2302      	movs	r3, #2
 8002992:	e002      	b.n	800299a <HAL_GPIO_Init+0x1ee>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_GPIO_Init+0x1ee>
 8002998:	2300      	movs	r3, #0
 800299a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800299c:	f002 0203 	and.w	r2, r2, #3
 80029a0:	0092      	lsls	r2, r2, #2
 80029a2:	4093      	lsls	r3, r2
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029aa:	492f      	ldr	r1, [pc, #188]	@ (8002a68 <HAL_GPIO_Init+0x2bc>)
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	089b      	lsrs	r3, r3, #2
 80029b0:	3302      	adds	r3, #2
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d006      	beq.n	80029d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029c4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a7c <HAL_GPIO_Init+0x2d0>)
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	492c      	ldr	r1, [pc, #176]	@ (8002a7c <HAL_GPIO_Init+0x2d0>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	608b      	str	r3, [r1, #8]
 80029d0:	e006      	b.n	80029e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029d2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a7c <HAL_GPIO_Init+0x2d0>)
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	43db      	mvns	r3, r3
 80029da:	4928      	ldr	r1, [pc, #160]	@ (8002a7c <HAL_GPIO_Init+0x2d0>)
 80029dc:	4013      	ands	r3, r2
 80029de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029ec:	4b23      	ldr	r3, [pc, #140]	@ (8002a7c <HAL_GPIO_Init+0x2d0>)
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	4922      	ldr	r1, [pc, #136]	@ (8002a7c <HAL_GPIO_Init+0x2d0>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60cb      	str	r3, [r1, #12]
 80029f8:	e006      	b.n	8002a08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029fa:	4b20      	ldr	r3, [pc, #128]	@ (8002a7c <HAL_GPIO_Init+0x2d0>)
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	491e      	ldr	r1, [pc, #120]	@ (8002a7c <HAL_GPIO_Init+0x2d0>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d006      	beq.n	8002a22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a14:	4b19      	ldr	r3, [pc, #100]	@ (8002a7c <HAL_GPIO_Init+0x2d0>)
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	4918      	ldr	r1, [pc, #96]	@ (8002a7c <HAL_GPIO_Init+0x2d0>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
 8002a20:	e006      	b.n	8002a30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a22:	4b16      	ldr	r3, [pc, #88]	@ (8002a7c <HAL_GPIO_Init+0x2d0>)
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	4914      	ldr	r1, [pc, #80]	@ (8002a7c <HAL_GPIO_Init+0x2d0>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d021      	beq.n	8002a80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <HAL_GPIO_Init+0x2d0>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	490e      	ldr	r1, [pc, #56]	@ (8002a7c <HAL_GPIO_Init+0x2d0>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]
 8002a48:	e021      	b.n	8002a8e <HAL_GPIO_Init+0x2e2>
 8002a4a:	bf00      	nop
 8002a4c:	10320000 	.word	0x10320000
 8002a50:	10310000 	.word	0x10310000
 8002a54:	10220000 	.word	0x10220000
 8002a58:	10210000 	.word	0x10210000
 8002a5c:	10120000 	.word	0x10120000
 8002a60:	10110000 	.word	0x10110000
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40010000 	.word	0x40010000
 8002a6c:	40010800 	.word	0x40010800
 8002a70:	40010c00 	.word	0x40010c00
 8002a74:	40011000 	.word	0x40011000
 8002a78:	40011400 	.word	0x40011400
 8002a7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a80:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab0 <HAL_GPIO_Init+0x304>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	4909      	ldr	r1, [pc, #36]	@ (8002ab0 <HAL_GPIO_Init+0x304>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	3301      	adds	r3, #1
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f47f ae8e 	bne.w	80027c0 <HAL_GPIO_Init+0x14>
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	372c      	adds	r7, #44	@ 0x2c
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	40010400 	.word	0x40010400

08002ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	807b      	strh	r3, [r7, #2]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac4:	787b      	ldrb	r3, [r7, #1]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aca:	887a      	ldrh	r2, [r7, #2]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ad0:	e003      	b.n	8002ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ad2:	887b      	ldrh	r3, [r7, #2]
 8002ad4:	041a      	lsls	r2, r3, #16
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	611a      	str	r2, [r3, #16]
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002aee:	4b08      	ldr	r3, [pc, #32]	@ (8002b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002af0:	695a      	ldr	r2, [r3, #20]
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d006      	beq.n	8002b08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002afa:	4a05      	ldr	r2, [pc, #20]	@ (8002b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f806 	bl	8002b14 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40010400 	.word	0x40010400

08002b14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e12b      	b.n	8002d92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff fb0a 	bl	8002168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2224      	movs	r2, #36	@ 0x24
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0201 	bic.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b8c:	f001 fcf8 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 8002b90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4a81      	ldr	r2, [pc, #516]	@ (8002d9c <HAL_I2C_Init+0x274>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d807      	bhi.n	8002bac <HAL_I2C_Init+0x84>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4a80      	ldr	r2, [pc, #512]	@ (8002da0 <HAL_I2C_Init+0x278>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	bf94      	ite	ls
 8002ba4:	2301      	movls	r3, #1
 8002ba6:	2300      	movhi	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	e006      	b.n	8002bba <HAL_I2C_Init+0x92>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4a7d      	ldr	r2, [pc, #500]	@ (8002da4 <HAL_I2C_Init+0x27c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	bf94      	ite	ls
 8002bb4:	2301      	movls	r3, #1
 8002bb6:	2300      	movhi	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0e7      	b.n	8002d92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4a78      	ldr	r2, [pc, #480]	@ (8002da8 <HAL_I2C_Init+0x280>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0c9b      	lsrs	r3, r3, #18
 8002bcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4a6a      	ldr	r2, [pc, #424]	@ (8002d9c <HAL_I2C_Init+0x274>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d802      	bhi.n	8002bfc <HAL_I2C_Init+0xd4>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	e009      	b.n	8002c10 <HAL_I2C_Init+0xe8>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	4a69      	ldr	r2, [pc, #420]	@ (8002dac <HAL_I2C_Init+0x284>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	099b      	lsrs	r3, r3, #6
 8002c0e:	3301      	adds	r3, #1
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	430b      	orrs	r3, r1
 8002c16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	495c      	ldr	r1, [pc, #368]	@ (8002d9c <HAL_I2C_Init+0x274>)
 8002c2c:	428b      	cmp	r3, r1
 8002c2e:	d819      	bhi.n	8002c64 <HAL_I2C_Init+0x13c>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1e59      	subs	r1, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c3e:	1c59      	adds	r1, r3, #1
 8002c40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c44:	400b      	ands	r3, r1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_I2C_Init+0x138>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1e59      	subs	r1, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5e:	e051      	b.n	8002d04 <HAL_I2C_Init+0x1dc>
 8002c60:	2304      	movs	r3, #4
 8002c62:	e04f      	b.n	8002d04 <HAL_I2C_Init+0x1dc>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d111      	bne.n	8002c90 <HAL_I2C_Init+0x168>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1e58      	subs	r0, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	440b      	add	r3, r1
 8002c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e012      	b.n	8002cb6 <HAL_I2C_Init+0x18e>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1e58      	subs	r0, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6859      	ldr	r1, [r3, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	0099      	lsls	r1, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_Init+0x196>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e022      	b.n	8002d04 <HAL_I2C_Init+0x1dc>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_I2C_Init+0x1bc>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1e58      	subs	r0, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	440b      	add	r3, r1
 8002cd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ce2:	e00f      	b.n	8002d04 <HAL_I2C_Init+0x1dc>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1e58      	subs	r0, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	0099      	lsls	r1, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	6809      	ldr	r1, [r1, #0]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69da      	ldr	r2, [r3, #28]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6911      	ldr	r1, [r2, #16]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68d2      	ldr	r2, [r2, #12]
 8002d3e:	4311      	orrs	r1, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	430b      	orrs	r3, r1
 8002d46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	000186a0 	.word	0x000186a0
 8002da0:	001e847f 	.word	0x001e847f
 8002da4:	003d08ff 	.word	0x003d08ff
 8002da8:	431bde83 	.word	0x431bde83
 8002dac:	10624dd3 	.word	0x10624dd3

08002db0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	817b      	strh	r3, [r7, #10]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dc4:	f7ff fbb6 	bl	8002534 <HAL_GetTick>
 8002dc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	f040 80e0 	bne.w	8002f98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	2319      	movs	r3, #25
 8002dde:	2201      	movs	r2, #1
 8002de0:	4970      	ldr	r1, [pc, #448]	@ (8002fa4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fdcc 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002dee:	2302      	movs	r3, #2
 8002df0:	e0d3      	b.n	8002f9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_I2C_Master_Transmit+0x50>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e0cc      	b.n	8002f9a <HAL_I2C_Master_Transmit+0x1ea>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d007      	beq.n	8002e26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2221      	movs	r2, #33	@ 0x21
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2210      	movs	r2, #16
 8002e42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	893a      	ldrh	r2, [r7, #8]
 8002e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4a50      	ldr	r2, [pc, #320]	@ (8002fa8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e68:	8979      	ldrh	r1, [r7, #10]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	6a3a      	ldr	r2, [r7, #32]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 fc36 	bl	80036e0 <I2C_MasterRequestWrite>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e08d      	b.n	8002f9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e94:	e066      	b.n	8002f64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	6a39      	ldr	r1, [r7, #32]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 fe8a 	bl	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00d      	beq.n	8002ec2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d107      	bne.n	8002ebe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ebc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e06b      	b.n	8002f9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	781a      	ldrb	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d11b      	bne.n	8002f38 <HAL_I2C_Master_Transmit+0x188>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d017      	beq.n	8002f38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0c:	781a      	ldrb	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	6a39      	ldr	r1, [r7, #32]
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 fe81 	bl	8003c44 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00d      	beq.n	8002f64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d107      	bne.n	8002f60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e01a      	b.n	8002f9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d194      	bne.n	8002e96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e000      	b.n	8002f9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f98:	2302      	movs	r3, #2
  }
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	00100002 	.word	0x00100002
 8002fa8:	ffff0000 	.word	0xffff0000

08002fac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08c      	sub	sp, #48	@ 0x30
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	460b      	mov	r3, r1
 8002fba:	817b      	strh	r3, [r7, #10]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fc4:	f7ff fab6 	bl	8002534 <HAL_GetTick>
 8002fc8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	f040 824b 	bne.w	800346e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	2319      	movs	r3, #25
 8002fde:	2201      	movs	r2, #1
 8002fe0:	497f      	ldr	r1, [pc, #508]	@ (80031e0 <HAL_I2C_Master_Receive+0x234>)
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fccc 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e23e      	b.n	8003470 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_I2C_Master_Receive+0x54>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e237      	b.n	8003470 <HAL_I2C_Master_Receive+0x4c4>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b01      	cmp	r3, #1
 8003014:	d007      	beq.n	8003026 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0201 	orr.w	r2, r2, #1
 8003024:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003034:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2222      	movs	r2, #34	@ 0x22
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2210      	movs	r2, #16
 8003042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	893a      	ldrh	r2, [r7, #8]
 8003056:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4a5f      	ldr	r2, [pc, #380]	@ (80031e4 <HAL_I2C_Master_Receive+0x238>)
 8003066:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003068:	8979      	ldrh	r1, [r7, #10]
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 fbb8 	bl	80037e4 <I2C_MasterRequestRead>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e1f8      	b.n	8003470 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003082:	2b00      	cmp	r3, #0
 8003084:	d113      	bne.n	80030ae <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	e1cc      	b.n	8003448 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d11e      	bne.n	80030f4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030c6:	b672      	cpsid	i
}
 80030c8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80030f0:	b662      	cpsie	i
}
 80030f2:	e035      	b.n	8003160 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d11e      	bne.n	800313a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800310a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800310c:	b672      	cpsid	i
}
 800310e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003134:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003136:	b662      	cpsie	i
}
 8003138:	e012      	b.n	8003160 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003148:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003160:	e172      	b.n	8003448 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003166:	2b03      	cmp	r3, #3
 8003168:	f200 811f 	bhi.w	80033aa <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003170:	2b01      	cmp	r3, #1
 8003172:	d123      	bne.n	80031bc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003176:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fdab 	bl	8003cd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e173      	b.n	8003470 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031ba:	e145      	b.n	8003448 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d152      	bne.n	800326a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ca:	2200      	movs	r2, #0
 80031cc:	4906      	ldr	r1, [pc, #24]	@ (80031e8 <HAL_I2C_Master_Receive+0x23c>)
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fbd6 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e148      	b.n	8003470 <HAL_I2C_Master_Receive+0x4c4>
 80031de:	bf00      	nop
 80031e0:	00100002 	.word	0x00100002
 80031e4:	ffff0000 	.word	0xffff0000
 80031e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80031ec:	b672      	cpsid	i
}
 80031ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003232:	b662      	cpsie	i
}
 8003234:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003268:	e0ee      	b.n	8003448 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003270:	2200      	movs	r2, #0
 8003272:	4981      	ldr	r1, [pc, #516]	@ (8003478 <HAL_I2C_Master_Receive+0x4cc>)
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 fb83 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0f5      	b.n	8003470 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003292:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003294:	b672      	cpsid	i
}
 8003296:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691a      	ldr	r2, [r3, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80032ca:	4b6c      	ldr	r3, [pc, #432]	@ (800347c <HAL_I2C_Master_Receive+0x4d0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	08db      	lsrs	r3, r3, #3
 80032d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003480 <HAL_I2C_Master_Receive+0x4d4>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	0a1a      	lsrs	r2, r3, #8
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	00da      	lsls	r2, r3, #3
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d118      	bne.n	8003322 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	f043 0220 	orr.w	r2, r3, #32
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003312:	b662      	cpsie	i
}
 8003314:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e0a6      	b.n	8003470 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b04      	cmp	r3, #4
 800332e:	d1d9      	bne.n	80032e4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800333e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003372:	b662      	cpsie	i
}
 8003374:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033a8:	e04e      	b.n	8003448 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fc90 	bl	8003cd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e058      	b.n	8003470 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d124      	bne.n	8003448 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003402:	2b03      	cmp	r3, #3
 8003404:	d107      	bne.n	8003416 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003414:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344c:	2b00      	cmp	r3, #0
 800344e:	f47f ae88 	bne.w	8003162 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	e000      	b.n	8003470 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800346e:	2302      	movs	r3, #2
  }
}
 8003470:	4618      	mov	r0, r3
 8003472:	3728      	adds	r7, #40	@ 0x28
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	00010004 	.word	0x00010004
 800347c:	20000000 	.word	0x20000000
 8003480:	14f8b589 	.word	0x14f8b589

08003484 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	@ 0x28
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	460b      	mov	r3, r1
 8003492:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003494:	f7ff f84e 	bl	8002534 <HAL_GetTick>
 8003498:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	f040 8111 	bne.w	80036ce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	2319      	movs	r3, #25
 80034b2:	2201      	movs	r2, #1
 80034b4:	4988      	ldr	r1, [pc, #544]	@ (80036d8 <HAL_I2C_IsDeviceReady+0x254>)
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 fa62 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80034c2:	2302      	movs	r3, #2
 80034c4:	e104      	b.n	80036d0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_I2C_IsDeviceReady+0x50>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e0fd      	b.n	80036d0 <HAL_I2C_IsDeviceReady+0x24c>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d007      	beq.n	80034fa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003508:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2224      	movs	r2, #36	@ 0x24
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4a70      	ldr	r2, [pc, #448]	@ (80036dc <HAL_I2C_IsDeviceReady+0x258>)
 800351c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800352c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2200      	movs	r2, #0
 8003536:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 fa20 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00d      	beq.n	8003562 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003554:	d103      	bne.n	800355e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800355c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e0b6      	b.n	80036d0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003562:	897b      	ldrh	r3, [r7, #10]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003570:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003572:	f7fe ffdf 	bl	8002534 <HAL_GetTick>
 8003576:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b02      	cmp	r3, #2
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800359c:	bf0c      	ite	eq
 800359e:	2301      	moveq	r3, #1
 80035a0:	2300      	movne	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035a6:	e025      	b.n	80035f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035a8:	f7fe ffc4 	bl	8002534 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d302      	bcc.n	80035be <HAL_I2C_IsDeviceReady+0x13a>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d103      	bne.n	80035c6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	22a0      	movs	r2, #160	@ 0xa0
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2ba0      	cmp	r3, #160	@ 0xa0
 80035fe:	d005      	beq.n	800360c <HAL_I2C_IsDeviceReady+0x188>
 8003600:	7dfb      	ldrb	r3, [r7, #23]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <HAL_I2C_IsDeviceReady+0x188>
 8003606:	7dbb      	ldrb	r3, [r7, #22]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0cd      	beq.n	80035a8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d129      	bne.n	8003676 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003630:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003632:	2300      	movs	r3, #0
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	2319      	movs	r3, #25
 800364e:	2201      	movs	r2, #1
 8003650:	4921      	ldr	r1, [pc, #132]	@ (80036d8 <HAL_I2C_IsDeviceReady+0x254>)
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f994 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e036      	b.n	80036d0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e02c      	b.n	80036d0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003684:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800368e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2319      	movs	r3, #25
 8003696:	2201      	movs	r2, #1
 8003698:	490f      	ldr	r1, [pc, #60]	@ (80036d8 <HAL_I2C_IsDeviceReady+0x254>)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f970 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e012      	b.n	80036d0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	3301      	adds	r3, #1
 80036ae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	f4ff af32 	bcc.w	800351e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80036ce:	2302      	movs	r3, #2
  }
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3720      	adds	r7, #32
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	00100002 	.word	0x00100002
 80036dc:	ffff0000 	.word	0xffff0000

080036e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	460b      	mov	r3, r1
 80036ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d006      	beq.n	800370a <I2C_MasterRequestWrite+0x2a>
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d003      	beq.n	800370a <I2C_MasterRequestWrite+0x2a>
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003708:	d108      	bne.n	800371c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e00b      	b.n	8003734 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003720:	2b12      	cmp	r3, #18
 8003722:	d107      	bne.n	8003734 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003732:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f91d 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00d      	beq.n	8003768 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003756:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800375a:	d103      	bne.n	8003764 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e035      	b.n	80037d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003770:	d108      	bne.n	8003784 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003772:	897b      	ldrh	r3, [r7, #10]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	461a      	mov	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003780:	611a      	str	r2, [r3, #16]
 8003782:	e01b      	b.n	80037bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003784:	897b      	ldrh	r3, [r7, #10]
 8003786:	11db      	asrs	r3, r3, #7
 8003788:	b2db      	uxtb	r3, r3
 800378a:	f003 0306 	and.w	r3, r3, #6
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f063 030f 	orn	r3, r3, #15
 8003794:	b2da      	uxtb	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	490e      	ldr	r1, [pc, #56]	@ (80037dc <I2C_MasterRequestWrite+0xfc>)
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f966 	bl	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e010      	b.n	80037d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037b2:	897b      	ldrh	r3, [r7, #10]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	4907      	ldr	r1, [pc, #28]	@ (80037e0 <I2C_MasterRequestWrite+0x100>)
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f956 	bl	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	00010008 	.word	0x00010008
 80037e0:	00010002 	.word	0x00010002

080037e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	460b      	mov	r3, r1
 80037f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003808:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d006      	beq.n	800381e <I2C_MasterRequestRead+0x3a>
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d003      	beq.n	800381e <I2C_MasterRequestRead+0x3a>
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800381c:	d108      	bne.n	8003830 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	e00b      	b.n	8003848 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003834:	2b11      	cmp	r3, #17
 8003836:	d107      	bne.n	8003848 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003846:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 f893 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00d      	beq.n	800387c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800386e:	d103      	bne.n	8003878 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003876:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e079      	b.n	8003970 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003884:	d108      	bne.n	8003898 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003886:	897b      	ldrh	r3, [r7, #10]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	b2da      	uxtb	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	611a      	str	r2, [r3, #16]
 8003896:	e05f      	b.n	8003958 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003898:	897b      	ldrh	r3, [r7, #10]
 800389a:	11db      	asrs	r3, r3, #7
 800389c:	b2db      	uxtb	r3, r3
 800389e:	f003 0306 	and.w	r3, r3, #6
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f063 030f 	orn	r3, r3, #15
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	4930      	ldr	r1, [pc, #192]	@ (8003978 <I2C_MasterRequestRead+0x194>)
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f8dc 	bl	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e054      	b.n	8003970 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038c6:	897b      	ldrh	r3, [r7, #10]
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4929      	ldr	r1, [pc, #164]	@ (800397c <I2C_MasterRequestRead+0x198>)
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f8cc 	bl	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e044      	b.n	8003970 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800390a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f831 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00d      	beq.n	8003940 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003932:	d103      	bne.n	800393c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800393a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e017      	b.n	8003970 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003940:	897b      	ldrh	r3, [r7, #10]
 8003942:	11db      	asrs	r3, r3, #7
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f003 0306 	and.w	r3, r3, #6
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f063 030e 	orn	r3, r3, #14
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4907      	ldr	r1, [pc, #28]	@ (800397c <I2C_MasterRequestRead+0x198>)
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f888 	bl	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	00010008 	.word	0x00010008
 800397c:	00010002 	.word	0x00010002

08003980 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	4613      	mov	r3, r2
 800398e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003990:	e048      	b.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003998:	d044      	beq.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399a:	f7fe fdcb 	bl	8002534 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d302      	bcc.n	80039b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d139      	bne.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	0c1b      	lsrs	r3, r3, #16
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d10d      	bne.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	43da      	mvns	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4013      	ands	r3, r2
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	e00c      	b.n	80039f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	43da      	mvns	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	4013      	ands	r3, r2
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf0c      	ite	eq
 80039e8:	2301      	moveq	r3, #1
 80039ea:	2300      	movne	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d116      	bne.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e023      	b.n	8003a6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	0c1b      	lsrs	r3, r3, #16
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d10d      	bne.n	8003a4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	43da      	mvns	r2, r3
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf0c      	ite	eq
 8003a40:	2301      	moveq	r3, #1
 8003a42:	2300      	movne	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	e00c      	b.n	8003a64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	43da      	mvns	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	4013      	ands	r3, r2
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d093      	beq.n	8003992 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a82:	e071      	b.n	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a92:	d123      	bne.n	8003adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aa2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003aac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	f043 0204 	orr.w	r2, r3, #4
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e067      	b.n	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d041      	beq.n	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae4:	f7fe fd26 	bl	8002534 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d302      	bcc.n	8003afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d136      	bne.n	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d10c      	bne.n	8003b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf14      	ite	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	2300      	moveq	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	e00b      	b.n	8003b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	43da      	mvns	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf14      	ite	ne
 8003b30:	2301      	movne	r3, #1
 8003b32:	2300      	moveq	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d016      	beq.n	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b54:	f043 0220 	orr.w	r2, r3, #32
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e021      	b.n	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	0c1b      	lsrs	r3, r3, #16
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d10c      	bne.n	8003b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	43da      	mvns	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf14      	ite	ne
 8003b84:	2301      	movne	r3, #1
 8003b86:	2300      	moveq	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	e00b      	b.n	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	43da      	mvns	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4013      	ands	r3, r2
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bf14      	ite	ne
 8003b9e:	2301      	movne	r3, #1
 8003ba0:	2300      	moveq	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f47f af6d 	bne.w	8003a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bc0:	e034      	b.n	8003c2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f8e3 	bl	8003d8e <I2C_IsAcknowledgeFailed>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e034      	b.n	8003c3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d028      	beq.n	8003c2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bda:	f7fe fcab 	bl	8002534 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d302      	bcc.n	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d11d      	bne.n	8003c2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfa:	2b80      	cmp	r3, #128	@ 0x80
 8003bfc:	d016      	beq.n	8003c2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c18:	f043 0220 	orr.w	r2, r3, #32
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e007      	b.n	8003c3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c36:	2b80      	cmp	r3, #128	@ 0x80
 8003c38:	d1c3      	bne.n	8003bc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c50:	e034      	b.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f89b 	bl	8003d8e <I2C_IsAcknowledgeFailed>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e034      	b.n	8003ccc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d028      	beq.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6a:	f7fe fc63 	bl	8002534 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d302      	bcc.n	8003c80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d11d      	bne.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d016      	beq.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca8:	f043 0220 	orr.w	r2, r3, #32
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e007      	b.n	8003ccc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d1c3      	bne.n	8003c52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ce0:	e049      	b.n	8003d76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d119      	bne.n	8003d24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0210 	mvn.w	r2, #16
 8003cf8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e030      	b.n	8003d86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d24:	f7fe fc06 	bl	8002534 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d302      	bcc.n	8003d3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d11d      	bne.n	8003d76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d44:	2b40      	cmp	r3, #64	@ 0x40
 8003d46:	d016      	beq.n	8003d76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	f043 0220 	orr.w	r2, r3, #32
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e007      	b.n	8003d86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d80:	2b40      	cmp	r3, #64	@ 0x40
 8003d82:	d1ae      	bne.n	8003ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da4:	d11b      	bne.n	8003dde <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dca:	f043 0204 	orr.w	r2, r3, #4
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr
	...

08003dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e272      	b.n	80042e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8087 	beq.w	8003f1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e0c:	4b92      	ldr	r3, [pc, #584]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 030c 	and.w	r3, r3, #12
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d00c      	beq.n	8003e32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e18:	4b8f      	ldr	r3, [pc, #572]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 030c 	and.w	r3, r3, #12
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d112      	bne.n	8003e4a <HAL_RCC_OscConfig+0x5e>
 8003e24:	4b8c      	ldr	r3, [pc, #560]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e30:	d10b      	bne.n	8003e4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e32:	4b89      	ldr	r3, [pc, #548]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d06c      	beq.n	8003f18 <HAL_RCC_OscConfig+0x12c>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d168      	bne.n	8003f18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e24c      	b.n	80042e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e52:	d106      	bne.n	8003e62 <HAL_RCC_OscConfig+0x76>
 8003e54:	4b80      	ldr	r3, [pc, #512]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a7f      	ldr	r2, [pc, #508]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003e5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	e02e      	b.n	8003ec0 <HAL_RCC_OscConfig+0xd4>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x98>
 8003e6a:	4b7b      	ldr	r3, [pc, #492]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a7a      	ldr	r2, [pc, #488]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	4b78      	ldr	r3, [pc, #480]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a77      	ldr	r2, [pc, #476]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003e7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	e01d      	b.n	8003ec0 <HAL_RCC_OscConfig+0xd4>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCC_OscConfig+0xbc>
 8003e8e:	4b72      	ldr	r3, [pc, #456]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a71      	ldr	r2, [pc, #452]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	4b6f      	ldr	r3, [pc, #444]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a6e      	ldr	r2, [pc, #440]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	e00b      	b.n	8003ec0 <HAL_RCC_OscConfig+0xd4>
 8003ea8:	4b6b      	ldr	r3, [pc, #428]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a6a      	ldr	r2, [pc, #424]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	4b68      	ldr	r3, [pc, #416]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a67      	ldr	r2, [pc, #412]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ebe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d013      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7fe fb34 	bl	8002534 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed0:	f7fe fb30 	bl	8002534 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	@ 0x64
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e200      	b.n	80042e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0xe4>
 8003eee:	e014      	b.n	8003f1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7fe fb20 	bl	8002534 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef8:	f7fe fb1c 	bl	8002534 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b64      	cmp	r3, #100	@ 0x64
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e1ec      	b.n	80042e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f0a:	4b53      	ldr	r3, [pc, #332]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x10c>
 8003f16:	e000      	b.n	8003f1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d063      	beq.n	8003fee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f26:	4b4c      	ldr	r3, [pc, #304]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00b      	beq.n	8003f4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f32:	4b49      	ldr	r3, [pc, #292]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d11c      	bne.n	8003f78 <HAL_RCC_OscConfig+0x18c>
 8003f3e:	4b46      	ldr	r3, [pc, #280]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d116      	bne.n	8003f78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f4a:	4b43      	ldr	r3, [pc, #268]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <HAL_RCC_OscConfig+0x176>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d001      	beq.n	8003f62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e1c0      	b.n	80042e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f62:	4b3d      	ldr	r3, [pc, #244]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4939      	ldr	r1, [pc, #228]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f76:	e03a      	b.n	8003fee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d020      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f80:	4b36      	ldr	r3, [pc, #216]	@ (800405c <HAL_RCC_OscConfig+0x270>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f86:	f7fe fad5 	bl	8002534 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f8e:	f7fe fad1 	bl	8002534 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e1a1      	b.n	80042e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0f0      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fac:	4b2a      	ldr	r3, [pc, #168]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4927      	ldr	r1, [pc, #156]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	600b      	str	r3, [r1, #0]
 8003fc0:	e015      	b.n	8003fee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fc2:	4b26      	ldr	r3, [pc, #152]	@ (800405c <HAL_RCC_OscConfig+0x270>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7fe fab4 	bl	8002534 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd0:	f7fe fab0 	bl	8002534 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e180      	b.n	80042e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d03a      	beq.n	8004070 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d019      	beq.n	8004036 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004002:	4b17      	ldr	r3, [pc, #92]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8004004:	2201      	movs	r2, #1
 8004006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004008:	f7fe fa94 	bl	8002534 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004010:	f7fe fa90 	bl	8002534 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e160      	b.n	80042e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004022:	4b0d      	ldr	r3, [pc, #52]	@ (8004058 <HAL_RCC_OscConfig+0x26c>)
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800402e:	2001      	movs	r0, #1
 8004030:	f000 face 	bl	80045d0 <RCC_Delay>
 8004034:	e01c      	b.n	8004070 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004036:	4b0a      	ldr	r3, [pc, #40]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800403c:	f7fe fa7a 	bl	8002534 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004042:	e00f      	b.n	8004064 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004044:	f7fe fa76 	bl	8002534 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d908      	bls.n	8004064 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e146      	b.n	80042e4 <HAL_RCC_OscConfig+0x4f8>
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000
 800405c:	42420000 	.word	0x42420000
 8004060:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004064:	4b92      	ldr	r3, [pc, #584]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e9      	bne.n	8004044 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 80a6 	beq.w	80041ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800407e:	2300      	movs	r3, #0
 8004080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004082:	4b8b      	ldr	r3, [pc, #556]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10d      	bne.n	80040aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800408e:	4b88      	ldr	r3, [pc, #544]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	4a87      	ldr	r2, [pc, #540]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 8004094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004098:	61d3      	str	r3, [r2, #28]
 800409a:	4b85      	ldr	r3, [pc, #532]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a2:	60bb      	str	r3, [r7, #8]
 80040a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040a6:	2301      	movs	r3, #1
 80040a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040aa:	4b82      	ldr	r3, [pc, #520]	@ (80042b4 <HAL_RCC_OscConfig+0x4c8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d118      	bne.n	80040e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040b6:	4b7f      	ldr	r3, [pc, #508]	@ (80042b4 <HAL_RCC_OscConfig+0x4c8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a7e      	ldr	r2, [pc, #504]	@ (80042b4 <HAL_RCC_OscConfig+0x4c8>)
 80040bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c2:	f7fe fa37 	bl	8002534 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ca:	f7fe fa33 	bl	8002534 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b64      	cmp	r3, #100	@ 0x64
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e103      	b.n	80042e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040dc:	4b75      	ldr	r3, [pc, #468]	@ (80042b4 <HAL_RCC_OscConfig+0x4c8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d106      	bne.n	80040fe <HAL_RCC_OscConfig+0x312>
 80040f0:	4b6f      	ldr	r3, [pc, #444]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	4a6e      	ldr	r2, [pc, #440]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	6213      	str	r3, [r2, #32]
 80040fc:	e02d      	b.n	800415a <HAL_RCC_OscConfig+0x36e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10c      	bne.n	8004120 <HAL_RCC_OscConfig+0x334>
 8004106:	4b6a      	ldr	r3, [pc, #424]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	4a69      	ldr	r2, [pc, #420]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	6213      	str	r3, [r2, #32]
 8004112:	4b67      	ldr	r3, [pc, #412]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	4a66      	ldr	r2, [pc, #408]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 8004118:	f023 0304 	bic.w	r3, r3, #4
 800411c:	6213      	str	r3, [r2, #32]
 800411e:	e01c      	b.n	800415a <HAL_RCC_OscConfig+0x36e>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	2b05      	cmp	r3, #5
 8004126:	d10c      	bne.n	8004142 <HAL_RCC_OscConfig+0x356>
 8004128:	4b61      	ldr	r3, [pc, #388]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	4a60      	ldr	r2, [pc, #384]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 800412e:	f043 0304 	orr.w	r3, r3, #4
 8004132:	6213      	str	r3, [r2, #32]
 8004134:	4b5e      	ldr	r3, [pc, #376]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	4a5d      	ldr	r2, [pc, #372]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	6213      	str	r3, [r2, #32]
 8004140:	e00b      	b.n	800415a <HAL_RCC_OscConfig+0x36e>
 8004142:	4b5b      	ldr	r3, [pc, #364]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	4a5a      	ldr	r2, [pc, #360]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 8004148:	f023 0301 	bic.w	r3, r3, #1
 800414c:	6213      	str	r3, [r2, #32]
 800414e:	4b58      	ldr	r3, [pc, #352]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	4a57      	ldr	r2, [pc, #348]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 8004154:	f023 0304 	bic.w	r3, r3, #4
 8004158:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d015      	beq.n	800418e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004162:	f7fe f9e7 	bl	8002534 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004168:	e00a      	b.n	8004180 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416a:	f7fe f9e3 	bl	8002534 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004178:	4293      	cmp	r3, r2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e0b1      	b.n	80042e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004180:	4b4b      	ldr	r3, [pc, #300]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0ee      	beq.n	800416a <HAL_RCC_OscConfig+0x37e>
 800418c:	e014      	b.n	80041b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418e:	f7fe f9d1 	bl	8002534 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004194:	e00a      	b.n	80041ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004196:	f7fe f9cd 	bl	8002534 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e09b      	b.n	80042e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ac:	4b40      	ldr	r3, [pc, #256]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1ee      	bne.n	8004196 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041b8:	7dfb      	ldrb	r3, [r7, #23]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d105      	bne.n	80041ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041be:	4b3c      	ldr	r3, [pc, #240]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	4a3b      	ldr	r2, [pc, #236]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 80041c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 8087 	beq.w	80042e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041d4:	4b36      	ldr	r3, [pc, #216]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 030c 	and.w	r3, r3, #12
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d061      	beq.n	80042a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d146      	bne.n	8004276 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e8:	4b33      	ldr	r3, [pc, #204]	@ (80042b8 <HAL_RCC_OscConfig+0x4cc>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ee:	f7fe f9a1 	bl	8002534 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f6:	f7fe f99d 	bl	8002534 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e06d      	b.n	80042e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004208:	4b29      	ldr	r3, [pc, #164]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1f0      	bne.n	80041f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800421c:	d108      	bne.n	8004230 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800421e:	4b24      	ldr	r3, [pc, #144]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	4921      	ldr	r1, [pc, #132]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 800422c:	4313      	orrs	r3, r2
 800422e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004230:	4b1f      	ldr	r3, [pc, #124]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a19      	ldr	r1, [r3, #32]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	430b      	orrs	r3, r1
 8004242:	491b      	ldr	r1, [pc, #108]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 8004244:	4313      	orrs	r3, r2
 8004246:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004248:	4b1b      	ldr	r3, [pc, #108]	@ (80042b8 <HAL_RCC_OscConfig+0x4cc>)
 800424a:	2201      	movs	r2, #1
 800424c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424e:	f7fe f971 	bl	8002534 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004256:	f7fe f96d 	bl	8002534 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e03d      	b.n	80042e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004268:	4b11      	ldr	r3, [pc, #68]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <HAL_RCC_OscConfig+0x46a>
 8004274:	e035      	b.n	80042e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004276:	4b10      	ldr	r3, [pc, #64]	@ (80042b8 <HAL_RCC_OscConfig+0x4cc>)
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fe f95a 	bl	8002534 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004284:	f7fe f956 	bl	8002534 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e026      	b.n	80042e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004296:	4b06      	ldr	r3, [pc, #24]	@ (80042b0 <HAL_RCC_OscConfig+0x4c4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x498>
 80042a2:	e01e      	b.n	80042e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d107      	bne.n	80042bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e019      	b.n	80042e4 <HAL_RCC_OscConfig+0x4f8>
 80042b0:	40021000 	.word	0x40021000
 80042b4:	40007000 	.word	0x40007000
 80042b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042bc:	4b0b      	ldr	r3, [pc, #44]	@ (80042ec <HAL_RCC_OscConfig+0x500>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d106      	bne.n	80042de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042da:	429a      	cmp	r2, r3
 80042dc:	d001      	beq.n	80042e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40021000 	.word	0x40021000

080042f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0d0      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004304:	4b6a      	ldr	r3, [pc, #424]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d910      	bls.n	8004334 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004312:	4b67      	ldr	r3, [pc, #412]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 0207 	bic.w	r2, r3, #7
 800431a:	4965      	ldr	r1, [pc, #404]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c0>)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	4313      	orrs	r3, r2
 8004320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	4b63      	ldr	r3, [pc, #396]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0b8      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d020      	beq.n	8004382 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800434c:	4b59      	ldr	r3, [pc, #356]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	4a58      	ldr	r2, [pc, #352]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004352:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004356:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004364:	4b53      	ldr	r3, [pc, #332]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	4a52      	ldr	r2, [pc, #328]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 800436a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800436e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004370:	4b50      	ldr	r3, [pc, #320]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	494d      	ldr	r1, [pc, #308]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 800437e:	4313      	orrs	r3, r2
 8004380:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d040      	beq.n	8004410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	4b47      	ldr	r3, [pc, #284]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d115      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e07f      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d107      	bne.n	80043be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ae:	4b41      	ldr	r3, [pc, #260]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e073      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043be:	4b3d      	ldr	r3, [pc, #244]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e06b      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ce:	4b39      	ldr	r3, [pc, #228]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f023 0203 	bic.w	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4936      	ldr	r1, [pc, #216]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e0:	f7fe f8a8 	bl	8002534 <HAL_GetTick>
 80043e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e6:	e00a      	b.n	80043fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e8:	f7fe f8a4 	bl	8002534 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e053      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fe:	4b2d      	ldr	r3, [pc, #180]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f003 020c 	and.w	r2, r3, #12
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	429a      	cmp	r2, r3
 800440e:	d1eb      	bne.n	80043e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004410:	4b27      	ldr	r3, [pc, #156]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d210      	bcs.n	8004440 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441e:	4b24      	ldr	r3, [pc, #144]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f023 0207 	bic.w	r2, r3, #7
 8004426:	4922      	ldr	r1, [pc, #136]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	4313      	orrs	r3, r2
 800442c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800442e:	4b20      	ldr	r3, [pc, #128]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d001      	beq.n	8004440 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e032      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800444c:	4b19      	ldr	r3, [pc, #100]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4916      	ldr	r1, [pc, #88]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 800445a:	4313      	orrs	r3, r2
 800445c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800446a:	4b12      	ldr	r3, [pc, #72]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	490e      	ldr	r1, [pc, #56]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 800447a:	4313      	orrs	r3, r2
 800447c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800447e:	f000 f821 	bl	80044c4 <HAL_RCC_GetSysClockFreq>
 8004482:	4602      	mov	r2, r0
 8004484:	4b0b      	ldr	r3, [pc, #44]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	490a      	ldr	r1, [pc, #40]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004490:	5ccb      	ldrb	r3, [r1, r3]
 8004492:	fa22 f303 	lsr.w	r3, r2, r3
 8004496:	4a09      	ldr	r2, [pc, #36]	@ (80044bc <HAL_RCC_ClockConfig+0x1cc>)
 8004498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800449a:	4b09      	ldr	r3, [pc, #36]	@ (80044c0 <HAL_RCC_ClockConfig+0x1d0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fe f806 	bl	80024b0 <HAL_InitTick>

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40022000 	.word	0x40022000
 80044b4:	40021000 	.word	0x40021000
 80044b8:	08005884 	.word	0x08005884
 80044bc:	20000000 	.word	0x20000000
 80044c0:	20000004 	.word	0x20000004

080044c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	2300      	movs	r3, #0
 80044d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044de:	4b1e      	ldr	r3, [pc, #120]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x94>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d002      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0x30>
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d003      	beq.n	80044fa <HAL_RCC_GetSysClockFreq+0x36>
 80044f2:	e027      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044f4:	4b19      	ldr	r3, [pc, #100]	@ (800455c <HAL_RCC_GetSysClockFreq+0x98>)
 80044f6:	613b      	str	r3, [r7, #16]
      break;
 80044f8:	e027      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	0c9b      	lsrs	r3, r3, #18
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	4a17      	ldr	r2, [pc, #92]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004504:	5cd3      	ldrb	r3, [r2, r3]
 8004506:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d010      	beq.n	8004534 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004512:	4b11      	ldr	r3, [pc, #68]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x94>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	0c5b      	lsrs	r3, r3, #17
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	4a11      	ldr	r2, [pc, #68]	@ (8004564 <HAL_RCC_GetSysClockFreq+0xa0>)
 800451e:	5cd3      	ldrb	r3, [r2, r3]
 8004520:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a0d      	ldr	r2, [pc, #52]	@ (800455c <HAL_RCC_GetSysClockFreq+0x98>)
 8004526:	fb03 f202 	mul.w	r2, r3, r2
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e004      	b.n	800453e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a0c      	ldr	r2, [pc, #48]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004538:	fb02 f303 	mul.w	r3, r2, r3
 800453c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	613b      	str	r3, [r7, #16]
      break;
 8004542:	e002      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004544:	4b05      	ldr	r3, [pc, #20]	@ (800455c <HAL_RCC_GetSysClockFreq+0x98>)
 8004546:	613b      	str	r3, [r7, #16]
      break;
 8004548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800454a:	693b      	ldr	r3, [r7, #16]
}
 800454c:	4618      	mov	r0, r3
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40021000 	.word	0x40021000
 800455c:	007a1200 	.word	0x007a1200
 8004560:	0800589c 	.word	0x0800589c
 8004564:	080058ac 	.word	0x080058ac
 8004568:	003d0900 	.word	0x003d0900

0800456c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004570:	4b02      	ldr	r3, [pc, #8]	@ (800457c <HAL_RCC_GetHCLKFreq+0x10>)
 8004572:	681b      	ldr	r3, [r3, #0]
}
 8004574:	4618      	mov	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr
 800457c:	20000000 	.word	0x20000000

08004580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004584:	f7ff fff2 	bl	800456c <HAL_RCC_GetHCLKFreq>
 8004588:	4602      	mov	r2, r0
 800458a:	4b05      	ldr	r3, [pc, #20]	@ (80045a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	0a1b      	lsrs	r3, r3, #8
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	4903      	ldr	r1, [pc, #12]	@ (80045a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004596:	5ccb      	ldrb	r3, [r1, r3]
 8004598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800459c:	4618      	mov	r0, r3
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40021000 	.word	0x40021000
 80045a4:	08005894 	.word	0x08005894

080045a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045ac:	f7ff ffde 	bl	800456c <HAL_RCC_GetHCLKFreq>
 80045b0:	4602      	mov	r2, r0
 80045b2:	4b05      	ldr	r3, [pc, #20]	@ (80045c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	0adb      	lsrs	r3, r3, #11
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	4903      	ldr	r1, [pc, #12]	@ (80045cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045be:	5ccb      	ldrb	r3, [r1, r3]
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40021000 	.word	0x40021000
 80045cc:	08005894 	.word	0x08005894

080045d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004604 <RCC_Delay+0x34>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004608 <RCC_Delay+0x38>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	0a5b      	lsrs	r3, r3, #9
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	fb02 f303 	mul.w	r3, r2, r3
 80045ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045ec:	bf00      	nop
  }
  while (Delay --);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1e5a      	subs	r2, r3, #1
 80045f2:	60fa      	str	r2, [r7, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1f9      	bne.n	80045ec <RCC_Delay+0x1c>
}
 80045f8:	bf00      	nop
 80045fa:	bf00      	nop
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr
 8004604:	20000000 	.word	0x20000000
 8004608:	10624dd3 	.word	0x10624dd3

0800460c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e042      	b.n	80046a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fd fdd6 	bl	80021e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2224      	movs	r2, #36	@ 0x24
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800464e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f91d 	bl	8004890 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	@ 0x28
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	4613      	mov	r3, r2
 80046ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d16d      	bne.n	80047a8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_UART_Transmit+0x2c>
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e066      	b.n	80047aa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2221      	movs	r2, #33	@ 0x21
 80046e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ea:	f7fd ff23 	bl	8002534 <HAL_GetTick>
 80046ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	88fa      	ldrh	r2, [r7, #6]
 80046f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	88fa      	ldrh	r2, [r7, #6]
 80046fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004704:	d108      	bne.n	8004718 <HAL_UART_Transmit+0x6c>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	e003      	b.n	8004720 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800471c:	2300      	movs	r3, #0
 800471e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004720:	e02a      	b.n	8004778 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2200      	movs	r2, #0
 800472a:	2180      	movs	r1, #128	@ 0x80
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f840 	bl	80047b2 <UART_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e036      	b.n	80047aa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10b      	bne.n	800475a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004750:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	3302      	adds	r3, #2
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	e007      	b.n	800476a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	3301      	adds	r3, #1
 8004768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1cf      	bne.n	8004722 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2200      	movs	r2, #0
 800478a:	2140      	movs	r1, #64	@ 0x40
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f810 	bl	80047b2 <UART_WaitOnFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e006      	b.n	80047aa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80047a8:	2302      	movs	r3, #2
  }
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3720      	adds	r7, #32
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b090      	sub	sp, #64	@ 0x40
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	4613      	mov	r3, r2
 80047c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c2:	e050      	b.n	8004866 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d04c      	beq.n	8004866 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d2:	f7fd feaf 	bl	8002534 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047de:	429a      	cmp	r2, r3
 80047e0:	d241      	bcs.n	8004866 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	330c      	adds	r3, #12
 80047e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80047f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	330c      	adds	r3, #12
 8004800:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004802:	637a      	str	r2, [r7, #52]	@ 0x34
 8004804:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004808:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e5      	bne.n	80047e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3314      	adds	r3, #20
 800481c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	613b      	str	r3, [r7, #16]
   return(result);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f023 0301 	bic.w	r3, r3, #1
 800482c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3314      	adds	r3, #20
 8004834:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004836:	623a      	str	r2, [r7, #32]
 8004838:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	69f9      	ldr	r1, [r7, #28]
 800483c:	6a3a      	ldr	r2, [r7, #32]
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	61bb      	str	r3, [r7, #24]
   return(result);
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e5      	bne.n	8004816 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e00f      	b.n	8004886 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4013      	ands	r3, r2
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	429a      	cmp	r2, r3
 8004874:	bf0c      	ite	eq
 8004876:	2301      	moveq	r3, #1
 8004878:	2300      	movne	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	429a      	cmp	r2, r3
 8004882:	d09f      	beq.n	80047c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3740      	adds	r7, #64	@ 0x40
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80048ca:	f023 030c 	bic.w	r3, r3, #12
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	430b      	orrs	r3, r1
 80048d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699a      	ldr	r2, [r3, #24]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a2c      	ldr	r2, [pc, #176]	@ (80049a4 <UART_SetConfig+0x114>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d103      	bne.n	8004900 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048f8:	f7ff fe56 	bl	80045a8 <HAL_RCC_GetPCLK2Freq>
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	e002      	b.n	8004906 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004900:	f7ff fe3e 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 8004904:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	009a      	lsls	r2, r3, #2
 8004910:	441a      	add	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	fbb2 f3f3 	udiv	r3, r2, r3
 800491c:	4a22      	ldr	r2, [pc, #136]	@ (80049a8 <UART_SetConfig+0x118>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	0119      	lsls	r1, r3, #4
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	009a      	lsls	r2, r3, #2
 8004930:	441a      	add	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	fbb2 f2f3 	udiv	r2, r2, r3
 800493c:	4b1a      	ldr	r3, [pc, #104]	@ (80049a8 <UART_SetConfig+0x118>)
 800493e:	fba3 0302 	umull	r0, r3, r3, r2
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	2064      	movs	r0, #100	@ 0x64
 8004946:	fb00 f303 	mul.w	r3, r0, r3
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	3332      	adds	r3, #50	@ 0x32
 8004950:	4a15      	ldr	r2, [pc, #84]	@ (80049a8 <UART_SetConfig+0x118>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800495c:	4419      	add	r1, r3
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	009a      	lsls	r2, r3, #2
 8004968:	441a      	add	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	fbb2 f2f3 	udiv	r2, r2, r3
 8004974:	4b0c      	ldr	r3, [pc, #48]	@ (80049a8 <UART_SetConfig+0x118>)
 8004976:	fba3 0302 	umull	r0, r3, r3, r2
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	2064      	movs	r0, #100	@ 0x64
 800497e:	fb00 f303 	mul.w	r3, r0, r3
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	3332      	adds	r3, #50	@ 0x32
 8004988:	4a07      	ldr	r2, [pc, #28]	@ (80049a8 <UART_SetConfig+0x118>)
 800498a:	fba2 2303 	umull	r2, r3, r2, r3
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	f003 020f 	and.w	r2, r3, #15
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	440a      	add	r2, r1
 800499a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800499c:	bf00      	nop
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40013800 	.word	0x40013800
 80049a8:	51eb851f 	.word	0x51eb851f

080049ac <malloc>:
 80049ac:	4b02      	ldr	r3, [pc, #8]	@ (80049b8 <malloc+0xc>)
 80049ae:	4601      	mov	r1, r0
 80049b0:	6818      	ldr	r0, [r3, #0]
 80049b2:	f000 b82d 	b.w	8004a10 <_malloc_r>
 80049b6:	bf00      	nop
 80049b8:	20000018 	.word	0x20000018

080049bc <free>:
 80049bc:	4b02      	ldr	r3, [pc, #8]	@ (80049c8 <free+0xc>)
 80049be:	4601      	mov	r1, r0
 80049c0:	6818      	ldr	r0, [r3, #0]
 80049c2:	f000 ba63 	b.w	8004e8c <_free_r>
 80049c6:	bf00      	nop
 80049c8:	20000018 	.word	0x20000018

080049cc <sbrk_aligned>:
 80049cc:	b570      	push	{r4, r5, r6, lr}
 80049ce:	4e0f      	ldr	r6, [pc, #60]	@ (8004a0c <sbrk_aligned+0x40>)
 80049d0:	460c      	mov	r4, r1
 80049d2:	6831      	ldr	r1, [r6, #0]
 80049d4:	4605      	mov	r5, r0
 80049d6:	b911      	cbnz	r1, 80049de <sbrk_aligned+0x12>
 80049d8:	f000 f9fa 	bl	8004dd0 <_sbrk_r>
 80049dc:	6030      	str	r0, [r6, #0]
 80049de:	4621      	mov	r1, r4
 80049e0:	4628      	mov	r0, r5
 80049e2:	f000 f9f5 	bl	8004dd0 <_sbrk_r>
 80049e6:	1c43      	adds	r3, r0, #1
 80049e8:	d103      	bne.n	80049f2 <sbrk_aligned+0x26>
 80049ea:	f04f 34ff 	mov.w	r4, #4294967295
 80049ee:	4620      	mov	r0, r4
 80049f0:	bd70      	pop	{r4, r5, r6, pc}
 80049f2:	1cc4      	adds	r4, r0, #3
 80049f4:	f024 0403 	bic.w	r4, r4, #3
 80049f8:	42a0      	cmp	r0, r4
 80049fa:	d0f8      	beq.n	80049ee <sbrk_aligned+0x22>
 80049fc:	1a21      	subs	r1, r4, r0
 80049fe:	4628      	mov	r0, r5
 8004a00:	f000 f9e6 	bl	8004dd0 <_sbrk_r>
 8004a04:	3001      	adds	r0, #1
 8004a06:	d1f2      	bne.n	80049ee <sbrk_aligned+0x22>
 8004a08:	e7ef      	b.n	80049ea <sbrk_aligned+0x1e>
 8004a0a:	bf00      	nop
 8004a0c:	200007f8 	.word	0x200007f8

08004a10 <_malloc_r>:
 8004a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a14:	1ccd      	adds	r5, r1, #3
 8004a16:	f025 0503 	bic.w	r5, r5, #3
 8004a1a:	3508      	adds	r5, #8
 8004a1c:	2d0c      	cmp	r5, #12
 8004a1e:	bf38      	it	cc
 8004a20:	250c      	movcc	r5, #12
 8004a22:	2d00      	cmp	r5, #0
 8004a24:	4606      	mov	r6, r0
 8004a26:	db01      	blt.n	8004a2c <_malloc_r+0x1c>
 8004a28:	42a9      	cmp	r1, r5
 8004a2a:	d904      	bls.n	8004a36 <_malloc_r+0x26>
 8004a2c:	230c      	movs	r3, #12
 8004a2e:	6033      	str	r3, [r6, #0]
 8004a30:	2000      	movs	r0, #0
 8004a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b0c <_malloc_r+0xfc>
 8004a3a:	f000 f869 	bl	8004b10 <__malloc_lock>
 8004a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a42:	461c      	mov	r4, r3
 8004a44:	bb44      	cbnz	r4, 8004a98 <_malloc_r+0x88>
 8004a46:	4629      	mov	r1, r5
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f7ff ffbf 	bl	80049cc <sbrk_aligned>
 8004a4e:	1c43      	adds	r3, r0, #1
 8004a50:	4604      	mov	r4, r0
 8004a52:	d158      	bne.n	8004b06 <_malloc_r+0xf6>
 8004a54:	f8d8 4000 	ldr.w	r4, [r8]
 8004a58:	4627      	mov	r7, r4
 8004a5a:	2f00      	cmp	r7, #0
 8004a5c:	d143      	bne.n	8004ae6 <_malloc_r+0xd6>
 8004a5e:	2c00      	cmp	r4, #0
 8004a60:	d04b      	beq.n	8004afa <_malloc_r+0xea>
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	4639      	mov	r1, r7
 8004a66:	4630      	mov	r0, r6
 8004a68:	eb04 0903 	add.w	r9, r4, r3
 8004a6c:	f000 f9b0 	bl	8004dd0 <_sbrk_r>
 8004a70:	4581      	cmp	r9, r0
 8004a72:	d142      	bne.n	8004afa <_malloc_r+0xea>
 8004a74:	6821      	ldr	r1, [r4, #0]
 8004a76:	4630      	mov	r0, r6
 8004a78:	1a6d      	subs	r5, r5, r1
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	f7ff ffa6 	bl	80049cc <sbrk_aligned>
 8004a80:	3001      	adds	r0, #1
 8004a82:	d03a      	beq.n	8004afa <_malloc_r+0xea>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	442b      	add	r3, r5
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	bb62      	cbnz	r2, 8004aec <_malloc_r+0xdc>
 8004a92:	f8c8 7000 	str.w	r7, [r8]
 8004a96:	e00f      	b.n	8004ab8 <_malloc_r+0xa8>
 8004a98:	6822      	ldr	r2, [r4, #0]
 8004a9a:	1b52      	subs	r2, r2, r5
 8004a9c:	d420      	bmi.n	8004ae0 <_malloc_r+0xd0>
 8004a9e:	2a0b      	cmp	r2, #11
 8004aa0:	d917      	bls.n	8004ad2 <_malloc_r+0xc2>
 8004aa2:	1961      	adds	r1, r4, r5
 8004aa4:	42a3      	cmp	r3, r4
 8004aa6:	6025      	str	r5, [r4, #0]
 8004aa8:	bf18      	it	ne
 8004aaa:	6059      	strne	r1, [r3, #4]
 8004aac:	6863      	ldr	r3, [r4, #4]
 8004aae:	bf08      	it	eq
 8004ab0:	f8c8 1000 	streq.w	r1, [r8]
 8004ab4:	5162      	str	r2, [r4, r5]
 8004ab6:	604b      	str	r3, [r1, #4]
 8004ab8:	4630      	mov	r0, r6
 8004aba:	f000 f82f 	bl	8004b1c <__malloc_unlock>
 8004abe:	f104 000b 	add.w	r0, r4, #11
 8004ac2:	1d23      	adds	r3, r4, #4
 8004ac4:	f020 0007 	bic.w	r0, r0, #7
 8004ac8:	1ac2      	subs	r2, r0, r3
 8004aca:	bf1c      	itt	ne
 8004acc:	1a1b      	subne	r3, r3, r0
 8004ace:	50a3      	strne	r3, [r4, r2]
 8004ad0:	e7af      	b.n	8004a32 <_malloc_r+0x22>
 8004ad2:	6862      	ldr	r2, [r4, #4]
 8004ad4:	42a3      	cmp	r3, r4
 8004ad6:	bf0c      	ite	eq
 8004ad8:	f8c8 2000 	streq.w	r2, [r8]
 8004adc:	605a      	strne	r2, [r3, #4]
 8004ade:	e7eb      	b.n	8004ab8 <_malloc_r+0xa8>
 8004ae0:	4623      	mov	r3, r4
 8004ae2:	6864      	ldr	r4, [r4, #4]
 8004ae4:	e7ae      	b.n	8004a44 <_malloc_r+0x34>
 8004ae6:	463c      	mov	r4, r7
 8004ae8:	687f      	ldr	r7, [r7, #4]
 8004aea:	e7b6      	b.n	8004a5a <_malloc_r+0x4a>
 8004aec:	461a      	mov	r2, r3
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	42a3      	cmp	r3, r4
 8004af2:	d1fb      	bne.n	8004aec <_malloc_r+0xdc>
 8004af4:	2300      	movs	r3, #0
 8004af6:	6053      	str	r3, [r2, #4]
 8004af8:	e7de      	b.n	8004ab8 <_malloc_r+0xa8>
 8004afa:	230c      	movs	r3, #12
 8004afc:	4630      	mov	r0, r6
 8004afe:	6033      	str	r3, [r6, #0]
 8004b00:	f000 f80c 	bl	8004b1c <__malloc_unlock>
 8004b04:	e794      	b.n	8004a30 <_malloc_r+0x20>
 8004b06:	6005      	str	r5, [r0, #0]
 8004b08:	e7d6      	b.n	8004ab8 <_malloc_r+0xa8>
 8004b0a:	bf00      	nop
 8004b0c:	200007fc 	.word	0x200007fc

08004b10 <__malloc_lock>:
 8004b10:	4801      	ldr	r0, [pc, #4]	@ (8004b18 <__malloc_lock+0x8>)
 8004b12:	f000 b9aa 	b.w	8004e6a <__retarget_lock_acquire_recursive>
 8004b16:	bf00      	nop
 8004b18:	20000940 	.word	0x20000940

08004b1c <__malloc_unlock>:
 8004b1c:	4801      	ldr	r0, [pc, #4]	@ (8004b24 <__malloc_unlock+0x8>)
 8004b1e:	f000 b9a5 	b.w	8004e6c <__retarget_lock_release_recursive>
 8004b22:	bf00      	nop
 8004b24:	20000940 	.word	0x20000940

08004b28 <std>:
 8004b28:	2300      	movs	r3, #0
 8004b2a:	b510      	push	{r4, lr}
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	e9c0 3300 	strd	r3, r3, [r0]
 8004b32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b36:	6083      	str	r3, [r0, #8]
 8004b38:	8181      	strh	r1, [r0, #12]
 8004b3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b3c:	81c2      	strh	r2, [r0, #14]
 8004b3e:	6183      	str	r3, [r0, #24]
 8004b40:	4619      	mov	r1, r3
 8004b42:	2208      	movs	r2, #8
 8004b44:	305c      	adds	r0, #92	@ 0x5c
 8004b46:	f000 f906 	bl	8004d56 <memset>
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b80 <std+0x58>)
 8004b4c:	6224      	str	r4, [r4, #32]
 8004b4e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b50:	4b0c      	ldr	r3, [pc, #48]	@ (8004b84 <std+0x5c>)
 8004b52:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b54:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <std+0x60>)
 8004b56:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b58:	4b0c      	ldr	r3, [pc, #48]	@ (8004b8c <std+0x64>)
 8004b5a:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b90 <std+0x68>)
 8004b5e:	429c      	cmp	r4, r3
 8004b60:	d006      	beq.n	8004b70 <std+0x48>
 8004b62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b66:	4294      	cmp	r4, r2
 8004b68:	d002      	beq.n	8004b70 <std+0x48>
 8004b6a:	33d0      	adds	r3, #208	@ 0xd0
 8004b6c:	429c      	cmp	r4, r3
 8004b6e:	d105      	bne.n	8004b7c <std+0x54>
 8004b70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b78:	f000 b976 	b.w	8004e68 <__retarget_lock_init_recursive>
 8004b7c:	bd10      	pop	{r4, pc}
 8004b7e:	bf00      	nop
 8004b80:	08004cd1 	.word	0x08004cd1
 8004b84:	08004cf3 	.word	0x08004cf3
 8004b88:	08004d2b 	.word	0x08004d2b
 8004b8c:	08004d4f 	.word	0x08004d4f
 8004b90:	20000800 	.word	0x20000800

08004b94 <stdio_exit_handler>:
 8004b94:	4a02      	ldr	r2, [pc, #8]	@ (8004ba0 <stdio_exit_handler+0xc>)
 8004b96:	4903      	ldr	r1, [pc, #12]	@ (8004ba4 <stdio_exit_handler+0x10>)
 8004b98:	4803      	ldr	r0, [pc, #12]	@ (8004ba8 <stdio_exit_handler+0x14>)
 8004b9a:	f000 b869 	b.w	8004c70 <_fwalk_sglue>
 8004b9e:	bf00      	nop
 8004ba0:	2000000c 	.word	0x2000000c
 8004ba4:	080055c1 	.word	0x080055c1
 8004ba8:	2000001c 	.word	0x2000001c

08004bac <cleanup_stdio>:
 8004bac:	6841      	ldr	r1, [r0, #4]
 8004bae:	4b0c      	ldr	r3, [pc, #48]	@ (8004be0 <cleanup_stdio+0x34>)
 8004bb0:	b510      	push	{r4, lr}
 8004bb2:	4299      	cmp	r1, r3
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	d001      	beq.n	8004bbc <cleanup_stdio+0x10>
 8004bb8:	f000 fd02 	bl	80055c0 <_fflush_r>
 8004bbc:	68a1      	ldr	r1, [r4, #8]
 8004bbe:	4b09      	ldr	r3, [pc, #36]	@ (8004be4 <cleanup_stdio+0x38>)
 8004bc0:	4299      	cmp	r1, r3
 8004bc2:	d002      	beq.n	8004bca <cleanup_stdio+0x1e>
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f000 fcfb 	bl	80055c0 <_fflush_r>
 8004bca:	68e1      	ldr	r1, [r4, #12]
 8004bcc:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <cleanup_stdio+0x3c>)
 8004bce:	4299      	cmp	r1, r3
 8004bd0:	d004      	beq.n	8004bdc <cleanup_stdio+0x30>
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd8:	f000 bcf2 	b.w	80055c0 <_fflush_r>
 8004bdc:	bd10      	pop	{r4, pc}
 8004bde:	bf00      	nop
 8004be0:	20000800 	.word	0x20000800
 8004be4:	20000868 	.word	0x20000868
 8004be8:	200008d0 	.word	0x200008d0

08004bec <global_stdio_init.part.0>:
 8004bec:	b510      	push	{r4, lr}
 8004bee:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <global_stdio_init.part.0+0x30>)
 8004bf0:	4c0b      	ldr	r4, [pc, #44]	@ (8004c20 <global_stdio_init.part.0+0x34>)
 8004bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8004c24 <global_stdio_init.part.0+0x38>)
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	2104      	movs	r1, #4
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f7ff ff94 	bl	8004b28 <std>
 8004c00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c04:	2201      	movs	r2, #1
 8004c06:	2109      	movs	r1, #9
 8004c08:	f7ff ff8e 	bl	8004b28 <std>
 8004c0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c10:	2202      	movs	r2, #2
 8004c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c16:	2112      	movs	r1, #18
 8004c18:	f7ff bf86 	b.w	8004b28 <std>
 8004c1c:	20000938 	.word	0x20000938
 8004c20:	20000800 	.word	0x20000800
 8004c24:	08004b95 	.word	0x08004b95

08004c28 <__sfp_lock_acquire>:
 8004c28:	4801      	ldr	r0, [pc, #4]	@ (8004c30 <__sfp_lock_acquire+0x8>)
 8004c2a:	f000 b91e 	b.w	8004e6a <__retarget_lock_acquire_recursive>
 8004c2e:	bf00      	nop
 8004c30:	20000941 	.word	0x20000941

08004c34 <__sfp_lock_release>:
 8004c34:	4801      	ldr	r0, [pc, #4]	@ (8004c3c <__sfp_lock_release+0x8>)
 8004c36:	f000 b919 	b.w	8004e6c <__retarget_lock_release_recursive>
 8004c3a:	bf00      	nop
 8004c3c:	20000941 	.word	0x20000941

08004c40 <__sinit>:
 8004c40:	b510      	push	{r4, lr}
 8004c42:	4604      	mov	r4, r0
 8004c44:	f7ff fff0 	bl	8004c28 <__sfp_lock_acquire>
 8004c48:	6a23      	ldr	r3, [r4, #32]
 8004c4a:	b11b      	cbz	r3, 8004c54 <__sinit+0x14>
 8004c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c50:	f7ff bff0 	b.w	8004c34 <__sfp_lock_release>
 8004c54:	4b04      	ldr	r3, [pc, #16]	@ (8004c68 <__sinit+0x28>)
 8004c56:	6223      	str	r3, [r4, #32]
 8004c58:	4b04      	ldr	r3, [pc, #16]	@ (8004c6c <__sinit+0x2c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f5      	bne.n	8004c4c <__sinit+0xc>
 8004c60:	f7ff ffc4 	bl	8004bec <global_stdio_init.part.0>
 8004c64:	e7f2      	b.n	8004c4c <__sinit+0xc>
 8004c66:	bf00      	nop
 8004c68:	08004bad 	.word	0x08004bad
 8004c6c:	20000938 	.word	0x20000938

08004c70 <_fwalk_sglue>:
 8004c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c74:	4607      	mov	r7, r0
 8004c76:	4688      	mov	r8, r1
 8004c78:	4614      	mov	r4, r2
 8004c7a:	2600      	movs	r6, #0
 8004c7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c80:	f1b9 0901 	subs.w	r9, r9, #1
 8004c84:	d505      	bpl.n	8004c92 <_fwalk_sglue+0x22>
 8004c86:	6824      	ldr	r4, [r4, #0]
 8004c88:	2c00      	cmp	r4, #0
 8004c8a:	d1f7      	bne.n	8004c7c <_fwalk_sglue+0xc>
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c92:	89ab      	ldrh	r3, [r5, #12]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d907      	bls.n	8004ca8 <_fwalk_sglue+0x38>
 8004c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	d003      	beq.n	8004ca8 <_fwalk_sglue+0x38>
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	47c0      	blx	r8
 8004ca6:	4306      	orrs	r6, r0
 8004ca8:	3568      	adds	r5, #104	@ 0x68
 8004caa:	e7e9      	b.n	8004c80 <_fwalk_sglue+0x10>

08004cac <iprintf>:
 8004cac:	b40f      	push	{r0, r1, r2, r3}
 8004cae:	b507      	push	{r0, r1, r2, lr}
 8004cb0:	4906      	ldr	r1, [pc, #24]	@ (8004ccc <iprintf+0x20>)
 8004cb2:	ab04      	add	r3, sp, #16
 8004cb4:	6808      	ldr	r0, [r1, #0]
 8004cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cba:	6881      	ldr	r1, [r0, #8]
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	f000 f955 	bl	8004f6c <_vfiprintf_r>
 8004cc2:	b003      	add	sp, #12
 8004cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cc8:	b004      	add	sp, #16
 8004cca:	4770      	bx	lr
 8004ccc:	20000018 	.word	0x20000018

08004cd0 <__sread>:
 8004cd0:	b510      	push	{r4, lr}
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd8:	f000 f868 	bl	8004dac <_read_r>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	bfab      	itete	ge
 8004ce0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004ce2:	89a3      	ldrhlt	r3, [r4, #12]
 8004ce4:	181b      	addge	r3, r3, r0
 8004ce6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004cea:	bfac      	ite	ge
 8004cec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004cee:	81a3      	strhlt	r3, [r4, #12]
 8004cf0:	bd10      	pop	{r4, pc}

08004cf2 <__swrite>:
 8004cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf6:	461f      	mov	r7, r3
 8004cf8:	898b      	ldrh	r3, [r1, #12]
 8004cfa:	4605      	mov	r5, r0
 8004cfc:	05db      	lsls	r3, r3, #23
 8004cfe:	460c      	mov	r4, r1
 8004d00:	4616      	mov	r6, r2
 8004d02:	d505      	bpl.n	8004d10 <__swrite+0x1e>
 8004d04:	2302      	movs	r3, #2
 8004d06:	2200      	movs	r2, #0
 8004d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d0c:	f000 f83c 	bl	8004d88 <_lseek_r>
 8004d10:	89a3      	ldrh	r3, [r4, #12]
 8004d12:	4632      	mov	r2, r6
 8004d14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d18:	81a3      	strh	r3, [r4, #12]
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	463b      	mov	r3, r7
 8004d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d26:	f000 b863 	b.w	8004df0 <_write_r>

08004d2a <__sseek>:
 8004d2a:	b510      	push	{r4, lr}
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d32:	f000 f829 	bl	8004d88 <_lseek_r>
 8004d36:	1c43      	adds	r3, r0, #1
 8004d38:	89a3      	ldrh	r3, [r4, #12]
 8004d3a:	bf15      	itete	ne
 8004d3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d46:	81a3      	strheq	r3, [r4, #12]
 8004d48:	bf18      	it	ne
 8004d4a:	81a3      	strhne	r3, [r4, #12]
 8004d4c:	bd10      	pop	{r4, pc}

08004d4e <__sclose>:
 8004d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d52:	f000 b809 	b.w	8004d68 <_close_r>

08004d56 <memset>:
 8004d56:	4603      	mov	r3, r0
 8004d58:	4402      	add	r2, r0
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d100      	bne.n	8004d60 <memset+0xa>
 8004d5e:	4770      	bx	lr
 8004d60:	f803 1b01 	strb.w	r1, [r3], #1
 8004d64:	e7f9      	b.n	8004d5a <memset+0x4>
	...

08004d68 <_close_r>:
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	4d05      	ldr	r5, [pc, #20]	@ (8004d84 <_close_r+0x1c>)
 8004d6e:	4604      	mov	r4, r0
 8004d70:	4608      	mov	r0, r1
 8004d72:	602b      	str	r3, [r5, #0]
 8004d74:	f7fd faf3 	bl	800235e <_close>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d102      	bne.n	8004d82 <_close_r+0x1a>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	b103      	cbz	r3, 8004d82 <_close_r+0x1a>
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	2000093c 	.word	0x2000093c

08004d88 <_lseek_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	4608      	mov	r0, r1
 8004d8e:	4611      	mov	r1, r2
 8004d90:	2200      	movs	r2, #0
 8004d92:	4d05      	ldr	r5, [pc, #20]	@ (8004da8 <_lseek_r+0x20>)
 8004d94:	602a      	str	r2, [r5, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f7fd fb05 	bl	80023a6 <_lseek>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_lseek_r+0x1e>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_lseek_r+0x1e>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	2000093c 	.word	0x2000093c

08004dac <_read_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	4604      	mov	r4, r0
 8004db0:	4608      	mov	r0, r1
 8004db2:	4611      	mov	r1, r2
 8004db4:	2200      	movs	r2, #0
 8004db6:	4d05      	ldr	r5, [pc, #20]	@ (8004dcc <_read_r+0x20>)
 8004db8:	602a      	str	r2, [r5, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f7fd fa96 	bl	80022ec <_read>
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	d102      	bne.n	8004dca <_read_r+0x1e>
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	b103      	cbz	r3, 8004dca <_read_r+0x1e>
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	bd38      	pop	{r3, r4, r5, pc}
 8004dcc:	2000093c 	.word	0x2000093c

08004dd0 <_sbrk_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	4d05      	ldr	r5, [pc, #20]	@ (8004dec <_sbrk_r+0x1c>)
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	4608      	mov	r0, r1
 8004dda:	602b      	str	r3, [r5, #0]
 8004ddc:	f7fd faf0 	bl	80023c0 <_sbrk>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d102      	bne.n	8004dea <_sbrk_r+0x1a>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	b103      	cbz	r3, 8004dea <_sbrk_r+0x1a>
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	2000093c 	.word	0x2000093c

08004df0 <_write_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4604      	mov	r4, r0
 8004df4:	4608      	mov	r0, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	2200      	movs	r2, #0
 8004dfa:	4d05      	ldr	r5, [pc, #20]	@ (8004e10 <_write_r+0x20>)
 8004dfc:	602a      	str	r2, [r5, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f7fd fa91 	bl	8002326 <_write>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d102      	bne.n	8004e0e <_write_r+0x1e>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	b103      	cbz	r3, 8004e0e <_write_r+0x1e>
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
 8004e10:	2000093c 	.word	0x2000093c

08004e14 <__errno>:
 8004e14:	4b01      	ldr	r3, [pc, #4]	@ (8004e1c <__errno+0x8>)
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000018 	.word	0x20000018

08004e20 <__libc_init_array>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	2600      	movs	r6, #0
 8004e24:	4d0c      	ldr	r5, [pc, #48]	@ (8004e58 <__libc_init_array+0x38>)
 8004e26:	4c0d      	ldr	r4, [pc, #52]	@ (8004e5c <__libc_init_array+0x3c>)
 8004e28:	1b64      	subs	r4, r4, r5
 8004e2a:	10a4      	asrs	r4, r4, #2
 8004e2c:	42a6      	cmp	r6, r4
 8004e2e:	d109      	bne.n	8004e44 <__libc_init_array+0x24>
 8004e30:	f000 fd14 	bl	800585c <_init>
 8004e34:	2600      	movs	r6, #0
 8004e36:	4d0a      	ldr	r5, [pc, #40]	@ (8004e60 <__libc_init_array+0x40>)
 8004e38:	4c0a      	ldr	r4, [pc, #40]	@ (8004e64 <__libc_init_array+0x44>)
 8004e3a:	1b64      	subs	r4, r4, r5
 8004e3c:	10a4      	asrs	r4, r4, #2
 8004e3e:	42a6      	cmp	r6, r4
 8004e40:	d105      	bne.n	8004e4e <__libc_init_array+0x2e>
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e48:	4798      	blx	r3
 8004e4a:	3601      	adds	r6, #1
 8004e4c:	e7ee      	b.n	8004e2c <__libc_init_array+0xc>
 8004e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e52:	4798      	blx	r3
 8004e54:	3601      	adds	r6, #1
 8004e56:	e7f2      	b.n	8004e3e <__libc_init_array+0x1e>
 8004e58:	080058e4 	.word	0x080058e4
 8004e5c:	080058e4 	.word	0x080058e4
 8004e60:	080058e4 	.word	0x080058e4
 8004e64:	080058e8 	.word	0x080058e8

08004e68 <__retarget_lock_init_recursive>:
 8004e68:	4770      	bx	lr

08004e6a <__retarget_lock_acquire_recursive>:
 8004e6a:	4770      	bx	lr

08004e6c <__retarget_lock_release_recursive>:
 8004e6c:	4770      	bx	lr

08004e6e <memcpy>:
 8004e6e:	440a      	add	r2, r1
 8004e70:	4291      	cmp	r1, r2
 8004e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e76:	d100      	bne.n	8004e7a <memcpy+0xc>
 8004e78:	4770      	bx	lr
 8004e7a:	b510      	push	{r4, lr}
 8004e7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e80:	4291      	cmp	r1, r2
 8004e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e86:	d1f9      	bne.n	8004e7c <memcpy+0xe>
 8004e88:	bd10      	pop	{r4, pc}
	...

08004e8c <_free_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	4605      	mov	r5, r0
 8004e90:	2900      	cmp	r1, #0
 8004e92:	d040      	beq.n	8004f16 <_free_r+0x8a>
 8004e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e98:	1f0c      	subs	r4, r1, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	bfb8      	it	lt
 8004e9e:	18e4      	addlt	r4, r4, r3
 8004ea0:	f7ff fe36 	bl	8004b10 <__malloc_lock>
 8004ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8004f18 <_free_r+0x8c>)
 8004ea6:	6813      	ldr	r3, [r2, #0]
 8004ea8:	b933      	cbnz	r3, 8004eb8 <_free_r+0x2c>
 8004eaa:	6063      	str	r3, [r4, #4]
 8004eac:	6014      	str	r4, [r2, #0]
 8004eae:	4628      	mov	r0, r5
 8004eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eb4:	f7ff be32 	b.w	8004b1c <__malloc_unlock>
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	d908      	bls.n	8004ece <_free_r+0x42>
 8004ebc:	6820      	ldr	r0, [r4, #0]
 8004ebe:	1821      	adds	r1, r4, r0
 8004ec0:	428b      	cmp	r3, r1
 8004ec2:	bf01      	itttt	eq
 8004ec4:	6819      	ldreq	r1, [r3, #0]
 8004ec6:	685b      	ldreq	r3, [r3, #4]
 8004ec8:	1809      	addeq	r1, r1, r0
 8004eca:	6021      	streq	r1, [r4, #0]
 8004ecc:	e7ed      	b.n	8004eaa <_free_r+0x1e>
 8004ece:	461a      	mov	r2, r3
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	b10b      	cbz	r3, 8004ed8 <_free_r+0x4c>
 8004ed4:	42a3      	cmp	r3, r4
 8004ed6:	d9fa      	bls.n	8004ece <_free_r+0x42>
 8004ed8:	6811      	ldr	r1, [r2, #0]
 8004eda:	1850      	adds	r0, r2, r1
 8004edc:	42a0      	cmp	r0, r4
 8004ede:	d10b      	bne.n	8004ef8 <_free_r+0x6c>
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	4401      	add	r1, r0
 8004ee4:	1850      	adds	r0, r2, r1
 8004ee6:	4283      	cmp	r3, r0
 8004ee8:	6011      	str	r1, [r2, #0]
 8004eea:	d1e0      	bne.n	8004eae <_free_r+0x22>
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	4408      	add	r0, r1
 8004ef2:	6010      	str	r0, [r2, #0]
 8004ef4:	6053      	str	r3, [r2, #4]
 8004ef6:	e7da      	b.n	8004eae <_free_r+0x22>
 8004ef8:	d902      	bls.n	8004f00 <_free_r+0x74>
 8004efa:	230c      	movs	r3, #12
 8004efc:	602b      	str	r3, [r5, #0]
 8004efe:	e7d6      	b.n	8004eae <_free_r+0x22>
 8004f00:	6820      	ldr	r0, [r4, #0]
 8004f02:	1821      	adds	r1, r4, r0
 8004f04:	428b      	cmp	r3, r1
 8004f06:	bf01      	itttt	eq
 8004f08:	6819      	ldreq	r1, [r3, #0]
 8004f0a:	685b      	ldreq	r3, [r3, #4]
 8004f0c:	1809      	addeq	r1, r1, r0
 8004f0e:	6021      	streq	r1, [r4, #0]
 8004f10:	6063      	str	r3, [r4, #4]
 8004f12:	6054      	str	r4, [r2, #4]
 8004f14:	e7cb      	b.n	8004eae <_free_r+0x22>
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	200007fc 	.word	0x200007fc

08004f1c <__sfputc_r>:
 8004f1c:	6893      	ldr	r3, [r2, #8]
 8004f1e:	b410      	push	{r4}
 8004f20:	3b01      	subs	r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	6093      	str	r3, [r2, #8]
 8004f26:	da07      	bge.n	8004f38 <__sfputc_r+0x1c>
 8004f28:	6994      	ldr	r4, [r2, #24]
 8004f2a:	42a3      	cmp	r3, r4
 8004f2c:	db01      	blt.n	8004f32 <__sfputc_r+0x16>
 8004f2e:	290a      	cmp	r1, #10
 8004f30:	d102      	bne.n	8004f38 <__sfputc_r+0x1c>
 8004f32:	bc10      	pop	{r4}
 8004f34:	f000 bb6c 	b.w	8005610 <__swbuf_r>
 8004f38:	6813      	ldr	r3, [r2, #0]
 8004f3a:	1c58      	adds	r0, r3, #1
 8004f3c:	6010      	str	r0, [r2, #0]
 8004f3e:	7019      	strb	r1, [r3, #0]
 8004f40:	4608      	mov	r0, r1
 8004f42:	bc10      	pop	{r4}
 8004f44:	4770      	bx	lr

08004f46 <__sfputs_r>:
 8004f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f48:	4606      	mov	r6, r0
 8004f4a:	460f      	mov	r7, r1
 8004f4c:	4614      	mov	r4, r2
 8004f4e:	18d5      	adds	r5, r2, r3
 8004f50:	42ac      	cmp	r4, r5
 8004f52:	d101      	bne.n	8004f58 <__sfputs_r+0x12>
 8004f54:	2000      	movs	r0, #0
 8004f56:	e007      	b.n	8004f68 <__sfputs_r+0x22>
 8004f58:	463a      	mov	r2, r7
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f60:	f7ff ffdc 	bl	8004f1c <__sfputc_r>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d1f3      	bne.n	8004f50 <__sfputs_r+0xa>
 8004f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f6c <_vfiprintf_r>:
 8004f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f70:	460d      	mov	r5, r1
 8004f72:	4614      	mov	r4, r2
 8004f74:	4698      	mov	r8, r3
 8004f76:	4606      	mov	r6, r0
 8004f78:	b09d      	sub	sp, #116	@ 0x74
 8004f7a:	b118      	cbz	r0, 8004f84 <_vfiprintf_r+0x18>
 8004f7c:	6a03      	ldr	r3, [r0, #32]
 8004f7e:	b90b      	cbnz	r3, 8004f84 <_vfiprintf_r+0x18>
 8004f80:	f7ff fe5e 	bl	8004c40 <__sinit>
 8004f84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f86:	07d9      	lsls	r1, r3, #31
 8004f88:	d405      	bmi.n	8004f96 <_vfiprintf_r+0x2a>
 8004f8a:	89ab      	ldrh	r3, [r5, #12]
 8004f8c:	059a      	lsls	r2, r3, #22
 8004f8e:	d402      	bmi.n	8004f96 <_vfiprintf_r+0x2a>
 8004f90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f92:	f7ff ff6a 	bl	8004e6a <__retarget_lock_acquire_recursive>
 8004f96:	89ab      	ldrh	r3, [r5, #12]
 8004f98:	071b      	lsls	r3, r3, #28
 8004f9a:	d501      	bpl.n	8004fa0 <_vfiprintf_r+0x34>
 8004f9c:	692b      	ldr	r3, [r5, #16]
 8004f9e:	b99b      	cbnz	r3, 8004fc8 <_vfiprintf_r+0x5c>
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f000 fb72 	bl	800568c <__swsetup_r>
 8004fa8:	b170      	cbz	r0, 8004fc8 <_vfiprintf_r+0x5c>
 8004faa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fac:	07dc      	lsls	r4, r3, #31
 8004fae:	d504      	bpl.n	8004fba <_vfiprintf_r+0x4e>
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	b01d      	add	sp, #116	@ 0x74
 8004fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fba:	89ab      	ldrh	r3, [r5, #12]
 8004fbc:	0598      	lsls	r0, r3, #22
 8004fbe:	d4f7      	bmi.n	8004fb0 <_vfiprintf_r+0x44>
 8004fc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fc2:	f7ff ff53 	bl	8004e6c <__retarget_lock_release_recursive>
 8004fc6:	e7f3      	b.n	8004fb0 <_vfiprintf_r+0x44>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fcc:	2320      	movs	r3, #32
 8004fce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004fd2:	2330      	movs	r3, #48	@ 0x30
 8004fd4:	f04f 0901 	mov.w	r9, #1
 8004fd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fdc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005188 <_vfiprintf_r+0x21c>
 8004fe0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004fe4:	4623      	mov	r3, r4
 8004fe6:	469a      	mov	sl, r3
 8004fe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fec:	b10a      	cbz	r2, 8004ff2 <_vfiprintf_r+0x86>
 8004fee:	2a25      	cmp	r2, #37	@ 0x25
 8004ff0:	d1f9      	bne.n	8004fe6 <_vfiprintf_r+0x7a>
 8004ff2:	ebba 0b04 	subs.w	fp, sl, r4
 8004ff6:	d00b      	beq.n	8005010 <_vfiprintf_r+0xa4>
 8004ff8:	465b      	mov	r3, fp
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	4630      	mov	r0, r6
 8005000:	f7ff ffa1 	bl	8004f46 <__sfputs_r>
 8005004:	3001      	adds	r0, #1
 8005006:	f000 80a7 	beq.w	8005158 <_vfiprintf_r+0x1ec>
 800500a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800500c:	445a      	add	r2, fp
 800500e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005010:	f89a 3000 	ldrb.w	r3, [sl]
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 809f 	beq.w	8005158 <_vfiprintf_r+0x1ec>
 800501a:	2300      	movs	r3, #0
 800501c:	f04f 32ff 	mov.w	r2, #4294967295
 8005020:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005024:	f10a 0a01 	add.w	sl, sl, #1
 8005028:	9304      	str	r3, [sp, #16]
 800502a:	9307      	str	r3, [sp, #28]
 800502c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005030:	931a      	str	r3, [sp, #104]	@ 0x68
 8005032:	4654      	mov	r4, sl
 8005034:	2205      	movs	r2, #5
 8005036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800503a:	4853      	ldr	r0, [pc, #332]	@ (8005188 <_vfiprintf_r+0x21c>)
 800503c:	f000 fb7c 	bl	8005738 <memchr>
 8005040:	9a04      	ldr	r2, [sp, #16]
 8005042:	b9d8      	cbnz	r0, 800507c <_vfiprintf_r+0x110>
 8005044:	06d1      	lsls	r1, r2, #27
 8005046:	bf44      	itt	mi
 8005048:	2320      	movmi	r3, #32
 800504a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800504e:	0713      	lsls	r3, r2, #28
 8005050:	bf44      	itt	mi
 8005052:	232b      	movmi	r3, #43	@ 0x2b
 8005054:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005058:	f89a 3000 	ldrb.w	r3, [sl]
 800505c:	2b2a      	cmp	r3, #42	@ 0x2a
 800505e:	d015      	beq.n	800508c <_vfiprintf_r+0x120>
 8005060:	4654      	mov	r4, sl
 8005062:	2000      	movs	r0, #0
 8005064:	f04f 0c0a 	mov.w	ip, #10
 8005068:	9a07      	ldr	r2, [sp, #28]
 800506a:	4621      	mov	r1, r4
 800506c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005070:	3b30      	subs	r3, #48	@ 0x30
 8005072:	2b09      	cmp	r3, #9
 8005074:	d94b      	bls.n	800510e <_vfiprintf_r+0x1a2>
 8005076:	b1b0      	cbz	r0, 80050a6 <_vfiprintf_r+0x13a>
 8005078:	9207      	str	r2, [sp, #28]
 800507a:	e014      	b.n	80050a6 <_vfiprintf_r+0x13a>
 800507c:	eba0 0308 	sub.w	r3, r0, r8
 8005080:	fa09 f303 	lsl.w	r3, r9, r3
 8005084:	4313      	orrs	r3, r2
 8005086:	46a2      	mov	sl, r4
 8005088:	9304      	str	r3, [sp, #16]
 800508a:	e7d2      	b.n	8005032 <_vfiprintf_r+0xc6>
 800508c:	9b03      	ldr	r3, [sp, #12]
 800508e:	1d19      	adds	r1, r3, #4
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	9103      	str	r1, [sp, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	bfbb      	ittet	lt
 8005098:	425b      	neglt	r3, r3
 800509a:	f042 0202 	orrlt.w	r2, r2, #2
 800509e:	9307      	strge	r3, [sp, #28]
 80050a0:	9307      	strlt	r3, [sp, #28]
 80050a2:	bfb8      	it	lt
 80050a4:	9204      	strlt	r2, [sp, #16]
 80050a6:	7823      	ldrb	r3, [r4, #0]
 80050a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80050aa:	d10a      	bne.n	80050c2 <_vfiprintf_r+0x156>
 80050ac:	7863      	ldrb	r3, [r4, #1]
 80050ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80050b0:	d132      	bne.n	8005118 <_vfiprintf_r+0x1ac>
 80050b2:	9b03      	ldr	r3, [sp, #12]
 80050b4:	3402      	adds	r4, #2
 80050b6:	1d1a      	adds	r2, r3, #4
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	9203      	str	r2, [sp, #12]
 80050bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050c0:	9305      	str	r3, [sp, #20]
 80050c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800518c <_vfiprintf_r+0x220>
 80050c6:	2203      	movs	r2, #3
 80050c8:	4650      	mov	r0, sl
 80050ca:	7821      	ldrb	r1, [r4, #0]
 80050cc:	f000 fb34 	bl	8005738 <memchr>
 80050d0:	b138      	cbz	r0, 80050e2 <_vfiprintf_r+0x176>
 80050d2:	2240      	movs	r2, #64	@ 0x40
 80050d4:	9b04      	ldr	r3, [sp, #16]
 80050d6:	eba0 000a 	sub.w	r0, r0, sl
 80050da:	4082      	lsls	r2, r0
 80050dc:	4313      	orrs	r3, r2
 80050de:	3401      	adds	r4, #1
 80050e0:	9304      	str	r3, [sp, #16]
 80050e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050e6:	2206      	movs	r2, #6
 80050e8:	4829      	ldr	r0, [pc, #164]	@ (8005190 <_vfiprintf_r+0x224>)
 80050ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80050ee:	f000 fb23 	bl	8005738 <memchr>
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d03f      	beq.n	8005176 <_vfiprintf_r+0x20a>
 80050f6:	4b27      	ldr	r3, [pc, #156]	@ (8005194 <_vfiprintf_r+0x228>)
 80050f8:	bb1b      	cbnz	r3, 8005142 <_vfiprintf_r+0x1d6>
 80050fa:	9b03      	ldr	r3, [sp, #12]
 80050fc:	3307      	adds	r3, #7
 80050fe:	f023 0307 	bic.w	r3, r3, #7
 8005102:	3308      	adds	r3, #8
 8005104:	9303      	str	r3, [sp, #12]
 8005106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005108:	443b      	add	r3, r7
 800510a:	9309      	str	r3, [sp, #36]	@ 0x24
 800510c:	e76a      	b.n	8004fe4 <_vfiprintf_r+0x78>
 800510e:	460c      	mov	r4, r1
 8005110:	2001      	movs	r0, #1
 8005112:	fb0c 3202 	mla	r2, ip, r2, r3
 8005116:	e7a8      	b.n	800506a <_vfiprintf_r+0xfe>
 8005118:	2300      	movs	r3, #0
 800511a:	f04f 0c0a 	mov.w	ip, #10
 800511e:	4619      	mov	r1, r3
 8005120:	3401      	adds	r4, #1
 8005122:	9305      	str	r3, [sp, #20]
 8005124:	4620      	mov	r0, r4
 8005126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800512a:	3a30      	subs	r2, #48	@ 0x30
 800512c:	2a09      	cmp	r2, #9
 800512e:	d903      	bls.n	8005138 <_vfiprintf_r+0x1cc>
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0c6      	beq.n	80050c2 <_vfiprintf_r+0x156>
 8005134:	9105      	str	r1, [sp, #20]
 8005136:	e7c4      	b.n	80050c2 <_vfiprintf_r+0x156>
 8005138:	4604      	mov	r4, r0
 800513a:	2301      	movs	r3, #1
 800513c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005140:	e7f0      	b.n	8005124 <_vfiprintf_r+0x1b8>
 8005142:	ab03      	add	r3, sp, #12
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	462a      	mov	r2, r5
 8005148:	4630      	mov	r0, r6
 800514a:	4b13      	ldr	r3, [pc, #76]	@ (8005198 <_vfiprintf_r+0x22c>)
 800514c:	a904      	add	r1, sp, #16
 800514e:	f3af 8000 	nop.w
 8005152:	4607      	mov	r7, r0
 8005154:	1c78      	adds	r0, r7, #1
 8005156:	d1d6      	bne.n	8005106 <_vfiprintf_r+0x19a>
 8005158:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800515a:	07d9      	lsls	r1, r3, #31
 800515c:	d405      	bmi.n	800516a <_vfiprintf_r+0x1fe>
 800515e:	89ab      	ldrh	r3, [r5, #12]
 8005160:	059a      	lsls	r2, r3, #22
 8005162:	d402      	bmi.n	800516a <_vfiprintf_r+0x1fe>
 8005164:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005166:	f7ff fe81 	bl	8004e6c <__retarget_lock_release_recursive>
 800516a:	89ab      	ldrh	r3, [r5, #12]
 800516c:	065b      	lsls	r3, r3, #25
 800516e:	f53f af1f 	bmi.w	8004fb0 <_vfiprintf_r+0x44>
 8005172:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005174:	e71e      	b.n	8004fb4 <_vfiprintf_r+0x48>
 8005176:	ab03      	add	r3, sp, #12
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	462a      	mov	r2, r5
 800517c:	4630      	mov	r0, r6
 800517e:	4b06      	ldr	r3, [pc, #24]	@ (8005198 <_vfiprintf_r+0x22c>)
 8005180:	a904      	add	r1, sp, #16
 8005182:	f000 f87d 	bl	8005280 <_printf_i>
 8005186:	e7e4      	b.n	8005152 <_vfiprintf_r+0x1e6>
 8005188:	080058ae 	.word	0x080058ae
 800518c:	080058b4 	.word	0x080058b4
 8005190:	080058b8 	.word	0x080058b8
 8005194:	00000000 	.word	0x00000000
 8005198:	08004f47 	.word	0x08004f47

0800519c <_printf_common>:
 800519c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051a0:	4616      	mov	r6, r2
 80051a2:	4698      	mov	r8, r3
 80051a4:	688a      	ldr	r2, [r1, #8]
 80051a6:	690b      	ldr	r3, [r1, #16]
 80051a8:	4607      	mov	r7, r0
 80051aa:	4293      	cmp	r3, r2
 80051ac:	bfb8      	it	lt
 80051ae:	4613      	movlt	r3, r2
 80051b0:	6033      	str	r3, [r6, #0]
 80051b2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051b6:	460c      	mov	r4, r1
 80051b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051bc:	b10a      	cbz	r2, 80051c2 <_printf_common+0x26>
 80051be:	3301      	adds	r3, #1
 80051c0:	6033      	str	r3, [r6, #0]
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	0699      	lsls	r1, r3, #26
 80051c6:	bf42      	ittt	mi
 80051c8:	6833      	ldrmi	r3, [r6, #0]
 80051ca:	3302      	addmi	r3, #2
 80051cc:	6033      	strmi	r3, [r6, #0]
 80051ce:	6825      	ldr	r5, [r4, #0]
 80051d0:	f015 0506 	ands.w	r5, r5, #6
 80051d4:	d106      	bne.n	80051e4 <_printf_common+0x48>
 80051d6:	f104 0a19 	add.w	sl, r4, #25
 80051da:	68e3      	ldr	r3, [r4, #12]
 80051dc:	6832      	ldr	r2, [r6, #0]
 80051de:	1a9b      	subs	r3, r3, r2
 80051e0:	42ab      	cmp	r3, r5
 80051e2:	dc2b      	bgt.n	800523c <_printf_common+0xa0>
 80051e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051e8:	6822      	ldr	r2, [r4, #0]
 80051ea:	3b00      	subs	r3, #0
 80051ec:	bf18      	it	ne
 80051ee:	2301      	movne	r3, #1
 80051f0:	0692      	lsls	r2, r2, #26
 80051f2:	d430      	bmi.n	8005256 <_printf_common+0xba>
 80051f4:	4641      	mov	r1, r8
 80051f6:	4638      	mov	r0, r7
 80051f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051fc:	47c8      	blx	r9
 80051fe:	3001      	adds	r0, #1
 8005200:	d023      	beq.n	800524a <_printf_common+0xae>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	6922      	ldr	r2, [r4, #16]
 8005206:	f003 0306 	and.w	r3, r3, #6
 800520a:	2b04      	cmp	r3, #4
 800520c:	bf14      	ite	ne
 800520e:	2500      	movne	r5, #0
 8005210:	6833      	ldreq	r3, [r6, #0]
 8005212:	f04f 0600 	mov.w	r6, #0
 8005216:	bf08      	it	eq
 8005218:	68e5      	ldreq	r5, [r4, #12]
 800521a:	f104 041a 	add.w	r4, r4, #26
 800521e:	bf08      	it	eq
 8005220:	1aed      	subeq	r5, r5, r3
 8005222:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005226:	bf08      	it	eq
 8005228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800522c:	4293      	cmp	r3, r2
 800522e:	bfc4      	itt	gt
 8005230:	1a9b      	subgt	r3, r3, r2
 8005232:	18ed      	addgt	r5, r5, r3
 8005234:	42b5      	cmp	r5, r6
 8005236:	d11a      	bne.n	800526e <_printf_common+0xd2>
 8005238:	2000      	movs	r0, #0
 800523a:	e008      	b.n	800524e <_printf_common+0xb2>
 800523c:	2301      	movs	r3, #1
 800523e:	4652      	mov	r2, sl
 8005240:	4641      	mov	r1, r8
 8005242:	4638      	mov	r0, r7
 8005244:	47c8      	blx	r9
 8005246:	3001      	adds	r0, #1
 8005248:	d103      	bne.n	8005252 <_printf_common+0xb6>
 800524a:	f04f 30ff 	mov.w	r0, #4294967295
 800524e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005252:	3501      	adds	r5, #1
 8005254:	e7c1      	b.n	80051da <_printf_common+0x3e>
 8005256:	2030      	movs	r0, #48	@ 0x30
 8005258:	18e1      	adds	r1, r4, r3
 800525a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005264:	4422      	add	r2, r4
 8005266:	3302      	adds	r3, #2
 8005268:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800526c:	e7c2      	b.n	80051f4 <_printf_common+0x58>
 800526e:	2301      	movs	r3, #1
 8005270:	4622      	mov	r2, r4
 8005272:	4641      	mov	r1, r8
 8005274:	4638      	mov	r0, r7
 8005276:	47c8      	blx	r9
 8005278:	3001      	adds	r0, #1
 800527a:	d0e6      	beq.n	800524a <_printf_common+0xae>
 800527c:	3601      	adds	r6, #1
 800527e:	e7d9      	b.n	8005234 <_printf_common+0x98>

08005280 <_printf_i>:
 8005280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005284:	7e0f      	ldrb	r7, [r1, #24]
 8005286:	4691      	mov	r9, r2
 8005288:	2f78      	cmp	r7, #120	@ 0x78
 800528a:	4680      	mov	r8, r0
 800528c:	460c      	mov	r4, r1
 800528e:	469a      	mov	sl, r3
 8005290:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005292:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005296:	d807      	bhi.n	80052a8 <_printf_i+0x28>
 8005298:	2f62      	cmp	r7, #98	@ 0x62
 800529a:	d80a      	bhi.n	80052b2 <_printf_i+0x32>
 800529c:	2f00      	cmp	r7, #0
 800529e:	f000 80d3 	beq.w	8005448 <_printf_i+0x1c8>
 80052a2:	2f58      	cmp	r7, #88	@ 0x58
 80052a4:	f000 80ba 	beq.w	800541c <_printf_i+0x19c>
 80052a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052b0:	e03a      	b.n	8005328 <_printf_i+0xa8>
 80052b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052b6:	2b15      	cmp	r3, #21
 80052b8:	d8f6      	bhi.n	80052a8 <_printf_i+0x28>
 80052ba:	a101      	add	r1, pc, #4	@ (adr r1, 80052c0 <_printf_i+0x40>)
 80052bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052c0:	08005319 	.word	0x08005319
 80052c4:	0800532d 	.word	0x0800532d
 80052c8:	080052a9 	.word	0x080052a9
 80052cc:	080052a9 	.word	0x080052a9
 80052d0:	080052a9 	.word	0x080052a9
 80052d4:	080052a9 	.word	0x080052a9
 80052d8:	0800532d 	.word	0x0800532d
 80052dc:	080052a9 	.word	0x080052a9
 80052e0:	080052a9 	.word	0x080052a9
 80052e4:	080052a9 	.word	0x080052a9
 80052e8:	080052a9 	.word	0x080052a9
 80052ec:	0800542f 	.word	0x0800542f
 80052f0:	08005357 	.word	0x08005357
 80052f4:	080053e9 	.word	0x080053e9
 80052f8:	080052a9 	.word	0x080052a9
 80052fc:	080052a9 	.word	0x080052a9
 8005300:	08005451 	.word	0x08005451
 8005304:	080052a9 	.word	0x080052a9
 8005308:	08005357 	.word	0x08005357
 800530c:	080052a9 	.word	0x080052a9
 8005310:	080052a9 	.word	0x080052a9
 8005314:	080053f1 	.word	0x080053f1
 8005318:	6833      	ldr	r3, [r6, #0]
 800531a:	1d1a      	adds	r2, r3, #4
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6032      	str	r2, [r6, #0]
 8005320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005324:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005328:	2301      	movs	r3, #1
 800532a:	e09e      	b.n	800546a <_printf_i+0x1ea>
 800532c:	6833      	ldr	r3, [r6, #0]
 800532e:	6820      	ldr	r0, [r4, #0]
 8005330:	1d19      	adds	r1, r3, #4
 8005332:	6031      	str	r1, [r6, #0]
 8005334:	0606      	lsls	r6, r0, #24
 8005336:	d501      	bpl.n	800533c <_printf_i+0xbc>
 8005338:	681d      	ldr	r5, [r3, #0]
 800533a:	e003      	b.n	8005344 <_printf_i+0xc4>
 800533c:	0645      	lsls	r5, r0, #25
 800533e:	d5fb      	bpl.n	8005338 <_printf_i+0xb8>
 8005340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005344:	2d00      	cmp	r5, #0
 8005346:	da03      	bge.n	8005350 <_printf_i+0xd0>
 8005348:	232d      	movs	r3, #45	@ 0x2d
 800534a:	426d      	negs	r5, r5
 800534c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005350:	230a      	movs	r3, #10
 8005352:	4859      	ldr	r0, [pc, #356]	@ (80054b8 <_printf_i+0x238>)
 8005354:	e011      	b.n	800537a <_printf_i+0xfa>
 8005356:	6821      	ldr	r1, [r4, #0]
 8005358:	6833      	ldr	r3, [r6, #0]
 800535a:	0608      	lsls	r0, r1, #24
 800535c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005360:	d402      	bmi.n	8005368 <_printf_i+0xe8>
 8005362:	0649      	lsls	r1, r1, #25
 8005364:	bf48      	it	mi
 8005366:	b2ad      	uxthmi	r5, r5
 8005368:	2f6f      	cmp	r7, #111	@ 0x6f
 800536a:	6033      	str	r3, [r6, #0]
 800536c:	bf14      	ite	ne
 800536e:	230a      	movne	r3, #10
 8005370:	2308      	moveq	r3, #8
 8005372:	4851      	ldr	r0, [pc, #324]	@ (80054b8 <_printf_i+0x238>)
 8005374:	2100      	movs	r1, #0
 8005376:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800537a:	6866      	ldr	r6, [r4, #4]
 800537c:	2e00      	cmp	r6, #0
 800537e:	bfa8      	it	ge
 8005380:	6821      	ldrge	r1, [r4, #0]
 8005382:	60a6      	str	r6, [r4, #8]
 8005384:	bfa4      	itt	ge
 8005386:	f021 0104 	bicge.w	r1, r1, #4
 800538a:	6021      	strge	r1, [r4, #0]
 800538c:	b90d      	cbnz	r5, 8005392 <_printf_i+0x112>
 800538e:	2e00      	cmp	r6, #0
 8005390:	d04b      	beq.n	800542a <_printf_i+0x1aa>
 8005392:	4616      	mov	r6, r2
 8005394:	fbb5 f1f3 	udiv	r1, r5, r3
 8005398:	fb03 5711 	mls	r7, r3, r1, r5
 800539c:	5dc7      	ldrb	r7, [r0, r7]
 800539e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053a2:	462f      	mov	r7, r5
 80053a4:	42bb      	cmp	r3, r7
 80053a6:	460d      	mov	r5, r1
 80053a8:	d9f4      	bls.n	8005394 <_printf_i+0x114>
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	d10b      	bne.n	80053c6 <_printf_i+0x146>
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	07df      	lsls	r7, r3, #31
 80053b2:	d508      	bpl.n	80053c6 <_printf_i+0x146>
 80053b4:	6923      	ldr	r3, [r4, #16]
 80053b6:	6861      	ldr	r1, [r4, #4]
 80053b8:	4299      	cmp	r1, r3
 80053ba:	bfde      	ittt	le
 80053bc:	2330      	movle	r3, #48	@ 0x30
 80053be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053c6:	1b92      	subs	r2, r2, r6
 80053c8:	6122      	str	r2, [r4, #16]
 80053ca:	464b      	mov	r3, r9
 80053cc:	4621      	mov	r1, r4
 80053ce:	4640      	mov	r0, r8
 80053d0:	f8cd a000 	str.w	sl, [sp]
 80053d4:	aa03      	add	r2, sp, #12
 80053d6:	f7ff fee1 	bl	800519c <_printf_common>
 80053da:	3001      	adds	r0, #1
 80053dc:	d14a      	bne.n	8005474 <_printf_i+0x1f4>
 80053de:	f04f 30ff 	mov.w	r0, #4294967295
 80053e2:	b004      	add	sp, #16
 80053e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	f043 0320 	orr.w	r3, r3, #32
 80053ee:	6023      	str	r3, [r4, #0]
 80053f0:	2778      	movs	r7, #120	@ 0x78
 80053f2:	4832      	ldr	r0, [pc, #200]	@ (80054bc <_printf_i+0x23c>)
 80053f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	6831      	ldr	r1, [r6, #0]
 80053fc:	061f      	lsls	r7, r3, #24
 80053fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8005402:	d402      	bmi.n	800540a <_printf_i+0x18a>
 8005404:	065f      	lsls	r7, r3, #25
 8005406:	bf48      	it	mi
 8005408:	b2ad      	uxthmi	r5, r5
 800540a:	6031      	str	r1, [r6, #0]
 800540c:	07d9      	lsls	r1, r3, #31
 800540e:	bf44      	itt	mi
 8005410:	f043 0320 	orrmi.w	r3, r3, #32
 8005414:	6023      	strmi	r3, [r4, #0]
 8005416:	b11d      	cbz	r5, 8005420 <_printf_i+0x1a0>
 8005418:	2310      	movs	r3, #16
 800541a:	e7ab      	b.n	8005374 <_printf_i+0xf4>
 800541c:	4826      	ldr	r0, [pc, #152]	@ (80054b8 <_printf_i+0x238>)
 800541e:	e7e9      	b.n	80053f4 <_printf_i+0x174>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	f023 0320 	bic.w	r3, r3, #32
 8005426:	6023      	str	r3, [r4, #0]
 8005428:	e7f6      	b.n	8005418 <_printf_i+0x198>
 800542a:	4616      	mov	r6, r2
 800542c:	e7bd      	b.n	80053aa <_printf_i+0x12a>
 800542e:	6833      	ldr	r3, [r6, #0]
 8005430:	6825      	ldr	r5, [r4, #0]
 8005432:	1d18      	adds	r0, r3, #4
 8005434:	6961      	ldr	r1, [r4, #20]
 8005436:	6030      	str	r0, [r6, #0]
 8005438:	062e      	lsls	r6, r5, #24
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	d501      	bpl.n	8005442 <_printf_i+0x1c2>
 800543e:	6019      	str	r1, [r3, #0]
 8005440:	e002      	b.n	8005448 <_printf_i+0x1c8>
 8005442:	0668      	lsls	r0, r5, #25
 8005444:	d5fb      	bpl.n	800543e <_printf_i+0x1be>
 8005446:	8019      	strh	r1, [r3, #0]
 8005448:	2300      	movs	r3, #0
 800544a:	4616      	mov	r6, r2
 800544c:	6123      	str	r3, [r4, #16]
 800544e:	e7bc      	b.n	80053ca <_printf_i+0x14a>
 8005450:	6833      	ldr	r3, [r6, #0]
 8005452:	2100      	movs	r1, #0
 8005454:	1d1a      	adds	r2, r3, #4
 8005456:	6032      	str	r2, [r6, #0]
 8005458:	681e      	ldr	r6, [r3, #0]
 800545a:	6862      	ldr	r2, [r4, #4]
 800545c:	4630      	mov	r0, r6
 800545e:	f000 f96b 	bl	8005738 <memchr>
 8005462:	b108      	cbz	r0, 8005468 <_printf_i+0x1e8>
 8005464:	1b80      	subs	r0, r0, r6
 8005466:	6060      	str	r0, [r4, #4]
 8005468:	6863      	ldr	r3, [r4, #4]
 800546a:	6123      	str	r3, [r4, #16]
 800546c:	2300      	movs	r3, #0
 800546e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005472:	e7aa      	b.n	80053ca <_printf_i+0x14a>
 8005474:	4632      	mov	r2, r6
 8005476:	4649      	mov	r1, r9
 8005478:	4640      	mov	r0, r8
 800547a:	6923      	ldr	r3, [r4, #16]
 800547c:	47d0      	blx	sl
 800547e:	3001      	adds	r0, #1
 8005480:	d0ad      	beq.n	80053de <_printf_i+0x15e>
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	079b      	lsls	r3, r3, #30
 8005486:	d413      	bmi.n	80054b0 <_printf_i+0x230>
 8005488:	68e0      	ldr	r0, [r4, #12]
 800548a:	9b03      	ldr	r3, [sp, #12]
 800548c:	4298      	cmp	r0, r3
 800548e:	bfb8      	it	lt
 8005490:	4618      	movlt	r0, r3
 8005492:	e7a6      	b.n	80053e2 <_printf_i+0x162>
 8005494:	2301      	movs	r3, #1
 8005496:	4632      	mov	r2, r6
 8005498:	4649      	mov	r1, r9
 800549a:	4640      	mov	r0, r8
 800549c:	47d0      	blx	sl
 800549e:	3001      	adds	r0, #1
 80054a0:	d09d      	beq.n	80053de <_printf_i+0x15e>
 80054a2:	3501      	adds	r5, #1
 80054a4:	68e3      	ldr	r3, [r4, #12]
 80054a6:	9903      	ldr	r1, [sp, #12]
 80054a8:	1a5b      	subs	r3, r3, r1
 80054aa:	42ab      	cmp	r3, r5
 80054ac:	dcf2      	bgt.n	8005494 <_printf_i+0x214>
 80054ae:	e7eb      	b.n	8005488 <_printf_i+0x208>
 80054b0:	2500      	movs	r5, #0
 80054b2:	f104 0619 	add.w	r6, r4, #25
 80054b6:	e7f5      	b.n	80054a4 <_printf_i+0x224>
 80054b8:	080058bf 	.word	0x080058bf
 80054bc:	080058d0 	.word	0x080058d0

080054c0 <__sflush_r>:
 80054c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	0716      	lsls	r6, r2, #28
 80054c8:	4605      	mov	r5, r0
 80054ca:	460c      	mov	r4, r1
 80054cc:	d454      	bmi.n	8005578 <__sflush_r+0xb8>
 80054ce:	684b      	ldr	r3, [r1, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	dc02      	bgt.n	80054da <__sflush_r+0x1a>
 80054d4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	dd48      	ble.n	800556c <__sflush_r+0xac>
 80054da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80054dc:	2e00      	cmp	r6, #0
 80054de:	d045      	beq.n	800556c <__sflush_r+0xac>
 80054e0:	2300      	movs	r3, #0
 80054e2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80054e6:	682f      	ldr	r7, [r5, #0]
 80054e8:	6a21      	ldr	r1, [r4, #32]
 80054ea:	602b      	str	r3, [r5, #0]
 80054ec:	d030      	beq.n	8005550 <__sflush_r+0x90>
 80054ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	0759      	lsls	r1, r3, #29
 80054f4:	d505      	bpl.n	8005502 <__sflush_r+0x42>
 80054f6:	6863      	ldr	r3, [r4, #4]
 80054f8:	1ad2      	subs	r2, r2, r3
 80054fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80054fc:	b10b      	cbz	r3, 8005502 <__sflush_r+0x42>
 80054fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005500:	1ad2      	subs	r2, r2, r3
 8005502:	2300      	movs	r3, #0
 8005504:	4628      	mov	r0, r5
 8005506:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005508:	6a21      	ldr	r1, [r4, #32]
 800550a:	47b0      	blx	r6
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	89a3      	ldrh	r3, [r4, #12]
 8005510:	d106      	bne.n	8005520 <__sflush_r+0x60>
 8005512:	6829      	ldr	r1, [r5, #0]
 8005514:	291d      	cmp	r1, #29
 8005516:	d82b      	bhi.n	8005570 <__sflush_r+0xb0>
 8005518:	4a28      	ldr	r2, [pc, #160]	@ (80055bc <__sflush_r+0xfc>)
 800551a:	410a      	asrs	r2, r1
 800551c:	07d6      	lsls	r6, r2, #31
 800551e:	d427      	bmi.n	8005570 <__sflush_r+0xb0>
 8005520:	2200      	movs	r2, #0
 8005522:	6062      	str	r2, [r4, #4]
 8005524:	6922      	ldr	r2, [r4, #16]
 8005526:	04d9      	lsls	r1, r3, #19
 8005528:	6022      	str	r2, [r4, #0]
 800552a:	d504      	bpl.n	8005536 <__sflush_r+0x76>
 800552c:	1c42      	adds	r2, r0, #1
 800552e:	d101      	bne.n	8005534 <__sflush_r+0x74>
 8005530:	682b      	ldr	r3, [r5, #0]
 8005532:	b903      	cbnz	r3, 8005536 <__sflush_r+0x76>
 8005534:	6560      	str	r0, [r4, #84]	@ 0x54
 8005536:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005538:	602f      	str	r7, [r5, #0]
 800553a:	b1b9      	cbz	r1, 800556c <__sflush_r+0xac>
 800553c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005540:	4299      	cmp	r1, r3
 8005542:	d002      	beq.n	800554a <__sflush_r+0x8a>
 8005544:	4628      	mov	r0, r5
 8005546:	f7ff fca1 	bl	8004e8c <_free_r>
 800554a:	2300      	movs	r3, #0
 800554c:	6363      	str	r3, [r4, #52]	@ 0x34
 800554e:	e00d      	b.n	800556c <__sflush_r+0xac>
 8005550:	2301      	movs	r3, #1
 8005552:	4628      	mov	r0, r5
 8005554:	47b0      	blx	r6
 8005556:	4602      	mov	r2, r0
 8005558:	1c50      	adds	r0, r2, #1
 800555a:	d1c9      	bne.n	80054f0 <__sflush_r+0x30>
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0c6      	beq.n	80054f0 <__sflush_r+0x30>
 8005562:	2b1d      	cmp	r3, #29
 8005564:	d001      	beq.n	800556a <__sflush_r+0xaa>
 8005566:	2b16      	cmp	r3, #22
 8005568:	d11d      	bne.n	80055a6 <__sflush_r+0xe6>
 800556a:	602f      	str	r7, [r5, #0]
 800556c:	2000      	movs	r0, #0
 800556e:	e021      	b.n	80055b4 <__sflush_r+0xf4>
 8005570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005574:	b21b      	sxth	r3, r3
 8005576:	e01a      	b.n	80055ae <__sflush_r+0xee>
 8005578:	690f      	ldr	r7, [r1, #16]
 800557a:	2f00      	cmp	r7, #0
 800557c:	d0f6      	beq.n	800556c <__sflush_r+0xac>
 800557e:	0793      	lsls	r3, r2, #30
 8005580:	bf18      	it	ne
 8005582:	2300      	movne	r3, #0
 8005584:	680e      	ldr	r6, [r1, #0]
 8005586:	bf08      	it	eq
 8005588:	694b      	ldreq	r3, [r1, #20]
 800558a:	1bf6      	subs	r6, r6, r7
 800558c:	600f      	str	r7, [r1, #0]
 800558e:	608b      	str	r3, [r1, #8]
 8005590:	2e00      	cmp	r6, #0
 8005592:	ddeb      	ble.n	800556c <__sflush_r+0xac>
 8005594:	4633      	mov	r3, r6
 8005596:	463a      	mov	r2, r7
 8005598:	4628      	mov	r0, r5
 800559a:	6a21      	ldr	r1, [r4, #32]
 800559c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80055a0:	47e0      	blx	ip
 80055a2:	2800      	cmp	r0, #0
 80055a4:	dc07      	bgt.n	80055b6 <__sflush_r+0xf6>
 80055a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055ae:	f04f 30ff 	mov.w	r0, #4294967295
 80055b2:	81a3      	strh	r3, [r4, #12]
 80055b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b6:	4407      	add	r7, r0
 80055b8:	1a36      	subs	r6, r6, r0
 80055ba:	e7e9      	b.n	8005590 <__sflush_r+0xd0>
 80055bc:	dfbffffe 	.word	0xdfbffffe

080055c0 <_fflush_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	690b      	ldr	r3, [r1, #16]
 80055c4:	4605      	mov	r5, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	b913      	cbnz	r3, 80055d0 <_fflush_r+0x10>
 80055ca:	2500      	movs	r5, #0
 80055cc:	4628      	mov	r0, r5
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	b118      	cbz	r0, 80055da <_fflush_r+0x1a>
 80055d2:	6a03      	ldr	r3, [r0, #32]
 80055d4:	b90b      	cbnz	r3, 80055da <_fflush_r+0x1a>
 80055d6:	f7ff fb33 	bl	8004c40 <__sinit>
 80055da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0f3      	beq.n	80055ca <_fflush_r+0xa>
 80055e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80055e4:	07d0      	lsls	r0, r2, #31
 80055e6:	d404      	bmi.n	80055f2 <_fflush_r+0x32>
 80055e8:	0599      	lsls	r1, r3, #22
 80055ea:	d402      	bmi.n	80055f2 <_fflush_r+0x32>
 80055ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055ee:	f7ff fc3c 	bl	8004e6a <__retarget_lock_acquire_recursive>
 80055f2:	4628      	mov	r0, r5
 80055f4:	4621      	mov	r1, r4
 80055f6:	f7ff ff63 	bl	80054c0 <__sflush_r>
 80055fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055fc:	4605      	mov	r5, r0
 80055fe:	07da      	lsls	r2, r3, #31
 8005600:	d4e4      	bmi.n	80055cc <_fflush_r+0xc>
 8005602:	89a3      	ldrh	r3, [r4, #12]
 8005604:	059b      	lsls	r3, r3, #22
 8005606:	d4e1      	bmi.n	80055cc <_fflush_r+0xc>
 8005608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800560a:	f7ff fc2f 	bl	8004e6c <__retarget_lock_release_recursive>
 800560e:	e7dd      	b.n	80055cc <_fflush_r+0xc>

08005610 <__swbuf_r>:
 8005610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005612:	460e      	mov	r6, r1
 8005614:	4614      	mov	r4, r2
 8005616:	4605      	mov	r5, r0
 8005618:	b118      	cbz	r0, 8005622 <__swbuf_r+0x12>
 800561a:	6a03      	ldr	r3, [r0, #32]
 800561c:	b90b      	cbnz	r3, 8005622 <__swbuf_r+0x12>
 800561e:	f7ff fb0f 	bl	8004c40 <__sinit>
 8005622:	69a3      	ldr	r3, [r4, #24]
 8005624:	60a3      	str	r3, [r4, #8]
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	071a      	lsls	r2, r3, #28
 800562a:	d501      	bpl.n	8005630 <__swbuf_r+0x20>
 800562c:	6923      	ldr	r3, [r4, #16]
 800562e:	b943      	cbnz	r3, 8005642 <__swbuf_r+0x32>
 8005630:	4621      	mov	r1, r4
 8005632:	4628      	mov	r0, r5
 8005634:	f000 f82a 	bl	800568c <__swsetup_r>
 8005638:	b118      	cbz	r0, 8005642 <__swbuf_r+0x32>
 800563a:	f04f 37ff 	mov.w	r7, #4294967295
 800563e:	4638      	mov	r0, r7
 8005640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	6922      	ldr	r2, [r4, #16]
 8005646:	b2f6      	uxtb	r6, r6
 8005648:	1a98      	subs	r0, r3, r2
 800564a:	6963      	ldr	r3, [r4, #20]
 800564c:	4637      	mov	r7, r6
 800564e:	4283      	cmp	r3, r0
 8005650:	dc05      	bgt.n	800565e <__swbuf_r+0x4e>
 8005652:	4621      	mov	r1, r4
 8005654:	4628      	mov	r0, r5
 8005656:	f7ff ffb3 	bl	80055c0 <_fflush_r>
 800565a:	2800      	cmp	r0, #0
 800565c:	d1ed      	bne.n	800563a <__swbuf_r+0x2a>
 800565e:	68a3      	ldr	r3, [r4, #8]
 8005660:	3b01      	subs	r3, #1
 8005662:	60a3      	str	r3, [r4, #8]
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	6022      	str	r2, [r4, #0]
 800566a:	701e      	strb	r6, [r3, #0]
 800566c:	6962      	ldr	r2, [r4, #20]
 800566e:	1c43      	adds	r3, r0, #1
 8005670:	429a      	cmp	r2, r3
 8005672:	d004      	beq.n	800567e <__swbuf_r+0x6e>
 8005674:	89a3      	ldrh	r3, [r4, #12]
 8005676:	07db      	lsls	r3, r3, #31
 8005678:	d5e1      	bpl.n	800563e <__swbuf_r+0x2e>
 800567a:	2e0a      	cmp	r6, #10
 800567c:	d1df      	bne.n	800563e <__swbuf_r+0x2e>
 800567e:	4621      	mov	r1, r4
 8005680:	4628      	mov	r0, r5
 8005682:	f7ff ff9d 	bl	80055c0 <_fflush_r>
 8005686:	2800      	cmp	r0, #0
 8005688:	d0d9      	beq.n	800563e <__swbuf_r+0x2e>
 800568a:	e7d6      	b.n	800563a <__swbuf_r+0x2a>

0800568c <__swsetup_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4b29      	ldr	r3, [pc, #164]	@ (8005734 <__swsetup_r+0xa8>)
 8005690:	4605      	mov	r5, r0
 8005692:	6818      	ldr	r0, [r3, #0]
 8005694:	460c      	mov	r4, r1
 8005696:	b118      	cbz	r0, 80056a0 <__swsetup_r+0x14>
 8005698:	6a03      	ldr	r3, [r0, #32]
 800569a:	b90b      	cbnz	r3, 80056a0 <__swsetup_r+0x14>
 800569c:	f7ff fad0 	bl	8004c40 <__sinit>
 80056a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056a4:	0719      	lsls	r1, r3, #28
 80056a6:	d422      	bmi.n	80056ee <__swsetup_r+0x62>
 80056a8:	06da      	lsls	r2, r3, #27
 80056aa:	d407      	bmi.n	80056bc <__swsetup_r+0x30>
 80056ac:	2209      	movs	r2, #9
 80056ae:	602a      	str	r2, [r5, #0]
 80056b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056b4:	f04f 30ff 	mov.w	r0, #4294967295
 80056b8:	81a3      	strh	r3, [r4, #12]
 80056ba:	e033      	b.n	8005724 <__swsetup_r+0x98>
 80056bc:	0758      	lsls	r0, r3, #29
 80056be:	d512      	bpl.n	80056e6 <__swsetup_r+0x5a>
 80056c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056c2:	b141      	cbz	r1, 80056d6 <__swsetup_r+0x4a>
 80056c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056c8:	4299      	cmp	r1, r3
 80056ca:	d002      	beq.n	80056d2 <__swsetup_r+0x46>
 80056cc:	4628      	mov	r0, r5
 80056ce:	f7ff fbdd 	bl	8004e8c <_free_r>
 80056d2:	2300      	movs	r3, #0
 80056d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80056dc:	81a3      	strh	r3, [r4, #12]
 80056de:	2300      	movs	r3, #0
 80056e0:	6063      	str	r3, [r4, #4]
 80056e2:	6923      	ldr	r3, [r4, #16]
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	89a3      	ldrh	r3, [r4, #12]
 80056e8:	f043 0308 	orr.w	r3, r3, #8
 80056ec:	81a3      	strh	r3, [r4, #12]
 80056ee:	6923      	ldr	r3, [r4, #16]
 80056f0:	b94b      	cbnz	r3, 8005706 <__swsetup_r+0x7a>
 80056f2:	89a3      	ldrh	r3, [r4, #12]
 80056f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80056f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056fc:	d003      	beq.n	8005706 <__swsetup_r+0x7a>
 80056fe:	4621      	mov	r1, r4
 8005700:	4628      	mov	r0, r5
 8005702:	f000 f84c 	bl	800579e <__smakebuf_r>
 8005706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800570a:	f013 0201 	ands.w	r2, r3, #1
 800570e:	d00a      	beq.n	8005726 <__swsetup_r+0x9a>
 8005710:	2200      	movs	r2, #0
 8005712:	60a2      	str	r2, [r4, #8]
 8005714:	6962      	ldr	r2, [r4, #20]
 8005716:	4252      	negs	r2, r2
 8005718:	61a2      	str	r2, [r4, #24]
 800571a:	6922      	ldr	r2, [r4, #16]
 800571c:	b942      	cbnz	r2, 8005730 <__swsetup_r+0xa4>
 800571e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005722:	d1c5      	bne.n	80056b0 <__swsetup_r+0x24>
 8005724:	bd38      	pop	{r3, r4, r5, pc}
 8005726:	0799      	lsls	r1, r3, #30
 8005728:	bf58      	it	pl
 800572a:	6962      	ldrpl	r2, [r4, #20]
 800572c:	60a2      	str	r2, [r4, #8]
 800572e:	e7f4      	b.n	800571a <__swsetup_r+0x8e>
 8005730:	2000      	movs	r0, #0
 8005732:	e7f7      	b.n	8005724 <__swsetup_r+0x98>
 8005734:	20000018 	.word	0x20000018

08005738 <memchr>:
 8005738:	4603      	mov	r3, r0
 800573a:	b510      	push	{r4, lr}
 800573c:	b2c9      	uxtb	r1, r1
 800573e:	4402      	add	r2, r0
 8005740:	4293      	cmp	r3, r2
 8005742:	4618      	mov	r0, r3
 8005744:	d101      	bne.n	800574a <memchr+0x12>
 8005746:	2000      	movs	r0, #0
 8005748:	e003      	b.n	8005752 <memchr+0x1a>
 800574a:	7804      	ldrb	r4, [r0, #0]
 800574c:	3301      	adds	r3, #1
 800574e:	428c      	cmp	r4, r1
 8005750:	d1f6      	bne.n	8005740 <memchr+0x8>
 8005752:	bd10      	pop	{r4, pc}

08005754 <__swhatbuf_r>:
 8005754:	b570      	push	{r4, r5, r6, lr}
 8005756:	460c      	mov	r4, r1
 8005758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800575c:	4615      	mov	r5, r2
 800575e:	2900      	cmp	r1, #0
 8005760:	461e      	mov	r6, r3
 8005762:	b096      	sub	sp, #88	@ 0x58
 8005764:	da0c      	bge.n	8005780 <__swhatbuf_r+0x2c>
 8005766:	89a3      	ldrh	r3, [r4, #12]
 8005768:	2100      	movs	r1, #0
 800576a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800576e:	bf14      	ite	ne
 8005770:	2340      	movne	r3, #64	@ 0x40
 8005772:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005776:	2000      	movs	r0, #0
 8005778:	6031      	str	r1, [r6, #0]
 800577a:	602b      	str	r3, [r5, #0]
 800577c:	b016      	add	sp, #88	@ 0x58
 800577e:	bd70      	pop	{r4, r5, r6, pc}
 8005780:	466a      	mov	r2, sp
 8005782:	f000 f849 	bl	8005818 <_fstat_r>
 8005786:	2800      	cmp	r0, #0
 8005788:	dbed      	blt.n	8005766 <__swhatbuf_r+0x12>
 800578a:	9901      	ldr	r1, [sp, #4]
 800578c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005790:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005794:	4259      	negs	r1, r3
 8005796:	4159      	adcs	r1, r3
 8005798:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800579c:	e7eb      	b.n	8005776 <__swhatbuf_r+0x22>

0800579e <__smakebuf_r>:
 800579e:	898b      	ldrh	r3, [r1, #12]
 80057a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057a2:	079d      	lsls	r5, r3, #30
 80057a4:	4606      	mov	r6, r0
 80057a6:	460c      	mov	r4, r1
 80057a8:	d507      	bpl.n	80057ba <__smakebuf_r+0x1c>
 80057aa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80057ae:	6023      	str	r3, [r4, #0]
 80057b0:	6123      	str	r3, [r4, #16]
 80057b2:	2301      	movs	r3, #1
 80057b4:	6163      	str	r3, [r4, #20]
 80057b6:	b003      	add	sp, #12
 80057b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ba:	466a      	mov	r2, sp
 80057bc:	ab01      	add	r3, sp, #4
 80057be:	f7ff ffc9 	bl	8005754 <__swhatbuf_r>
 80057c2:	9f00      	ldr	r7, [sp, #0]
 80057c4:	4605      	mov	r5, r0
 80057c6:	4639      	mov	r1, r7
 80057c8:	4630      	mov	r0, r6
 80057ca:	f7ff f921 	bl	8004a10 <_malloc_r>
 80057ce:	b948      	cbnz	r0, 80057e4 <__smakebuf_r+0x46>
 80057d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057d4:	059a      	lsls	r2, r3, #22
 80057d6:	d4ee      	bmi.n	80057b6 <__smakebuf_r+0x18>
 80057d8:	f023 0303 	bic.w	r3, r3, #3
 80057dc:	f043 0302 	orr.w	r3, r3, #2
 80057e0:	81a3      	strh	r3, [r4, #12]
 80057e2:	e7e2      	b.n	80057aa <__smakebuf_r+0xc>
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80057ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ee:	81a3      	strh	r3, [r4, #12]
 80057f0:	9b01      	ldr	r3, [sp, #4]
 80057f2:	6020      	str	r0, [r4, #0]
 80057f4:	b15b      	cbz	r3, 800580e <__smakebuf_r+0x70>
 80057f6:	4630      	mov	r0, r6
 80057f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057fc:	f000 f81e 	bl	800583c <_isatty_r>
 8005800:	b128      	cbz	r0, 800580e <__smakebuf_r+0x70>
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	f023 0303 	bic.w	r3, r3, #3
 8005808:	f043 0301 	orr.w	r3, r3, #1
 800580c:	81a3      	strh	r3, [r4, #12]
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	431d      	orrs	r5, r3
 8005812:	81a5      	strh	r5, [r4, #12]
 8005814:	e7cf      	b.n	80057b6 <__smakebuf_r+0x18>
	...

08005818 <_fstat_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	2300      	movs	r3, #0
 800581c:	4d06      	ldr	r5, [pc, #24]	@ (8005838 <_fstat_r+0x20>)
 800581e:	4604      	mov	r4, r0
 8005820:	4608      	mov	r0, r1
 8005822:	4611      	mov	r1, r2
 8005824:	602b      	str	r3, [r5, #0]
 8005826:	f7fc fda5 	bl	8002374 <_fstat>
 800582a:	1c43      	adds	r3, r0, #1
 800582c:	d102      	bne.n	8005834 <_fstat_r+0x1c>
 800582e:	682b      	ldr	r3, [r5, #0]
 8005830:	b103      	cbz	r3, 8005834 <_fstat_r+0x1c>
 8005832:	6023      	str	r3, [r4, #0]
 8005834:	bd38      	pop	{r3, r4, r5, pc}
 8005836:	bf00      	nop
 8005838:	2000093c 	.word	0x2000093c

0800583c <_isatty_r>:
 800583c:	b538      	push	{r3, r4, r5, lr}
 800583e:	2300      	movs	r3, #0
 8005840:	4d05      	ldr	r5, [pc, #20]	@ (8005858 <_isatty_r+0x1c>)
 8005842:	4604      	mov	r4, r0
 8005844:	4608      	mov	r0, r1
 8005846:	602b      	str	r3, [r5, #0]
 8005848:	f7fc fda3 	bl	8002392 <_isatty>
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d102      	bne.n	8005856 <_isatty_r+0x1a>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	b103      	cbz	r3, 8005856 <_isatty_r+0x1a>
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	bd38      	pop	{r3, r4, r5, pc}
 8005858:	2000093c 	.word	0x2000093c

0800585c <_init>:
 800585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585e:	bf00      	nop
 8005860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005862:	bc08      	pop	{r3}
 8005864:	469e      	mov	lr, r3
 8005866:	4770      	bx	lr

08005868 <_fini>:
 8005868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586a:	bf00      	nop
 800586c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586e:	bc08      	pop	{r3}
 8005870:	469e      	mov	lr, r3
 8005872:	4770      	bx	lr
