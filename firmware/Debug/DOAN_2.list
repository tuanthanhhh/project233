
DOAN_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a20  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001234  08005b30  08005b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d64  08006d64  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006d64  08006d64  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d64  08006d64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d64  08006d64  00016d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d68  08006d68  00016d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a10  20000070  08006ddc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a80  08006ddc  00020a80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001041b  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002714  00000000  00000000  000304f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  00032c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af1  00000000  00000000  00033a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001933d  00000000  00000000  00034531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011bd8  00000000  00000000  0004d86e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a89a  00000000  00000000  0005f446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045c0  00000000  00000000  000e9ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ee2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b18 	.word	0x08005b18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005b18 	.word	0x08005b18

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <SSD1306_DrawBitmap>:
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}

void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60ba      	str	r2, [r7, #8]
 8000934:	461a      	mov	r2, r3
 8000936:	4603      	mov	r3, r0
 8000938:	81fb      	strh	r3, [r7, #14]
 800093a:	460b      	mov	r3, r1
 800093c:	81bb      	strh	r3, [r7, #12]
 800093e:	4613      	mov	r3, r2
 8000940:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000946:	3307      	adds	r3, #7
 8000948:	2b00      	cmp	r3, #0
 800094a:	da00      	bge.n	800094e <SSD1306_DrawBitmap+0x22>
 800094c:	3307      	adds	r3, #7
 800094e:	10db      	asrs	r3, r3, #3
 8000950:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000956:	2300      	movs	r3, #0
 8000958:	82bb      	strh	r3, [r7, #20]
 800095a:	e044      	b.n	80009e6 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800095c:	2300      	movs	r3, #0
 800095e:	827b      	strh	r3, [r7, #18]
 8000960:	e02f      	b.n	80009c2 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000962:	8a7b      	ldrh	r3, [r7, #18]
 8000964:	f003 0307 	and.w	r3, r3, #7
 8000968:	2b00      	cmp	r3, #0
 800096a:	d003      	beq.n	8000974 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800096c:	7dfb      	ldrb	r3, [r7, #23]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	75fb      	strb	r3, [r7, #23]
 8000972:	e012      	b.n	800099a <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000974:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000978:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800097c:	fb03 f202 	mul.w	r2, r3, r2
 8000980:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000984:	2b00      	cmp	r3, #0
 8000986:	da00      	bge.n	800098a <SSD1306_DrawBitmap+0x5e>
 8000988:	3307      	adds	r3, #7
 800098a:	10db      	asrs	r3, r3, #3
 800098c:	b21b      	sxth	r3, r3
 800098e:	4413      	add	r3, r2
 8000990:	461a      	mov	r2, r3
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	4413      	add	r3, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800099a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	da09      	bge.n	80009b6 <SSD1306_DrawBitmap+0x8a>
 80009a2:	89fa      	ldrh	r2, [r7, #14]
 80009a4:	8a7b      	ldrh	r3, [r7, #18]
 80009a6:	4413      	add	r3, r2
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	89b9      	ldrh	r1, [r7, #12]
 80009ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80009ae:	b2d2      	uxtb	r2, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 f92d 	bl	8000c10 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80009b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	3301      	adds	r3, #1
 80009be:	b29b      	uxth	r3, r3
 80009c0:	827b      	strh	r3, [r7, #18]
 80009c2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80009c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	dbc9      	blt.n	8000962 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80009ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	3301      	adds	r3, #1
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	82bb      	strh	r3, [r7, #20]
 80009da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	3301      	adds	r3, #1
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	81bb      	strh	r3, [r7, #12]
 80009e6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80009ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	dbb4      	blt.n	800095c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80009f2:	bf00      	nop
 80009f4:	bf00      	nop
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <SSD1306_Init>:

uint8_t SSD1306_Init(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000a02:	f000 facb 	bl	8000f9c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000a06:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2178      	movs	r1, #120	; 0x78
 8000a0e:	485b      	ldr	r0, [pc, #364]	; (8000b7c <SSD1306_Init+0x180>)
 8000a10:	f002 fa94 	bl	8002f3c <HAL_I2C_IsDeviceReady>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e0a9      	b.n	8000b72 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000a1e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000a22:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a24:	e002      	b.n	8000a2c <SSD1306_Init+0x30>
		p--;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1f9      	bne.n	8000a26 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000a32:	22ae      	movs	r2, #174	; 0xae
 8000a34:	2100      	movs	r1, #0
 8000a36:	2078      	movs	r0, #120	; 0x78
 8000a38:	f000 fb2a 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000a3c:	2220      	movs	r2, #32
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2078      	movs	r0, #120	; 0x78
 8000a42:	f000 fb25 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000a46:	2210      	movs	r2, #16
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2078      	movs	r0, #120	; 0x78
 8000a4c:	f000 fb20 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a50:	22b0      	movs	r2, #176	; 0xb0
 8000a52:	2100      	movs	r1, #0
 8000a54:	2078      	movs	r0, #120	; 0x78
 8000a56:	f000 fb1b 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000a5a:	22c8      	movs	r2, #200	; 0xc8
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2078      	movs	r0, #120	; 0x78
 8000a60:	f000 fb16 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	2078      	movs	r0, #120	; 0x78
 8000a6a:	f000 fb11 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000a6e:	2210      	movs	r2, #16
 8000a70:	2100      	movs	r1, #0
 8000a72:	2078      	movs	r0, #120	; 0x78
 8000a74:	f000 fb0c 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000a78:	2240      	movs	r2, #64	; 0x40
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2078      	movs	r0, #120	; 0x78
 8000a7e:	f000 fb07 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000a82:	2281      	movs	r2, #129	; 0x81
 8000a84:	2100      	movs	r1, #0
 8000a86:	2078      	movs	r0, #120	; 0x78
 8000a88:	f000 fb02 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000a8c:	22ff      	movs	r2, #255	; 0xff
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2078      	movs	r0, #120	; 0x78
 8000a92:	f000 fafd 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000a96:	22a1      	movs	r2, #161	; 0xa1
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2078      	movs	r0, #120	; 0x78
 8000a9c:	f000 faf8 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000aa0:	22a6      	movs	r2, #166	; 0xa6
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2078      	movs	r0, #120	; 0x78
 8000aa6:	f000 faf3 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000aaa:	22a8      	movs	r2, #168	; 0xa8
 8000aac:	2100      	movs	r1, #0
 8000aae:	2078      	movs	r0, #120	; 0x78
 8000ab0:	f000 faee 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000ab4:	223f      	movs	r2, #63	; 0x3f
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2078      	movs	r0, #120	; 0x78
 8000aba:	f000 fae9 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000abe:	22a4      	movs	r2, #164	; 0xa4
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2078      	movs	r0, #120	; 0x78
 8000ac4:	f000 fae4 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000ac8:	22d3      	movs	r2, #211	; 0xd3
 8000aca:	2100      	movs	r1, #0
 8000acc:	2078      	movs	r0, #120	; 0x78
 8000ace:	f000 fadf 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2078      	movs	r0, #120	; 0x78
 8000ad8:	f000 fada 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000adc:	22d5      	movs	r2, #213	; 0xd5
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2078      	movs	r0, #120	; 0x78
 8000ae2:	f000 fad5 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000ae6:	22f0      	movs	r2, #240	; 0xf0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2078      	movs	r0, #120	; 0x78
 8000aec:	f000 fad0 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000af0:	22d9      	movs	r2, #217	; 0xd9
 8000af2:	2100      	movs	r1, #0
 8000af4:	2078      	movs	r0, #120	; 0x78
 8000af6:	f000 facb 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000afa:	2222      	movs	r2, #34	; 0x22
 8000afc:	2100      	movs	r1, #0
 8000afe:	2078      	movs	r0, #120	; 0x78
 8000b00:	f000 fac6 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000b04:	22da      	movs	r2, #218	; 0xda
 8000b06:	2100      	movs	r1, #0
 8000b08:	2078      	movs	r0, #120	; 0x78
 8000b0a:	f000 fac1 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000b0e:	2212      	movs	r2, #18
 8000b10:	2100      	movs	r1, #0
 8000b12:	2078      	movs	r0, #120	; 0x78
 8000b14:	f000 fabc 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000b18:	22db      	movs	r2, #219	; 0xdb
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2078      	movs	r0, #120	; 0x78
 8000b1e:	f000 fab7 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000b22:	2220      	movs	r2, #32
 8000b24:	2100      	movs	r1, #0
 8000b26:	2078      	movs	r0, #120	; 0x78
 8000b28:	f000 fab2 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000b2c:	228d      	movs	r2, #141	; 0x8d
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2078      	movs	r0, #120	; 0x78
 8000b32:	f000 faad 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000b36:	2214      	movs	r2, #20
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2078      	movs	r0, #120	; 0x78
 8000b3c:	f000 faa8 	bl	8001090 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000b40:	22af      	movs	r2, #175	; 0xaf
 8000b42:	2100      	movs	r1, #0
 8000b44:	2078      	movs	r0, #120	; 0x78
 8000b46:	f000 faa3 	bl	8001090 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000b4a:	222e      	movs	r2, #46	; 0x2e
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2078      	movs	r0, #120	; 0x78
 8000b50:	f000 fa9e 	bl	8001090 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 f843 	bl	8000be0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000b5a:	f000 f813 	bl	8000b84 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <SSD1306_Init+0x184>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <SSD1306_Init+0x184>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <SSD1306_Init+0x184>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000b70:	2301      	movs	r3, #1
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000494 	.word	0x20000494
 8000b80:	2000048c 	.word	0x2000048c

08000b84 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	71fb      	strb	r3, [r7, #7]
 8000b8e:	e01d      	b.n	8000bcc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	3b50      	subs	r3, #80	; 0x50
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	461a      	mov	r2, r3
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2078      	movs	r0, #120	; 0x78
 8000b9c:	f000 fa78 	bl	8001090 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2078      	movs	r0, #120	; 0x78
 8000ba6:	f000 fa73 	bl	8001090 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000baa:	2210      	movs	r2, #16
 8000bac:	2100      	movs	r1, #0
 8000bae:	2078      	movs	r0, #120	; 0x78
 8000bb0:	f000 fa6e 	bl	8001090 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	01db      	lsls	r3, r3, #7
 8000bb8:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <SSD1306_UpdateScreen+0x58>)
 8000bba:	441a      	add	r2, r3
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	2078      	movs	r0, #120	; 0x78
 8000bc2:	f000 f9ff 	bl	8000fc4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b07      	cmp	r3, #7
 8000bd0:	d9de      	bls.n	8000b90 <SSD1306_UpdateScreen+0xc>
	}
}
 8000bd2:	bf00      	nop
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	2000008c 	.word	0x2000008c

08000be0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <SSD1306_Fill+0x14>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e000      	b.n	8000bf6 <SSD1306_Fill+0x16>
 8000bf4:	23ff      	movs	r3, #255	; 0xff
 8000bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <SSD1306_Fill+0x2c>)
 8000bfe:	f004 f85b 	bl	8004cb8 <memset>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2000008c 	.word	0x2000008c

08000c10 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	80fb      	strh	r3, [r7, #6]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	80bb      	strh	r3, [r7, #4]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	70fb      	strb	r3, [r7, #3]
	if (
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	2b7f      	cmp	r3, #127	; 0x7f
 8000c26:	d848      	bhi.n	8000cba <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000c28:	88bb      	ldrh	r3, [r7, #4]
 8000c2a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c2c:	d845      	bhi.n	8000cba <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <SSD1306_DrawPixel+0xb4>)
 8000c30:	791b      	ldrb	r3, [r3, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	bf0c      	ite	eq
 8000c3c:	2301      	moveq	r3, #1
 8000c3e:	2300      	movne	r3, #0
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000c44:	78fb      	ldrb	r3, [r7, #3]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d11a      	bne.n	8000c80 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c4a:	88fa      	ldrh	r2, [r7, #6]
 8000c4c:	88bb      	ldrh	r3, [r7, #4]
 8000c4e:	08db      	lsrs	r3, r3, #3
 8000c50:	b298      	uxth	r0, r3
 8000c52:	4603      	mov	r3, r0
 8000c54:	01db      	lsls	r3, r3, #7
 8000c56:	4413      	add	r3, r2
 8000c58:	4a1b      	ldr	r2, [pc, #108]	; (8000cc8 <SSD1306_DrawPixel+0xb8>)
 8000c5a:	5cd3      	ldrb	r3, [r2, r3]
 8000c5c:	b25a      	sxtb	r2, r3
 8000c5e:	88bb      	ldrh	r3, [r7, #4]
 8000c60:	f003 0307 	and.w	r3, r3, #7
 8000c64:	2101      	movs	r1, #1
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b259      	sxtb	r1, r3
 8000c70:	88fa      	ldrh	r2, [r7, #6]
 8000c72:	4603      	mov	r3, r0
 8000c74:	01db      	lsls	r3, r3, #7
 8000c76:	4413      	add	r3, r2
 8000c78:	b2c9      	uxtb	r1, r1
 8000c7a:	4a13      	ldr	r2, [pc, #76]	; (8000cc8 <SSD1306_DrawPixel+0xb8>)
 8000c7c:	54d1      	strb	r1, [r2, r3]
 8000c7e:	e01d      	b.n	8000cbc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c80:	88fa      	ldrh	r2, [r7, #6]
 8000c82:	88bb      	ldrh	r3, [r7, #4]
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	b298      	uxth	r0, r3
 8000c88:	4603      	mov	r3, r0
 8000c8a:	01db      	lsls	r3, r3, #7
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <SSD1306_DrawPixel+0xb8>)
 8000c90:	5cd3      	ldrb	r3, [r2, r3]
 8000c92:	b25a      	sxtb	r2, r3
 8000c94:	88bb      	ldrh	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	b259      	sxtb	r1, r3
 8000caa:	88fa      	ldrh	r2, [r7, #6]
 8000cac:	4603      	mov	r3, r0
 8000cae:	01db      	lsls	r3, r3, #7
 8000cb0:	4413      	add	r3, r2
 8000cb2:	b2c9      	uxtb	r1, r1
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <SSD1306_DrawPixel+0xb8>)
 8000cb6:	54d1      	strb	r1, [r2, r3]
 8000cb8:	e000      	b.n	8000cbc <SSD1306_DrawPixel+0xac>
		return;
 8000cba:	bf00      	nop
	}
}
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	2000048c 	.word	0x2000048c
 8000cc8:	2000008c 	.word	0x2000008c

08000ccc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	460a      	mov	r2, r1
 8000cd6:	80fb      	strh	r3, [r7, #6]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000cdc:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <SSD1306_GotoXY+0x28>)
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <SSD1306_GotoXY+0x28>)
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	8053      	strh	r3, [r2, #2]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	2000048c 	.word	0x2000048c

08000cf8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	4613      	mov	r3, r2
 8000d06:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000d08:	4b3a      	ldr	r3, [pc, #232]	; (8000df4 <SSD1306_Putc+0xfc>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
	if (
 8000d14:	2b7f      	cmp	r3, #127	; 0x7f
 8000d16:	dc07      	bgt.n	8000d28 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000d18:	4b36      	ldr	r3, [pc, #216]	; (8000df4 <SSD1306_Putc+0xfc>)
 8000d1a:	885b      	ldrh	r3, [r3, #2]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	785b      	ldrb	r3, [r3, #1]
 8000d22:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000d24:	2b3f      	cmp	r3, #63	; 0x3f
 8000d26:	dd01      	ble.n	8000d2c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e05e      	b.n	8000dea <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	e04b      	b.n	8000dca <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	3b20      	subs	r3, #32
 8000d3a:	6839      	ldr	r1, [r7, #0]
 8000d3c:	7849      	ldrb	r1, [r1, #1]
 8000d3e:	fb01 f303 	mul.w	r3, r1, r3
 8000d42:	4619      	mov	r1, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	440b      	add	r3, r1
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	4413      	add	r3, r2
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	e030      	b.n	8000db8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d010      	beq.n	8000d88 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000d66:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <SSD1306_Putc+0xfc>)
 8000d68:	881a      	ldrh	r2, [r3, #0]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	4413      	add	r3, r2
 8000d70:	b298      	uxth	r0, r3
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <SSD1306_Putc+0xfc>)
 8000d74:	885a      	ldrh	r2, [r3, #2]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	79ba      	ldrb	r2, [r7, #6]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f7ff ff45 	bl	8000c10 <SSD1306_DrawPixel>
 8000d86:	e014      	b.n	8000db2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000d88:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <SSD1306_Putc+0xfc>)
 8000d8a:	881a      	ldrh	r2, [r3, #0]
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	b298      	uxth	r0, r3
 8000d94:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <SSD1306_Putc+0xfc>)
 8000d96:	885a      	ldrh	r2, [r3, #2]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	4413      	add	r3, r2
 8000d9e:	b299      	uxth	r1, r3
 8000da0:	79bb      	ldrb	r3, [r7, #6]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	bf0c      	ite	eq
 8000da6:	2301      	moveq	r3, #1
 8000da8:	2300      	movne	r3, #0
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	461a      	mov	r2, r3
 8000dae:	f7ff ff2f 	bl	8000c10 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	3301      	adds	r3, #1
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d3c8      	bcc.n	8000d56 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	785b      	ldrb	r3, [r3, #1]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d3ad      	bcc.n	8000d32 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <SSD1306_Putc+0xfc>)
 8000dd8:	881a      	ldrh	r2, [r3, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	4413      	add	r3, r2
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <SSD1306_Putc+0xfc>)
 8000de6:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000de8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2000048c 	.word	0x2000048c

08000df8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	4613      	mov	r3, r2
 8000e04:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000e06:	e012      	b.n	8000e2e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	79fa      	ldrb	r2, [r7, #7]
 8000e0e:	68b9      	ldr	r1, [r7, #8]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff71 	bl	8000cf8 <SSD1306_Putc>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d002      	beq.n	8000e28 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	e008      	b.n	8000e3a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1e8      	bne.n	8000e08 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	781b      	ldrb	r3, [r3, #0]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <SSD1306_Clear>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear (void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff feca 	bl	8000be0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000e4c:	f7ff fe9a 	bl	8000b84 <SSD1306_UpdateScreen>
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <SSD1306_ShowBitmap>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}

void SSD1306_ShowBitmap(const unsigned char bitmap[])
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	6078      	str	r0, [r7, #4]
	SSD1306_Clear();
 8000e5c:	f7ff fff1 	bl	8000e42 <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, bitmap, 128, 64, 1);
 8000e60:	2301      	movs	r3, #1
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	2340      	movs	r3, #64	; 0x40
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff fd5c 	bl	800092c <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8000e74:	f7ff fe86 	bl	8000b84 <SSD1306_UpdateScreen>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <SSD1306_Counter>:
	}
	va_end(args);
}

void SSD1306_Counter(uint8_t seconds)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	uint8_t currentTime = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	75fb      	strb	r3, [r7, #23]
	char currentTimeString[10];

	SSD1306_Clear();
 8000e8e:	f7ff ffd8 	bl	8000e42 <SSD1306_Clear>

	while(currentTime <= seconds)
 8000e92:	e025      	b.n	8000ee0 <SSD1306_Counter+0x60>
	{
		snprintf(currentTimeString, sizeof(currentTimeString), "%d", currentTime);
 8000e94:	7dfb      	ldrb	r3, [r7, #23]
 8000e96:	f107 000c 	add.w	r0, r7, #12
 8000e9a:	4a21      	ldr	r2, [pc, #132]	; (8000f20 <SSD1306_Counter+0xa0>)
 8000e9c:	210a      	movs	r1, #10
 8000e9e:	f003 fe73 	bl	8004b88 <sniprintf>
		SSD1306_Clear();
 8000ea2:	f7ff ffce 	bl	8000e42 <SSD1306_Clear>
		SSD1306_GotoXY(32, 0);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2020      	movs	r0, #32
 8000eaa:	f7ff ff0f 	bl	8000ccc <SSD1306_GotoXY>
		SSD1306_Puts("COUNTER", &Font_11x18, 1);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	491c      	ldr	r1, [pc, #112]	; (8000f24 <SSD1306_Counter+0xa4>)
 8000eb2:	481d      	ldr	r0, [pc, #116]	; (8000f28 <SSD1306_Counter+0xa8>)
 8000eb4:	f7ff ffa0 	bl	8000df8 <SSD1306_Puts>
		SSD1306_GotoXY(64, 16);
 8000eb8:	2110      	movs	r1, #16
 8000eba:	2040      	movs	r0, #64	; 0x40
 8000ebc:	f7ff ff06 	bl	8000ccc <SSD1306_GotoXY>
		SSD1306_Puts(currentTimeString, &Font_11x18, 1);
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4917      	ldr	r1, [pc, #92]	; (8000f24 <SSD1306_Counter+0xa4>)
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff95 	bl	8000df8 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000ece:	f7ff fe59 	bl	8000b84 <SSD1306_UpdateScreen>
		HAL_Delay(1000);
 8000ed2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed6:	f001 f893 	bl	8002000 <HAL_Delay>
		currentTime++;
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
 8000edc:	3301      	adds	r3, #1
 8000ede:	75fb      	strb	r3, [r7, #23]
	while(currentTime <= seconds)
 8000ee0:	7dfa      	ldrb	r2, [r7, #23]
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d9d5      	bls.n	8000e94 <SSD1306_Counter+0x14>
	}

	SSD1306_Clear();
 8000ee8:	f7ff ffab 	bl	8000e42 <SSD1306_Clear>
	SSD1306_GotoXY(32, 0);
 8000eec:	2100      	movs	r1, #0
 8000eee:	2020      	movs	r0, #32
 8000ef0:	f7ff feec 	bl	8000ccc <SSD1306_GotoXY>
	SSD1306_Puts("COUNTER", &Font_11x18, 1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	490b      	ldr	r1, [pc, #44]	; (8000f24 <SSD1306_Counter+0xa4>)
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <SSD1306_Counter+0xa8>)
 8000efa:	f7ff ff7d 	bl	8000df8 <SSD1306_Puts>
	SSD1306_GotoXY(64, 16);
 8000efe:	2110      	movs	r1, #16
 8000f00:	2040      	movs	r0, #64	; 0x40
 8000f02:	f7ff fee3 	bl	8000ccc <SSD1306_GotoXY>
	SSD1306_Puts(currentTimeString, &Font_11x18, 1);
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4905      	ldr	r1, [pc, #20]	; (8000f24 <SSD1306_Counter+0xa4>)
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff72 	bl	8000df8 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000f14:	f7ff fe36 	bl	8000b84 <SSD1306_UpdateScreen>
}
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	08005b30 	.word	0x08005b30
 8000f24:	20000000 	.word	0x20000000
 8000f28:	08005b34 	.word	0x08005b34

08000f2c <SSD1306_Println>:

void SSD1306_Println(char* format, ...)
{
 8000f2c:	b40f      	push	{r0, r1, r2, r3}
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
	char buffer[20];
	buffer[0] = '\0';
 8000f34:	2300      	movs	r3, #0
 8000f36:	713b      	strb	r3, [r7, #4]

	va_list argList;
	va_start(argList, format);
 8000f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3c:	603b      	str	r3, [r7, #0]
	vsprintf(buffer, format, argList);
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	6a39      	ldr	r1, [r7, #32]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f003 fead 	bl	8004ca4 <vsiprintf>

	va_end(argList);

	if (actualYPosition > 40)
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <SSD1306_Println+0x68>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b28      	cmp	r3, #40	; 0x28
 8000f50:	d904      	bls.n	8000f5c <SSD1306_Println+0x30>
	{
		SSD1306_Clear();
 8000f52:	f7ff ff76 	bl	8000e42 <SSD1306_Clear>
		actualYPosition = 0;
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <SSD1306_Println+0x68>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
	}
	SSD1306_GotoXY(0, actualYPosition);
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <SSD1306_Println+0x68>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	4619      	mov	r1, r3
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff feb1 	bl	8000ccc <SSD1306_GotoXY>
	SSD1306_Puts (buffer, &Font_11x18, 1);
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	490a      	ldr	r1, [pc, #40]	; (8000f98 <SSD1306_Println+0x6c>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff41 	bl	8000df8 <SSD1306_Puts>
	actualYPosition += 20;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <SSD1306_Println+0x68>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	3314      	adds	r3, #20
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SSD1306_Println+0x68>)
 8000f80:	701a      	strb	r2, [r3, #0]

	SSD1306_UpdateScreen();
 8000f82:	f7ff fdff 	bl	8000b84 <SSD1306_UpdateScreen>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f90:	b004      	add	sp, #16
 8000f92:	4770      	bx	lr
 8000f94:	20000492 	.word	0x20000492
 8000f98:	20000000 	.word	0x20000000

08000f9c <ssd1306_I2C_Init>:


/* I2C Functions */

void ssd1306_I2C_Init() {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <ssd1306_I2C_Init+0x24>)
 8000fa4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fa6:	e002      	b.n	8000fae <ssd1306_I2C_Init+0x12>
		p--;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f9      	bne.n	8000fa8 <ssd1306_I2C_Init+0xc>
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	0003d090 	.word	0x0003d090

08000fc4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b0c7      	sub	sp, #284	; 0x11c
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	4604      	mov	r4, r0
 8000fcc:	4608      	mov	r0, r1
 8000fce:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000fd2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000fd6:	600a      	str	r2, [r1, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fde:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000fe2:	4622      	mov	r2, r4
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fea:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000fee:	4602      	mov	r2, r0
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ff6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ffa:	460a      	mov	r2, r1
 8000ffc:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8000ffe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001006:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800100a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800100e:	7812      	ldrb	r2, [r2, #0]
 8001010:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001012:	2300      	movs	r3, #0
 8001014:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001018:	e015      	b.n	8001046 <ssd1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 800101a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800101e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001022:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001026:	6812      	ldr	r2, [r2, #0]
 8001028:	441a      	add	r2, r3
 800102a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800102e:	3301      	adds	r3, #1
 8001030:	7811      	ldrb	r1, [r2, #0]
 8001032:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001036:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800103a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 800103c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001040:	3301      	adds	r3, #1
 8001042:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001046:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800104a:	b29b      	uxth	r3, r3
 800104c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001050:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001054:	8812      	ldrh	r2, [r2, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	d8df      	bhi.n	800101a <ssd1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800105a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800105e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b299      	uxth	r1, r3
 8001066:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800106a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	b29b      	uxth	r3, r3
 8001074:	f107 020c 	add.w	r2, r7, #12
 8001078:	200a      	movs	r0, #10
 800107a:	9000      	str	r0, [sp, #0]
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <ssd1306_I2C_WriteMulti+0xc8>)
 800107e:	f001 fbf3 	bl	8002868 <HAL_I2C_Master_Transmit>
}
 8001082:	bf00      	nop
 8001084:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001088:	46bd      	mov	sp, r7
 800108a:	bd90      	pop	{r4, r7, pc}
 800108c:	20000494 	.word	0x20000494

08001090 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af02      	add	r7, sp, #8
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	460b      	mov	r3, r1
 800109c:	71bb      	strb	r3, [r7, #6]
 800109e:	4613      	mov	r3, r2
 80010a0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80010a6:	797b      	ldrb	r3, [r7, #5]
 80010a8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	b299      	uxth	r1, r3
 80010ae:	f107 020c 	add.w	r2, r7, #12
 80010b2:	230a      	movs	r3, #10
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2302      	movs	r3, #2
 80010b8:	4803      	ldr	r0, [pc, #12]	; (80010c8 <ssd1306_I2C_Write+0x38>)
 80010ba:	f001 fbd5 	bl	8002868 <HAL_I2C_Master_Transmit>
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000494 	.word	0x20000494

080010cc <__io_putchar>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USER CODE BEGIN PV */
// printf() function
int __io_putchar(int ch)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint8_t temp = ch;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart1, &temp, 1, HAL_MAX_DELAY);
 80010da:	f107 010f 	add.w	r1, r7, #15
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	2201      	movs	r2, #1
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <__io_putchar+0x28>)
 80010e6:	f003 f9f1 	bl	80044cc <HAL_UART_Transmit>
  return ch;
 80010ea:	687b      	ldr	r3, [r7, #4]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200004e8 	.word	0x200004e8

080010f8 <max30102_plot>:

// Override plot function
void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    // printf("ir:%u\n", ir_sample);                  // Print IR only
    // printf("r:%u\n", red_sample);                  // Print Red only
    printf("ir:%lu,r:%lu\n", ir_sample, red_sample);    // Print IR and Red
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4803      	ldr	r0, [pc, #12]	; (8001114 <max30102_plot+0x1c>)
 8001108:	f003 fd2c 	bl	8004b64 <iprintf>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	08005b3c 	.word	0x08005b3c

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111e:	f000 ff0d 	bl	8001f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001122:	f000 f90b 	bl	800133c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001126:	f000 f9df 	bl	80014e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800112a:	f000 f963 	bl	80013f4 <MX_I2C1_Init>
  MX_USB_PCD_Init();
 800112e:	f000 f9b9 	bl	80014a4 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 8001132:	f000 f98d 	bl	8001450 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initiation
  max30102_init(&max30102, &hi2c1);
 8001136:	4971      	ldr	r1, [pc, #452]	; (80012fc <main+0x1e4>)
 8001138:	4871      	ldr	r0, [pc, #452]	; (8001300 <main+0x1e8>)
 800113a:	f000 fc24 	bl	8001986 <max30102_init>
  max30102_reset(&max30102);
 800113e:	4870      	ldr	r0, [pc, #448]	; (8001300 <main+0x1e8>)
 8001140:	f000 fc98 	bl	8001a74 <max30102_reset>
  max30102_clear_fifo(&max30102);
 8001144:	486e      	ldr	r0, [pc, #440]	; (8001300 <main+0x1e8>)
 8001146:	f000 fe5d 	bl	8001e04 <max30102_clear_fifo>
  max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 800114a:	2307      	movs	r3, #7
 800114c:	2201      	movs	r2, #1
 800114e:	2103      	movs	r1, #3
 8001150:	486b      	ldr	r0, [pc, #428]	; (8001300 <main+0x1e8>)
 8001152:	f000 fe1d 	bl	8001d90 <max30102_set_fifo_config>

  // Sensor settings
  max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8001156:	2101      	movs	r1, #1
 8001158:	4869      	ldr	r0, [pc, #420]	; (8001300 <main+0x1e8>)
 800115a:	f000 fd80 	bl	8001c5e <max30102_set_led_pulse_width>
  max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 800115e:	2100      	movs	r1, #0
 8001160:	4867      	ldr	r0, [pc, #412]	; (8001300 <main+0x1e8>)
 8001162:	f000 fd9f 	bl	8001ca4 <max30102_set_adc_resolution>
  max30102_set_sampling_rate(&max30102, max30102_sr_800);
 8001166:	2104      	movs	r1, #4
 8001168:	4865      	ldr	r0, [pc, #404]	; (8001300 <main+0x1e8>)
 800116a:	f000 fd59 	bl	8001c20 <max30102_set_sampling_rate>
  max30102_set_led_current_1(&max30102, 6.2);
 800116e:	4965      	ldr	r1, [pc, #404]	; (8001304 <main+0x1ec>)
 8001170:	4863      	ldr	r0, [pc, #396]	; (8001300 <main+0x1e8>)
 8001172:	f000 fdbd 	bl	8001cf0 <max30102_set_led_current_1>
  max30102_set_led_current_2(&max30102, 6.2);
 8001176:	4963      	ldr	r1, [pc, #396]	; (8001304 <main+0x1ec>)
 8001178:	4861      	ldr	r0, [pc, #388]	; (8001300 <main+0x1e8>)
 800117a:	f000 fde1 	bl	8001d40 <max30102_set_led_current_2>

  // Enter SpO2 mode
  max30102_set_mode(&max30102, max30102_spo2);
 800117e:	2103      	movs	r1, #3
 8001180:	485f      	ldr	r0, [pc, #380]	; (8001300 <main+0x1e8>)
 8001182:	f000 fd27 	bl	8001bd4 <max30102_set_mode>
  max30102_set_a_full(&max30102, 1);
 8001186:	2101      	movs	r1, #1
 8001188:	485d      	ldr	r0, [pc, #372]	; (8001300 <main+0x1e8>)
 800118a:	f000 fc84 	bl	8001a96 <max30102_set_a_full>

  // Initiate 1 temperature measurement
  max30102_set_die_temp_en(&max30102, 1);
 800118e:	2101      	movs	r1, #1
 8001190:	485b      	ldr	r0, [pc, #364]	; (8001300 <main+0x1e8>)
 8001192:	f000 fcc0 	bl	8001b16 <max30102_set_die_temp_en>
  max30102_set_die_temp_rdy(&max30102, 1);
 8001196:	2101      	movs	r1, #1
 8001198:	4859      	ldr	r0, [pc, #356]	; (8001300 <main+0x1e8>)
 800119a:	f000 fca4 	bl	8001ae6 <max30102_set_die_temp_rdy>

  uint8_t en_reg[2] = {0};
 800119e:	2300      	movs	r3, #0
 80011a0:	80bb      	strh	r3, [r7, #4]
  max30102_read(&max30102, 0x00, en_reg, 1);
 80011a2:	1d3a      	adds	r2, r7, #4
 80011a4:	2301      	movs	r3, #1
 80011a6:	2100      	movs	r1, #0
 80011a8:	4855      	ldr	r0, [pc, #340]	; (8001300 <main+0x1e8>)
 80011aa:	f000 fc3e 	bl	8001a2a <max30102_read>
  SSD1306_Init();
 80011ae:	f7ff fc25 	bl	80009fc <SSD1306_Init>
  HAL_Delay(1000);
 80011b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b6:	f000 ff23 	bl	8002000 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	 printf("hello");
 80011ba:	4853      	ldr	r0, [pc, #332]	; (8001308 <main+0x1f0>)
 80011bc:	f003 fcd2 	bl	8004b64 <iprintf>

	    if (max30102_has_interrupt(&max30102))
 80011c0:	484f      	ldr	r0, [pc, #316]	; (8001300 <main+0x1e8>)
 80011c2:	f000 fccd 	bl	8001b60 <max30102_has_interrupt>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d015      	beq.n	80011f8 <main+0xe0>
	    {
	      max30102_interrupt_handler(&max30102);
 80011cc:	484c      	ldr	r0, [pc, #304]	; (8001300 <main+0x1e8>)
 80011ce:	f000 fcd3 	bl	8001b78 <max30102_interrupt_handler>
	      value = max30102._red_samples;
 80011d2:	4b4e      	ldr	r3, [pc, #312]	; (800130c <main+0x1f4>)
 80011d4:	4a4e      	ldr	r2, [pc, #312]	; (8001310 <main+0x1f8>)
 80011d6:	601a      	str	r2, [r3, #0]
	      SSD1306_Clear();
 80011d8:	f7ff fe33 	bl	8000e42 <SSD1306_Clear>
	      SSD1306_UpdateScreen();
 80011dc:	f7ff fcd2 	bl	8000b84 <SSD1306_UpdateScreen>
	      SSD1306_Println("bpm = %u", *value);
 80011e0:	4b4a      	ldr	r3, [pc, #296]	; (800130c <main+0x1f4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4619      	mov	r1, r3
 80011e8:	484a      	ldr	r0, [pc, #296]	; (8001314 <main+0x1fc>)
 80011ea:	f7ff fe9f 	bl	8000f2c <SSD1306_Println>
	      HAL_Delay(1000);
 80011ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f2:	f000 ff05 	bl	8002000 <HAL_Delay>
 80011f6:	e7e0      	b.n	80011ba <main+0xa2>
	    }
	    else
	    {
	    	SSD1306_GotoXY (0,0);
 80011f8:	2100      	movs	r1, #0
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff fd66 	bl	8000ccc <SSD1306_GotoXY>
	    		SSD1306_Puts ("Counter", &Font_11x18, 1);
 8001200:	2201      	movs	r2, #1
 8001202:	4945      	ldr	r1, [pc, #276]	; (8001318 <main+0x200>)
 8001204:	4845      	ldr	r0, [pc, #276]	; (800131c <main+0x204>)
 8001206:	f7ff fdf7 	bl	8000df8 <SSD1306_Puts>
	    		SSD1306_GotoXY (10, 30);
 800120a:	211e      	movs	r1, #30
 800120c:	200a      	movs	r0, #10
 800120e:	f7ff fd5d 	bl	8000ccc <SSD1306_GotoXY>
	    		SSD1306_Puts ("API!", &Font_11x18, 1);
 8001212:	2201      	movs	r2, #1
 8001214:	4940      	ldr	r1, [pc, #256]	; (8001318 <main+0x200>)
 8001216:	4842      	ldr	r0, [pc, #264]	; (8001320 <main+0x208>)
 8001218:	f7ff fdee 	bl	8000df8 <SSD1306_Puts>
	    		SSD1306_UpdateScreen();
 800121c:	f7ff fcb2 	bl	8000b84 <SSD1306_UpdateScreen>
	    		HAL_Delay(2000);
 8001220:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001224:	f000 feec 	bl	8002000 <HAL_Delay>
	    		SSD1306_Counter(5);
 8001228:	2005      	movs	r0, #5
 800122a:	f7ff fe29 	bl	8000e80 <SSD1306_Counter>

	    		SSD1306_Clear();
 800122e:	f7ff fe08 	bl	8000e42 <SSD1306_Clear>
	    		SSD1306_GotoXY (0,0);
 8001232:	2100      	movs	r1, #0
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff fd49 	bl	8000ccc <SSD1306_GotoXY>
	    		SSD1306_Puts ("printf", &Font_11x18, 1);
 800123a:	2201      	movs	r2, #1
 800123c:	4936      	ldr	r1, [pc, #216]	; (8001318 <main+0x200>)
 800123e:	4839      	ldr	r0, [pc, #228]	; (8001324 <main+0x20c>)
 8001240:	f7ff fdda 	bl	8000df8 <SSD1306_Puts>
	    		SSD1306_GotoXY (10, 30);
 8001244:	211e      	movs	r1, #30
 8001246:	200a      	movs	r0, #10
 8001248:	f7ff fd40 	bl	8000ccc <SSD1306_GotoXY>
	    		SSD1306_Puts ("API!", &Font_11x18, 1);
 800124c:	2201      	movs	r2, #1
 800124e:	4932      	ldr	r1, [pc, #200]	; (8001318 <main+0x200>)
 8001250:	4833      	ldr	r0, [pc, #204]	; (8001320 <main+0x208>)
 8001252:	f7ff fdd1 	bl	8000df8 <SSD1306_Puts>
	    		SSD1306_UpdateScreen();
 8001256:	f7ff fc95 	bl	8000b84 <SSD1306_UpdateScreen>
	    		HAL_Delay(2000);
 800125a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800125e:	f000 fecf 	bl	8002000 <HAL_Delay>
	    		SSD1306_Clear();
 8001262:	f7ff fdee 	bl	8000e42 <SSD1306_Clear>
	    		for (uint8_t i = 0; i < 5; i++)
 8001266:	2300      	movs	r3, #0
 8001268:	71fb      	strb	r3, [r7, #7]
 800126a:	e021      	b.n	80012b0 <main+0x198>
	    		{
	    			SSD1306_Println("var1 = %i", i);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4619      	mov	r1, r3
 8001270:	482d      	ldr	r0, [pc, #180]	; (8001328 <main+0x210>)
 8001272:	f7ff fe5b 	bl	8000f2c <SSD1306_Println>
	    			HAL_Delay(1000);
 8001276:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127a:	f000 fec1 	bl	8002000 <HAL_Delay>
	    			SSD1306_Println("var2 = %d", i*3);
 800127e:	79fa      	ldrb	r2, [r7, #7]
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	4619      	mov	r1, r3
 8001288:	4828      	ldr	r0, [pc, #160]	; (800132c <main+0x214>)
 800128a:	f7ff fe4f 	bl	8000f2c <SSD1306_Println>
	    			HAL_Delay(1000);
 800128e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001292:	f000 feb5 	bl	8002000 <HAL_Delay>
	    			SSD1306_Println("var3 = %i", i*4);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4619      	mov	r1, r3
 800129c:	4824      	ldr	r0, [pc, #144]	; (8001330 <main+0x218>)
 800129e:	f7ff fe45 	bl	8000f2c <SSD1306_Println>
	    			HAL_Delay(1000);
 80012a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a6:	f000 feab 	bl	8002000 <HAL_Delay>
	    		for (uint8_t i = 0; i < 5; i++)
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	3301      	adds	r3, #1
 80012ae:	71fb      	strb	r3, [r7, #7]
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d9da      	bls.n	800126c <main+0x154>
	    		}

	    		SSD1306_Clear();
 80012b6:	f7ff fdc4 	bl	8000e42 <SSD1306_Clear>
	    		SSD1306_GotoXY (0,0);
 80012ba:	2100      	movs	r1, #0
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff fd05 	bl	8000ccc <SSD1306_GotoXY>
	    		SSD1306_Puts ("Show BMP", &Font_11x18, 1);
 80012c2:	2201      	movs	r2, #1
 80012c4:	4914      	ldr	r1, [pc, #80]	; (8001318 <main+0x200>)
 80012c6:	481b      	ldr	r0, [pc, #108]	; (8001334 <main+0x21c>)
 80012c8:	f7ff fd96 	bl	8000df8 <SSD1306_Puts>
	    		SSD1306_GotoXY (10, 30);
 80012cc:	211e      	movs	r1, #30
 80012ce:	200a      	movs	r0, #10
 80012d0:	f7ff fcfc 	bl	8000ccc <SSD1306_GotoXY>
	    		SSD1306_Puts ("API!", &Font_11x18, 1);
 80012d4:	2201      	movs	r2, #1
 80012d6:	4910      	ldr	r1, [pc, #64]	; (8001318 <main+0x200>)
 80012d8:	4811      	ldr	r0, [pc, #68]	; (8001320 <main+0x208>)
 80012da:	f7ff fd8d 	bl	8000df8 <SSD1306_Puts>
	    		SSD1306_UpdateScreen();
 80012de:	f7ff fc51 	bl	8000b84 <SSD1306_UpdateScreen>
	    		HAL_Delay(2000);
 80012e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012e6:	f000 fe8b 	bl	8002000 <HAL_Delay>
	    		SSD1306_ShowBitmap(beach);
 80012ea:	4813      	ldr	r0, [pc, #76]	; (8001338 <main+0x220>)
 80012ec:	f7ff fdb2 	bl	8000e54 <SSD1306_ShowBitmap>
	    		HAL_Delay(4000);	    }
 80012f0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80012f4:	f000 fe84 	bl	8002000 <HAL_Delay>
	  	 printf("hello");
 80012f8:	e75f      	b.n	80011ba <main+0xa2>
 80012fa:	bf00      	nop
 80012fc:	20000494 	.word	0x20000494
 8001300:	20000820 	.word	0x20000820
 8001304:	40c66666 	.word	0x40c66666
 8001308:	08005b4c 	.word	0x08005b4c
 800130c:	20000928 	.word	0x20000928
 8001310:	200008a4 	.word	0x200008a4
 8001314:	08005b54 	.word	0x08005b54
 8001318:	20000000 	.word	0x20000000
 800131c:	08005b60 	.word	0x08005b60
 8001320:	08005b68 	.word	0x08005b68
 8001324:	08005b70 	.word	0x08005b70
 8001328:	08005b78 	.word	0x08005b78
 800132c:	08005b84 	.word	0x08005b84
 8001330:	08005b90 	.word	0x08005b90
 8001334:	08005b9c 	.word	0x08005b9c
 8001338:	08006904 	.word	0x08006904

0800133c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b094      	sub	sp, #80	; 0x50
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001346:	2228      	movs	r2, #40	; 0x28
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f003 fcb4 	bl	8004cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800136c:	2301      	movs	r3, #1
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137a:	2301      	movs	r3, #1
 800137c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137e:	2302      	movs	r3, #2
 8001380:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001382:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001386:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001388:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800138c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fb84 	bl	8003aa0 <HAL_RCC_OscConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800139e:	f000 f913 	bl	80015c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a2:	230f      	movs	r3, #15
 80013a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a6:	2302      	movs	r3, #2
 80013a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013ae:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80013b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2101      	movs	r1, #1
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 fdf0 	bl	8003fa4 <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013ca:	f000 f8fd 	bl	80015c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013ce:	2310      	movs	r3, #16
 80013d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80013d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013d6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	4618      	mov	r0, r3
 80013dc:	f002 ff70 	bl	80042c0 <HAL_RCCEx_PeriphCLKConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013e6:	f000 f8ef 	bl	80015c8 <Error_Handler>
  }
}
 80013ea:	bf00      	nop
 80013ec:	3750      	adds	r7, #80	; 0x50
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_I2C1_Init+0x50>)
 80013fa:	4a13      	ldr	r2, [pc, #76]	; (8001448 <MX_I2C1_Init+0x54>)
 80013fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_I2C1_Init+0x50>)
 8001400:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_I2C1_Init+0x58>)
 8001402:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_I2C1_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_I2C1_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_I2C1_Init+0x50>)
 8001412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001416:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <MX_I2C1_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_I2C1_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_I2C1_Init+0x50>)
 8001432:	f001 f8d5 	bl	80025e0 <HAL_I2C_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800143c:	f000 f8c4 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000494 	.word	0x20000494
 8001448:	40005400 	.word	0x40005400
 800144c:	00061a80 	.word	0x00061a80

08001450 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_USART1_UART_Init+0x4c>)
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <MX_USART1_UART_Init+0x50>)
 8001458:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <MX_USART1_UART_Init+0x4c>)
 800145c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001460:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <MX_USART1_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_USART1_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MX_USART1_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_USART1_UART_Init+0x4c>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <MX_USART1_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_USART1_UART_Init+0x4c>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_USART1_UART_Init+0x4c>)
 8001488:	f002 ffd0 	bl	800442c <HAL_UART_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001492:	f000 f899 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200004e8 	.word	0x200004e8
 80014a0:	40013800 	.word	0x40013800

080014a4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <MX_USB_PCD_Init+0x3c>)
 80014aa:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <MX_USB_PCD_Init+0x40>)
 80014ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_USB_PCD_Init+0x3c>)
 80014b0:	2208      	movs	r2, #8
 80014b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <MX_USB_PCD_Init+0x3c>)
 80014b6:	2202      	movs	r2, #2
 80014b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_USB_PCD_Init+0x3c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <MX_USB_PCD_Init+0x3c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_USB_PCD_Init+0x3c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	; (80014e0 <MX_USB_PCD_Init+0x3c>)
 80014ce:	f002 f9e8 	bl	80038a2 <HAL_PCD_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80014d8:	f000 f876 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000530 	.word	0x20000530
 80014e4:	40005c00 	.word	0x40005c00

080014e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fc:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <MX_GPIO_Init+0xd0>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a2d      	ldr	r2, [pc, #180]	; (80015b8 <MX_GPIO_Init+0xd0>)
 8001502:	f043 0310 	orr.w	r3, r3, #16
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <MX_GPIO_Init+0xd0>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001514:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <MX_GPIO_Init+0xd0>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a27      	ldr	r2, [pc, #156]	; (80015b8 <MX_GPIO_Init+0xd0>)
 800151a:	f043 0320 	orr.w	r3, r3, #32
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <MX_GPIO_Init+0xd0>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0320 	and.w	r3, r3, #32
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <MX_GPIO_Init+0xd0>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a21      	ldr	r2, [pc, #132]	; (80015b8 <MX_GPIO_Init+0xd0>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <MX_GPIO_Init+0xd0>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <MX_GPIO_Init+0xd0>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <MX_GPIO_Init+0xd0>)
 800154a:	f043 0308 	orr.w	r3, r3, #8
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <MX_GPIO_Init+0xd0>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800155c:	2200      	movs	r2, #0
 800155e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001562:	4816      	ldr	r0, [pc, #88]	; (80015bc <MX_GPIO_Init+0xd4>)
 8001564:	f001 f802 	bl	800256c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156e:	2301      	movs	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2302      	movs	r3, #2
 8001578:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	4619      	mov	r1, r3
 8001580:	480e      	ldr	r0, [pc, #56]	; (80015bc <MX_GPIO_Init+0xd4>)
 8001582:	f000 fe6f 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800158a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_GPIO_Init+0xd8>)
 800158e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	4619      	mov	r1, r3
 800159a:	480a      	ldr	r0, [pc, #40]	; (80015c4 <MX_GPIO_Init+0xdc>)
 800159c:	f000 fe62 	bl	8002264 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2100      	movs	r1, #0
 80015a4:	2008      	movs	r0, #8
 80015a6:	f000 fe26 	bl	80021f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80015aa:	2008      	movs	r0, #8
 80015ac:	f000 fe3f 	bl	800222e <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 80015b0:	bf00      	nop
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40011000 	.word	0x40011000
 80015c0:	10210000 	.word	0x10210000
 80015c4:	40010c00 	.word	0x40010c00

080015c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015cc:	b672      	cpsid	i
}
 80015ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <Error_Handler+0x8>
	...

080015d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_MspInit+0x5c>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	4a14      	ldr	r2, [pc, #80]	; (8001630 <HAL_MspInit+0x5c>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6193      	str	r3, [r2, #24]
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_MspInit+0x5c>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_MspInit+0x5c>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <HAL_MspInit+0x5c>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	61d3      	str	r3, [r2, #28]
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_MspInit+0x5c>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_MspInit+0x60>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <HAL_MspInit+0x60>)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	40021000 	.word	0x40021000
 8001634:	40010000 	.word	0x40010000

08001638 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <HAL_I2C_MspInit+0x70>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d123      	bne.n	80016a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_I2C_MspInit+0x74>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a13      	ldr	r2, [pc, #76]	; (80016ac <HAL_I2C_MspInit+0x74>)
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_I2C_MspInit+0x74>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001670:	23c0      	movs	r3, #192	; 0xc0
 8001672:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001674:	2312      	movs	r3, #18
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	4619      	mov	r1, r3
 8001682:	480b      	ldr	r0, [pc, #44]	; (80016b0 <HAL_I2C_MspInit+0x78>)
 8001684:	f000 fdee 	bl	8002264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_I2C_MspInit+0x74>)
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_I2C_MspInit+0x74>)
 800168e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001692:	61d3      	str	r3, [r2, #28]
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <HAL_I2C_MspInit+0x74>)
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016a0:	bf00      	nop
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40005400 	.word	0x40005400
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010c00 	.word	0x40010c00

080016b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a1c      	ldr	r2, [pc, #112]	; (8001740 <HAL_UART_MspInit+0x8c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d131      	bne.n	8001738 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_UART_MspInit+0x90>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a1a      	ldr	r2, [pc, #104]	; (8001744 <HAL_UART_MspInit+0x90>)
 80016da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_UART_MspInit+0x90>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_UART_MspInit+0x90>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <HAL_UART_MspInit+0x90>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_UART_MspInit+0x90>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001708:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	4619      	mov	r1, r3
 8001718:	480b      	ldr	r0, [pc, #44]	; (8001748 <HAL_UART_MspInit+0x94>)
 800171a:	f000 fda3 	bl	8002264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800171e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	4619      	mov	r1, r3
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <HAL_UART_MspInit+0x94>)
 8001734:	f000 fd96 	bl	8002264 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40013800 	.word	0x40013800
 8001744:	40021000 	.word	0x40021000
 8001748:	40010800 	.word	0x40010800

0800174c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a09      	ldr	r2, [pc, #36]	; (8001780 <HAL_PCD_MspInit+0x34>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d10b      	bne.n	8001776 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_PCD_MspInit+0x38>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a08      	ldr	r2, [pc, #32]	; (8001784 <HAL_PCD_MspInit+0x38>)
 8001764:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_PCD_MspInit+0x38>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	40005c00 	.word	0x40005c00
 8001784:	40021000 	.word	0x40021000

08001788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800178c:	e7fe      	b.n	800178c <NMI_Handler+0x4>

0800178e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <MemManage_Handler+0x4>

0800179a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ce:	f000 fbfb 	bl	8001fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <EXTI2_IRQHandler>:
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void EXTI2_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI2_IRQ 0 */
    max30102_on_interrupt(&max30102);
 80017dc:	4803      	ldr	r0, [pc, #12]	; (80017ec <EXTI2_IRQHandler+0x14>)
 80017de:	f000 f9b2 	bl	8001b46 <max30102_on_interrupt>
    /* USER CODE END EXTI2_IRQn 0 */
    /* USER CODE BEGIN EXTI2_IRQn 1 */
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80017e2:	2004      	movs	r0, #4
 80017e4:	f000 feda 	bl	800259c <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE END EXTI2_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000820 	.word	0x20000820

080017f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	e00a      	b.n	8001818 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001802:	f3af 8000 	nop.w
 8001806:	4601      	mov	r1, r0
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	60ba      	str	r2, [r7, #8]
 800180e:	b2ca      	uxtb	r2, r1
 8001810:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	dbf0      	blt.n	8001802 <_read+0x12>
  }

  return len;
 8001820:	687b      	ldr	r3, [r7, #4]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	e009      	b.n	8001850 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	60ba      	str	r2, [r7, #8]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fc41 	bl	80010cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3301      	adds	r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	429a      	cmp	r2, r3
 8001856:	dbf1      	blt.n	800183c <_write+0x12>
  }
  return len;
 8001858:	687b      	ldr	r3, [r7, #4]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <_close>:

int _close(int file)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001888:	605a      	str	r2, [r3, #4]
  return 0;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <_isatty>:

int _isatty(int file)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b085      	sub	sp, #20
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
	...

080018c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018cc:	4a14      	ldr	r2, [pc, #80]	; (8001920 <_sbrk+0x5c>)
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <_sbrk+0x60>)
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d102      	bne.n	80018e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <_sbrk+0x64>)
 80018e2:	4a12      	ldr	r2, [pc, #72]	; (800192c <_sbrk+0x68>)
 80018e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d207      	bcs.n	8001904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f4:	f003 fa3e 	bl	8004d74 <__errno>
 80018f8:	4603      	mov	r3, r0
 80018fa:	220c      	movs	r2, #12
 80018fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001902:	e009      	b.n	8001918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <_sbrk+0x64>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	4a05      	ldr	r2, [pc, #20]	; (8001928 <_sbrk+0x64>)
 8001914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001916:	68fb      	ldr	r3, [r7, #12]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20005000 	.word	0x20005000
 8001924:	00000400 	.word	0x00000400
 8001928:	2000092c 	.word	0x2000092c
 800192c:	20000a80 	.word	0x20000a80

08001930 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800193c:	f7ff fff8 	bl	8001930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001940:	480b      	ldr	r0, [pc, #44]	; (8001970 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001942:	490c      	ldr	r1, [pc, #48]	; (8001974 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001944:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001958:	4c09      	ldr	r4, [pc, #36]	; (8001980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001966:	f003 fa0b 	bl	8004d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800196a:	f7ff fbd5 	bl	8001118 <main>
  bx lr
 800196e:	4770      	bx	lr
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001974:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001978:	08006d6c 	.word	0x08006d6c
  ldr r2, =_sbss
 800197c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001980:	20000a80 	.word	0x20000a80

08001984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC1_2_IRQHandler>

08001986 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3304      	adds	r3, #4
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 f986 	bl	8004cb8 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3384      	adds	r3, #132	; 0x84
 80019b0:	2280      	movs	r2, #128	; 0x80
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 f97f 	bl	8004cb8 <memset>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b088      	sub	sp, #32
 80019c6:	af02      	add	r7, sp, #8
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	461a      	mov	r2, r3
 80019ce:	460b      	mov	r3, r1
 80019d0:	72fb      	strb	r3, [r7, #11]
 80019d2:	4613      	mov	r3, r2
 80019d4:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 80019d6:	893b      	ldrh	r3, [r7, #8]
 80019d8:	3301      	adds	r3, #1
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 ff56 	bl	800488c <malloc>
 80019e0:	4603      	mov	r3, r0
 80019e2:	617b      	str	r3, [r7, #20]
    *payload = reg;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	7afa      	ldrb	r2, [r7, #11]
 80019e8:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d009      	beq.n	8001a04 <max30102_write+0x42>
 80019f0:	893b      	ldrh	r3, [r7, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3301      	adds	r3, #1
 80019fa:	893a      	ldrh	r2, [r7, #8]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 f9e4 	bl	8004dcc <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	893b      	ldrh	r3, [r7, #8]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a12:	9200      	str	r2, [sp, #0]
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	21ae      	movs	r1, #174	; 0xae
 8001a18:	f000 ff26 	bl	8002868 <HAL_I2C_Master_Transmit>
    free(payload);
 8001a1c:	6978      	ldr	r0, [r7, #20]
 8001a1e:	f002 ff3d 	bl	800489c <free>
}
 8001a22:	bf00      	nop
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b088      	sub	sp, #32
 8001a2e:	af02      	add	r7, sp, #8
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	461a      	mov	r2, r3
 8001a36:	460b      	mov	r3, r1
 8001a38:	72fb      	strb	r3, [r7, #11]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8001a3e:	7afb      	ldrb	r3, [r7, #11]
 8001a40:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	f107 0217 	add.w	r2, r7, #23
 8001a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2301      	movs	r3, #1
 8001a52:	21ae      	movs	r1, #174	; 0xae
 8001a54:	f000 ff08 	bl	8002868 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	893b      	ldrh	r3, [r7, #8]
 8001a5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a62:	9200      	str	r2, [sp, #0]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	21ae      	movs	r1, #174	; 0xae
 8001a68:	f000 fffc 	bl	8002a64 <HAL_I2C_Master_Receive>
}
 8001a6c:	bf00      	nop
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8001a7c:	2340      	movs	r3, #64	; 0x40
 8001a7e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8001a80:	f107 020f 	add.w	r2, r7, #15
 8001a84:	2301      	movs	r3, #1
 8001a86:	2109      	movs	r1, #9
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff9a 	bl	80019c2 <max30102_write>
}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8001aa6:	f107 020f 	add.w	r2, r7, #15
 8001aaa:	2301      	movs	r3, #1
 8001aac:	2102      	movs	r1, #2
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffbb 	bl	8001a2a <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	01db      	lsls	r3, r3, #7
 8001ac2:	b25a      	sxtb	r2, r3
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	b25b      	sxtb	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8001ad0:	f107 020f 	add.w	r2, r7, #15
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff72 	bl	80019c2 <max30102_write>
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 8001b00:	f107 020f 	add.w	r2, r7, #15
 8001b04:	2301      	movs	r3, #1
 8001b06:	2103      	movs	r1, #3
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff5a 	bl	80019c2 <max30102_write>
}
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 8001b30:	f107 020f 	add.w	r2, r7, #15
 8001b34:	2301      	movs	r3, #1
 8001b36:	2121      	movs	r1, #33	; 0x21
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff42 	bl	80019c2 <max30102_write>
}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 8001b80:	2300      	movs	r3, #0
 8001b82:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 8001b84:	f107 020c 	add.w	r2, r7, #12
 8001b88:	2302      	movs	r3, #2
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff4c 	bl	8001a2a <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 8001b92:	7b3b      	ldrb	r3, [r7, #12]
 8001b94:	09db      	lsrs	r3, r3, #7
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f94e 	bl	8001e42 <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 8001ba6:	7b7b      	ldrb	r3, [r7, #13]
 8001ba8:	085b      	lsrs	r3, r3, #1
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d007      	beq.n	8001bc4 <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 8001bb4:	f107 020a 	add.w	r2, r7, #10
 8001bb8:	f107 030b 	add.w	r3, r7, #11
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f9a6 	bl	8001f10 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8001be0:	f107 020f 	add.w	r2, r7, #15
 8001be4:	2301      	movs	r3, #1
 8001be6:	2109      	movs	r1, #9
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff1e 	bl	8001a2a <max30102_read>
    config = (config & 0xf8) | mode;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	f023 0307 	bic.w	r3, r3, #7
 8001bf6:	b25a      	sxtb	r2, r3
 8001bf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b25b      	sxtb	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 8001c04:	f107 020f 	add.w	r2, r7, #15
 8001c08:	2301      	movs	r3, #1
 8001c0a:	2109      	movs	r1, #9
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff fed8 	bl	80019c2 <max30102_write>
    max30102_clear_fifo(obj);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f8f6 	bl	8001e04 <max30102_clear_fifo>
}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001c2c:	f107 020f 	add.w	r2, r7, #15
 8001c30:	2301      	movs	r3, #1
 8001c32:	210a      	movs	r1, #10
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff fef8 	bl	8001a2a <max30102_read>
    config = (config & 0x63) << MAX30102_SPO2_SR;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001c48:	f107 020f 	add.w	r2, r7, #15
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	210a      	movs	r1, #10
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff feb6 	bl	80019c2 <max30102_write>
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001c6a:	f107 020f 	add.w	r2, r7, #15
 8001c6e:	2301      	movs	r3, #1
 8001c70:	210a      	movs	r1, #10
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff fed9 	bl	8001a2a <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8001c80:	b25a      	sxtb	r2, r3
 8001c82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	b25b      	sxtb	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001c8e:	f107 020f 	add.w	r2, r7, #15
 8001c92:	2301      	movs	r3, #1
 8001c94:	210a      	movs	r1, #10
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff fe93 	bl	80019c2 <max30102_write>
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001cb0:	f107 020f 	add.w	r2, r7, #15
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	210a      	movs	r1, #10
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff feb6 	bl	8001a2a <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	b25b      	sxtb	r3, r3
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	b25a      	sxtb	r2, r3
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	015b      	lsls	r3, r3, #5
 8001ccc:	b25b      	sxtb	r3, r3
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001cd6:	f107 020f 	add.w	r2, r7, #15
 8001cda:	2301      	movs	r3, #1
 8001cdc:	210a      	movs	r1, #10
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff fe6f 	bl	80019c2 <max30102_write>
}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	0000      	movs	r0, r0
	...

08001cf0 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8001cfa:	6838      	ldr	r0, [r7, #0]
 8001cfc:	f7fe fb8c 	bl	8000418 <__aeabi_f2d>
 8001d00:	a30d      	add	r3, pc, #52	; (adr r3, 8001d38 <max30102_set_led_current_1+0x48>)
 8001d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d06:	f7fe fd09 	bl	800071c <__aeabi_ddiv>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	f7fe fdeb 	bl	80008ec <__aeabi_d2uiz>
 8001d16:	4603      	mov	r3, r0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8001d1c:	f107 020f 	add.w	r2, r7, #15
 8001d20:	2301      	movs	r3, #1
 8001d22:	210c      	movs	r1, #12
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fe4c 	bl	80019c2 <max30102_write>
}
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	f3af 8000 	nop.w
 8001d38:	9999999a 	.word	0x9999999a
 8001d3c:	3fc99999 	.word	0x3fc99999

08001d40 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8001d4a:	6838      	ldr	r0, [r7, #0]
 8001d4c:	f7fe fb64 	bl	8000418 <__aeabi_f2d>
 8001d50:	a30d      	add	r3, pc, #52	; (adr r3, 8001d88 <max30102_set_led_current_2+0x48>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fce1 	bl	800071c <__aeabi_ddiv>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe fdc3 	bl	80008ec <__aeabi_d2uiz>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8001d6c:	f107 020f 	add.w	r2, r7, #15
 8001d70:	2301      	movs	r3, #1
 8001d72:	210d      	movs	r1, #13
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff fe24 	bl	80019c2 <max30102_write>
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	f3af 8000 	nop.w
 8001d88:	9999999a 	.word	0x9999999a
 8001d8c:	3fc99999 	.word	0x3fc99999

08001d90 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	4608      	mov	r0, r1
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4603      	mov	r3, r0
 8001da0:	70fb      	strb	r3, [r7, #3]
 8001da2:	460b      	mov	r3, r1
 8001da4:	70bb      	strb	r3, [r7, #2]
 8001da6:	4613      	mov	r3, r2
 8001da8:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	015b      	lsls	r3, r3, #5
 8001db2:	b25a      	sxtb	r2, r3
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8001dc0:	78bb      	ldrb	r3, [r7, #2]
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	b25b      	sxtb	r3, r3
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	b25a      	sxtb	r2, r3
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	b25b      	sxtb	r3, r3
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b25b      	sxtb	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8001dd8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	b25a      	sxtb	r2, r3
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	4313      	orrs	r3, r2
 8001de8:	b25b      	sxtb	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 8001dee:	f107 020f 	add.w	r2, r7, #15
 8001df2:	2301      	movs	r3, #1
 8001df4:	2108      	movs	r1, #8
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff fde3 	bl	80019c2 <max30102_write>
}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8001e10:	f107 020f 	add.w	r2, r7, #15
 8001e14:	2303      	movs	r3, #3
 8001e16:	2104      	movs	r1, #4
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff fdd2 	bl	80019c2 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 8001e1e:	f107 020f 	add.w	r2, r7, #15
 8001e22:	2303      	movs	r3, #3
 8001e24:	2106      	movs	r1, #6
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fdcb 	bl	80019c2 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8001e2c:	f107 020f 	add.w	r2, r7, #15
 8001e30:	2303      	movs	r3, #3
 8001e32:	2105      	movs	r1, #5
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff fdc4 	bl	80019c2 <max30102_write>
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b088      	sub	sp, #32
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	74fb      	strb	r3, [r7, #19]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 8001e52:	f107 0213 	add.w	r2, r7, #19
 8001e56:	2301      	movs	r3, #1
 8001e58:	2104      	movs	r1, #4
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff fde5 	bl	8001a2a <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8001e60:	f107 0212 	add.w	r2, r7, #18
 8001e64:	2301      	movs	r3, #1
 8001e66:	2106      	movs	r1, #6
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff fdde 	bl	8001a2a <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8001e6e:	7cfa      	ldrb	r2, [r7, #19]
 8001e70:	7cbb      	ldrb	r3, [r7, #18]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8001e78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	dc03      	bgt.n	8001e88 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8001e80:	7ffb      	ldrb	r3, [r7, #31]
 8001e82:	3320      	adds	r3, #32
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	77bb      	strb	r3, [r7, #30]
 8001e8c:	e035      	b.n	8001efa <max30102_read_fifo+0xb8>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 8001e8e:	f107 020c 	add.w	r2, r7, #12
 8001e92:	2306      	movs	r3, #6
 8001e94:	2107      	movs	r1, #7
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fdc7 	bl	8001a2a <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8001e9c:	7b3b      	ldrb	r3, [r7, #12]
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	7b7b      	ldrb	r3, [r7, #13]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	7bba      	ldrb	r2, [r7, #14]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001eb0:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	041b      	lsls	r3, r3, #16
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	7c3b      	ldrb	r3, [r7, #16]
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	7c7a      	ldrb	r2, [r7, #17]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001ec6:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 8001ec8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 8001ed6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	3320      	adds	r3, #32
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 8001ee6:	6979      	ldr	r1, [r7, #20]
 8001ee8:	69b8      	ldr	r0, [r7, #24]
 8001eea:	f7ff f905 	bl	80010f8 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 8001eee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	77bb      	strb	r3, [r7, #30]
 8001efa:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8001efe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	dbc3      	blt.n	8001e8e <max30102_read_fifo+0x4c>
    }
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	211f      	movs	r1, #31
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f7ff fd81 	bl	8001a2a <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8001f28:	2301      	movs	r3, #1
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	2120      	movs	r1, #32
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f7ff fd7b 	bl	8001a2a <max30102_read>
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_Init+0x28>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_Init+0x28>)
 8001f46:	f043 0310 	orr.w	r3, r3, #16
 8001f4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f000 f947 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f52:	200f      	movs	r0, #15
 8001f54:	f000 f808 	bl	8001f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f58:	f7ff fb3c 	bl	80015d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40022000 	.word	0x40022000

08001f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_InitTick+0x54>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_InitTick+0x58>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f95f 	bl	800224a <HAL_SYSTICK_Config>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00e      	b.n	8001fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b0f      	cmp	r3, #15
 8001f9a:	d80a      	bhi.n	8001fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f000 f927 	bl	80021f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa8:	4a06      	ldr	r2, [pc, #24]	; (8001fc4 <HAL_InitTick+0x5c>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e000      	b.n	8001fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	20000010 	.word	0x20000010
 8001fc4:	2000000c 	.word	0x2000000c

08001fc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_IncTick+0x1c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_IncTick+0x20>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a03      	ldr	r2, [pc, #12]	; (8001fe8 <HAL_IncTick+0x20>)
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	20000010 	.word	0x20000010
 8001fe8:	20000930 	.word	0x20000930

08001fec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff0:	4b02      	ldr	r3, [pc, #8]	; (8001ffc <HAL_GetTick+0x10>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	20000930 	.word	0x20000930

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff fff0 	bl	8001fec <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002026:	bf00      	nop
 8002028:	f7ff ffe0 	bl	8001fec <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000010 	.word	0x20000010

08002048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002064:	4013      	ands	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207a:	4a04      	ldr	r2, [pc, #16]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	60d3      	str	r3, [r2, #12]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 0307 	and.w	r3, r3, #7
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	db0b      	blt.n	80020d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	4906      	ldr	r1, [pc, #24]	; (80020e0 <__NVIC_EnableIRQ+0x34>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	2001      	movs	r0, #1
 80020ce:	fa00 f202 	lsl.w	r2, r0, r2
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	db0a      	blt.n	800210e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	490c      	ldr	r1, [pc, #48]	; (8002130 <__NVIC_SetPriority+0x4c>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	0112      	lsls	r2, r2, #4
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	440b      	add	r3, r1
 8002108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800210c:	e00a      	b.n	8002124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4908      	ldr	r1, [pc, #32]	; (8002134 <__NVIC_SetPriority+0x50>)
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	3b04      	subs	r3, #4
 800211c:	0112      	lsls	r2, r2, #4
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	440b      	add	r3, r1
 8002122:	761a      	strb	r2, [r3, #24]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000e100 	.word	0xe000e100
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	; 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f1c3 0307 	rsb	r3, r3, #7
 8002152:	2b04      	cmp	r3, #4
 8002154:	bf28      	it	cs
 8002156:	2304      	movcs	r3, #4
 8002158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3304      	adds	r3, #4
 800215e:	2b06      	cmp	r3, #6
 8002160:	d902      	bls.n	8002168 <NVIC_EncodePriority+0x30>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3b03      	subs	r3, #3
 8002166:	e000      	b.n	800216a <NVIC_EncodePriority+0x32>
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	401a      	ands	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002180:	f04f 31ff 	mov.w	r1, #4294967295
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	43d9      	mvns	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	4313      	orrs	r3, r2
         );
}
 8002192:	4618      	mov	r0, r3
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ac:	d301      	bcc.n	80021b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00f      	b.n	80021d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <SysTick_Config+0x40>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ba:	210f      	movs	r1, #15
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f7ff ff90 	bl	80020e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <SysTick_Config+0x40>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ca:	4b04      	ldr	r3, [pc, #16]	; (80021dc <SysTick_Config+0x40>)
 80021cc:	2207      	movs	r2, #7
 80021ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	e000e010 	.word	0xe000e010

080021e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff2d 	bl	8002048 <__NVIC_SetPriorityGrouping>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002208:	f7ff ff42 	bl	8002090 <__NVIC_GetPriorityGrouping>
 800220c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	6978      	ldr	r0, [r7, #20]
 8002214:	f7ff ff90 	bl	8002138 <NVIC_EncodePriority>
 8002218:	4602      	mov	r2, r0
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff5f 	bl	80020e4 <__NVIC_SetPriority>
}
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff35 	bl	80020ac <__NVIC_EnableIRQ>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ffa2 	bl	800219c <SysTick_Config>
 8002258:	4603      	mov	r3, r0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002264:	b480      	push	{r7}
 8002266:	b08b      	sub	sp, #44	; 0x2c
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002272:	2300      	movs	r3, #0
 8002274:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002276:	e169      	b.n	800254c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002278:	2201      	movs	r2, #1
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	429a      	cmp	r2, r3
 8002292:	f040 8158 	bne.w	8002546 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4a9a      	ldr	r2, [pc, #616]	; (8002504 <HAL_GPIO_Init+0x2a0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d05e      	beq.n	800235e <HAL_GPIO_Init+0xfa>
 80022a0:	4a98      	ldr	r2, [pc, #608]	; (8002504 <HAL_GPIO_Init+0x2a0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d875      	bhi.n	8002392 <HAL_GPIO_Init+0x12e>
 80022a6:	4a98      	ldr	r2, [pc, #608]	; (8002508 <HAL_GPIO_Init+0x2a4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d058      	beq.n	800235e <HAL_GPIO_Init+0xfa>
 80022ac:	4a96      	ldr	r2, [pc, #600]	; (8002508 <HAL_GPIO_Init+0x2a4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d86f      	bhi.n	8002392 <HAL_GPIO_Init+0x12e>
 80022b2:	4a96      	ldr	r2, [pc, #600]	; (800250c <HAL_GPIO_Init+0x2a8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d052      	beq.n	800235e <HAL_GPIO_Init+0xfa>
 80022b8:	4a94      	ldr	r2, [pc, #592]	; (800250c <HAL_GPIO_Init+0x2a8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d869      	bhi.n	8002392 <HAL_GPIO_Init+0x12e>
 80022be:	4a94      	ldr	r2, [pc, #592]	; (8002510 <HAL_GPIO_Init+0x2ac>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d04c      	beq.n	800235e <HAL_GPIO_Init+0xfa>
 80022c4:	4a92      	ldr	r2, [pc, #584]	; (8002510 <HAL_GPIO_Init+0x2ac>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d863      	bhi.n	8002392 <HAL_GPIO_Init+0x12e>
 80022ca:	4a92      	ldr	r2, [pc, #584]	; (8002514 <HAL_GPIO_Init+0x2b0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d046      	beq.n	800235e <HAL_GPIO_Init+0xfa>
 80022d0:	4a90      	ldr	r2, [pc, #576]	; (8002514 <HAL_GPIO_Init+0x2b0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d85d      	bhi.n	8002392 <HAL_GPIO_Init+0x12e>
 80022d6:	2b12      	cmp	r3, #18
 80022d8:	d82a      	bhi.n	8002330 <HAL_GPIO_Init+0xcc>
 80022da:	2b12      	cmp	r3, #18
 80022dc:	d859      	bhi.n	8002392 <HAL_GPIO_Init+0x12e>
 80022de:	a201      	add	r2, pc, #4	; (adr r2, 80022e4 <HAL_GPIO_Init+0x80>)
 80022e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e4:	0800235f 	.word	0x0800235f
 80022e8:	08002339 	.word	0x08002339
 80022ec:	0800234b 	.word	0x0800234b
 80022f0:	0800238d 	.word	0x0800238d
 80022f4:	08002393 	.word	0x08002393
 80022f8:	08002393 	.word	0x08002393
 80022fc:	08002393 	.word	0x08002393
 8002300:	08002393 	.word	0x08002393
 8002304:	08002393 	.word	0x08002393
 8002308:	08002393 	.word	0x08002393
 800230c:	08002393 	.word	0x08002393
 8002310:	08002393 	.word	0x08002393
 8002314:	08002393 	.word	0x08002393
 8002318:	08002393 	.word	0x08002393
 800231c:	08002393 	.word	0x08002393
 8002320:	08002393 	.word	0x08002393
 8002324:	08002393 	.word	0x08002393
 8002328:	08002341 	.word	0x08002341
 800232c:	08002355 	.word	0x08002355
 8002330:	4a79      	ldr	r2, [pc, #484]	; (8002518 <HAL_GPIO_Init+0x2b4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d013      	beq.n	800235e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002336:	e02c      	b.n	8002392 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	623b      	str	r3, [r7, #32]
          break;
 800233e:	e029      	b.n	8002394 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	3304      	adds	r3, #4
 8002346:	623b      	str	r3, [r7, #32]
          break;
 8002348:	e024      	b.n	8002394 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	3308      	adds	r3, #8
 8002350:	623b      	str	r3, [r7, #32]
          break;
 8002352:	e01f      	b.n	8002394 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	330c      	adds	r3, #12
 800235a:	623b      	str	r3, [r7, #32]
          break;
 800235c:	e01a      	b.n	8002394 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002366:	2304      	movs	r3, #4
 8002368:	623b      	str	r3, [r7, #32]
          break;
 800236a:	e013      	b.n	8002394 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d105      	bne.n	8002380 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002374:	2308      	movs	r3, #8
 8002376:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	611a      	str	r2, [r3, #16]
          break;
 800237e:	e009      	b.n	8002394 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002380:	2308      	movs	r3, #8
 8002382:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	615a      	str	r2, [r3, #20]
          break;
 800238a:	e003      	b.n	8002394 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800238c:	2300      	movs	r3, #0
 800238e:	623b      	str	r3, [r7, #32]
          break;
 8002390:	e000      	b.n	8002394 <HAL_GPIO_Init+0x130>
          break;
 8002392:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2bff      	cmp	r3, #255	; 0xff
 8002398:	d801      	bhi.n	800239e <HAL_GPIO_Init+0x13a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	e001      	b.n	80023a2 <HAL_GPIO_Init+0x13e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3304      	adds	r3, #4
 80023a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2bff      	cmp	r3, #255	; 0xff
 80023a8:	d802      	bhi.n	80023b0 <HAL_GPIO_Init+0x14c>
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	e002      	b.n	80023b6 <HAL_GPIO_Init+0x152>
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	3b08      	subs	r3, #8
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	210f      	movs	r1, #15
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	fa01 f303 	lsl.w	r3, r1, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	401a      	ands	r2, r3
 80023c8:	6a39      	ldr	r1, [r7, #32]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	fa01 f303 	lsl.w	r3, r1, r3
 80023d0:	431a      	orrs	r2, r3
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 80b1 	beq.w	8002546 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023e4:	4b4d      	ldr	r3, [pc, #308]	; (800251c <HAL_GPIO_Init+0x2b8>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	4a4c      	ldr	r2, [pc, #304]	; (800251c <HAL_GPIO_Init+0x2b8>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6193      	str	r3, [r2, #24]
 80023f0:	4b4a      	ldr	r3, [pc, #296]	; (800251c <HAL_GPIO_Init+0x2b8>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023fc:	4a48      	ldr	r2, [pc, #288]	; (8002520 <HAL_GPIO_Init+0x2bc>)
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	089b      	lsrs	r3, r3, #2
 8002402:	3302      	adds	r3, #2
 8002404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002408:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	220f      	movs	r2, #15
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4013      	ands	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a40      	ldr	r2, [pc, #256]	; (8002524 <HAL_GPIO_Init+0x2c0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d013      	beq.n	8002450 <HAL_GPIO_Init+0x1ec>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a3f      	ldr	r2, [pc, #252]	; (8002528 <HAL_GPIO_Init+0x2c4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d00d      	beq.n	800244c <HAL_GPIO_Init+0x1e8>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a3e      	ldr	r2, [pc, #248]	; (800252c <HAL_GPIO_Init+0x2c8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d007      	beq.n	8002448 <HAL_GPIO_Init+0x1e4>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a3d      	ldr	r2, [pc, #244]	; (8002530 <HAL_GPIO_Init+0x2cc>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d101      	bne.n	8002444 <HAL_GPIO_Init+0x1e0>
 8002440:	2303      	movs	r3, #3
 8002442:	e006      	b.n	8002452 <HAL_GPIO_Init+0x1ee>
 8002444:	2304      	movs	r3, #4
 8002446:	e004      	b.n	8002452 <HAL_GPIO_Init+0x1ee>
 8002448:	2302      	movs	r3, #2
 800244a:	e002      	b.n	8002452 <HAL_GPIO_Init+0x1ee>
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <HAL_GPIO_Init+0x1ee>
 8002450:	2300      	movs	r3, #0
 8002452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002454:	f002 0203 	and.w	r2, r2, #3
 8002458:	0092      	lsls	r2, r2, #2
 800245a:	4093      	lsls	r3, r2
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	4313      	orrs	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002462:	492f      	ldr	r1, [pc, #188]	; (8002520 <HAL_GPIO_Init+0x2bc>)
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	3302      	adds	r3, #2
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d006      	beq.n	800248a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800247c:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <HAL_GPIO_Init+0x2d0>)
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	492c      	ldr	r1, [pc, #176]	; (8002534 <HAL_GPIO_Init+0x2d0>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	608b      	str	r3, [r1, #8]
 8002488:	e006      	b.n	8002498 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800248a:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <HAL_GPIO_Init+0x2d0>)
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	43db      	mvns	r3, r3
 8002492:	4928      	ldr	r1, [pc, #160]	; (8002534 <HAL_GPIO_Init+0x2d0>)
 8002494:	4013      	ands	r3, r2
 8002496:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d006      	beq.n	80024b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024a4:	4b23      	ldr	r3, [pc, #140]	; (8002534 <HAL_GPIO_Init+0x2d0>)
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	4922      	ldr	r1, [pc, #136]	; (8002534 <HAL_GPIO_Init+0x2d0>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60cb      	str	r3, [r1, #12]
 80024b0:	e006      	b.n	80024c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_GPIO_Init+0x2d0>)
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	491e      	ldr	r1, [pc, #120]	; (8002534 <HAL_GPIO_Init+0x2d0>)
 80024bc:	4013      	ands	r3, r2
 80024be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d006      	beq.n	80024da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_GPIO_Init+0x2d0>)
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	4918      	ldr	r1, [pc, #96]	; (8002534 <HAL_GPIO_Init+0x2d0>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
 80024d8:	e006      	b.n	80024e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024da:	4b16      	ldr	r3, [pc, #88]	; (8002534 <HAL_GPIO_Init+0x2d0>)
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	4914      	ldr	r1, [pc, #80]	; (8002534 <HAL_GPIO_Init+0x2d0>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d021      	beq.n	8002538 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <HAL_GPIO_Init+0x2d0>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	490e      	ldr	r1, [pc, #56]	; (8002534 <HAL_GPIO_Init+0x2d0>)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	600b      	str	r3, [r1, #0]
 8002500:	e021      	b.n	8002546 <HAL_GPIO_Init+0x2e2>
 8002502:	bf00      	nop
 8002504:	10320000 	.word	0x10320000
 8002508:	10310000 	.word	0x10310000
 800250c:	10220000 	.word	0x10220000
 8002510:	10210000 	.word	0x10210000
 8002514:	10120000 	.word	0x10120000
 8002518:	10110000 	.word	0x10110000
 800251c:	40021000 	.word	0x40021000
 8002520:	40010000 	.word	0x40010000
 8002524:	40010800 	.word	0x40010800
 8002528:	40010c00 	.word	0x40010c00
 800252c:	40011000 	.word	0x40011000
 8002530:	40011400 	.word	0x40011400
 8002534:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_GPIO_Init+0x304>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	43db      	mvns	r3, r3
 8002540:	4909      	ldr	r1, [pc, #36]	; (8002568 <HAL_GPIO_Init+0x304>)
 8002542:	4013      	ands	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	3301      	adds	r3, #1
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	fa22 f303 	lsr.w	r3, r2, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	f47f ae8e 	bne.w	8002278 <HAL_GPIO_Init+0x14>
  }
}
 800255c:	bf00      	nop
 800255e:	bf00      	nop
 8002560:	372c      	adds	r7, #44	; 0x2c
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	40010400 	.word	0x40010400

0800256c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	807b      	strh	r3, [r7, #2]
 8002578:	4613      	mov	r3, r2
 800257a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800257c:	787b      	ldrb	r3, [r7, #1]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002582:	887a      	ldrh	r2, [r7, #2]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002588:	e003      	b.n	8002592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800258a:	887b      	ldrh	r3, [r7, #2]
 800258c:	041a      	lsls	r2, r3, #16
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	611a      	str	r2, [r3, #16]
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 f806 	bl	80025cc <HAL_GPIO_EXTI_Callback>
  }
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40010400 	.word	0x40010400

080025cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e12b      	b.n	800284a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff f816 	bl	8001638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2224      	movs	r2, #36	; 0x24
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002632:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002642:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002644:	f001 fdf6 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8002648:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	4a81      	ldr	r2, [pc, #516]	; (8002854 <HAL_I2C_Init+0x274>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d807      	bhi.n	8002664 <HAL_I2C_Init+0x84>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4a80      	ldr	r2, [pc, #512]	; (8002858 <HAL_I2C_Init+0x278>)
 8002658:	4293      	cmp	r3, r2
 800265a:	bf94      	ite	ls
 800265c:	2301      	movls	r3, #1
 800265e:	2300      	movhi	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	e006      	b.n	8002672 <HAL_I2C_Init+0x92>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4a7d      	ldr	r2, [pc, #500]	; (800285c <HAL_I2C_Init+0x27c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	bf94      	ite	ls
 800266c:	2301      	movls	r3, #1
 800266e:	2300      	movhi	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e0e7      	b.n	800284a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4a78      	ldr	r2, [pc, #480]	; (8002860 <HAL_I2C_Init+0x280>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0c9b      	lsrs	r3, r3, #18
 8002684:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a6a      	ldr	r2, [pc, #424]	; (8002854 <HAL_I2C_Init+0x274>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d802      	bhi.n	80026b4 <HAL_I2C_Init+0xd4>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3301      	adds	r3, #1
 80026b2:	e009      	b.n	80026c8 <HAL_I2C_Init+0xe8>
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	4a69      	ldr	r2, [pc, #420]	; (8002864 <HAL_I2C_Init+0x284>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	3301      	adds	r3, #1
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	430b      	orrs	r3, r1
 80026ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	495c      	ldr	r1, [pc, #368]	; (8002854 <HAL_I2C_Init+0x274>)
 80026e4:	428b      	cmp	r3, r1
 80026e6:	d819      	bhi.n	800271c <HAL_I2C_Init+0x13c>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1e59      	subs	r1, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f6:	1c59      	adds	r1, r3, #1
 80026f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026fc:	400b      	ands	r3, r1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_I2C_Init+0x138>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1e59      	subs	r1, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002710:	3301      	adds	r3, #1
 8002712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002716:	e051      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 8002718:	2304      	movs	r3, #4
 800271a:	e04f      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d111      	bne.n	8002748 <HAL_I2C_Init+0x168>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1e58      	subs	r0, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	440b      	add	r3, r1
 8002732:	fbb0 f3f3 	udiv	r3, r0, r3
 8002736:	3301      	adds	r3, #1
 8002738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273c:	2b00      	cmp	r3, #0
 800273e:	bf0c      	ite	eq
 8002740:	2301      	moveq	r3, #1
 8002742:	2300      	movne	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	e012      	b.n	800276e <HAL_I2C_Init+0x18e>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1e58      	subs	r0, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	0099      	lsls	r1, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	fbb0 f3f3 	udiv	r3, r0, r3
 800275e:	3301      	adds	r3, #1
 8002760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf0c      	ite	eq
 8002768:	2301      	moveq	r3, #1
 800276a:	2300      	movne	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Init+0x196>
 8002772:	2301      	movs	r3, #1
 8002774:	e022      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10e      	bne.n	800279c <HAL_I2C_Init+0x1bc>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1e58      	subs	r0, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6859      	ldr	r1, [r3, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	440b      	add	r3, r1
 800278c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002790:	3301      	adds	r3, #1
 8002792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800279a:	e00f      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1e58      	subs	r0, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	0099      	lsls	r1, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b2:	3301      	adds	r3, #1
 80027b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	6809      	ldr	r1, [r1, #0]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6911      	ldr	r1, [r2, #16]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68d2      	ldr	r2, [r2, #12]
 80027f6:	4311      	orrs	r1, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	430b      	orrs	r3, r1
 80027fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	000186a0 	.word	0x000186a0
 8002858:	001e847f 	.word	0x001e847f
 800285c:	003d08ff 	.word	0x003d08ff
 8002860:	431bde83 	.word	0x431bde83
 8002864:	10624dd3 	.word	0x10624dd3

08002868 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	461a      	mov	r2, r3
 8002874:	460b      	mov	r3, r1
 8002876:	817b      	strh	r3, [r7, #10]
 8002878:	4613      	mov	r3, r2
 800287a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800287c:	f7ff fbb6 	bl	8001fec <HAL_GetTick>
 8002880:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b20      	cmp	r3, #32
 800288c:	f040 80e0 	bne.w	8002a50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	2319      	movs	r3, #25
 8002896:	2201      	movs	r2, #1
 8002898:	4970      	ldr	r1, [pc, #448]	; (8002a5c <HAL_I2C_Master_Transmit+0x1f4>)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fdcc 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028a6:	2302      	movs	r3, #2
 80028a8:	e0d3      	b.n	8002a52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_I2C_Master_Transmit+0x50>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e0cc      	b.n	8002a52 <HAL_I2C_Master_Transmit+0x1ea>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d007      	beq.n	80028de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0201 	orr.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2221      	movs	r2, #33	; 0x21
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2210      	movs	r2, #16
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	893a      	ldrh	r2, [r7, #8]
 800290e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4a50      	ldr	r2, [pc, #320]	; (8002a60 <HAL_I2C_Master_Transmit+0x1f8>)
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002920:	8979      	ldrh	r1, [r7, #10]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	6a3a      	ldr	r2, [r7, #32]
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 fc36 	bl	8003198 <I2C_MasterRequestWrite>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e08d      	b.n	8002a52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800294c:	e066      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	6a39      	ldr	r1, [r7, #32]
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fe8a 	bl	800366c <I2C_WaitOnTXEFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00d      	beq.n	800297a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	2b04      	cmp	r3, #4
 8002964:	d107      	bne.n	8002976 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002974:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e06b      	b.n	8002a52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	781a      	ldrb	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d11b      	bne.n	80029f0 <HAL_I2C_Master_Transmit+0x188>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d017      	beq.n	80029f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	781a      	ldrb	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	6a39      	ldr	r1, [r7, #32]
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fe81 	bl	80036fc <I2C_WaitOnBTFFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00d      	beq.n	8002a1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d107      	bne.n	8002a18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e01a      	b.n	8002a52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d194      	bne.n	800294e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e000      	b.n	8002a52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	00100002 	.word	0x00100002
 8002a60:	ffff0000 	.word	0xffff0000

08002a64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08c      	sub	sp, #48	; 0x30
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	460b      	mov	r3, r1
 8002a72:	817b      	strh	r3, [r7, #10]
 8002a74:	4613      	mov	r3, r2
 8002a76:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7ff fab6 	bl	8001fec <HAL_GetTick>
 8002a80:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	f040 824b 	bne.w	8002f26 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	2319      	movs	r3, #25
 8002a96:	2201      	movs	r2, #1
 8002a98:	497f      	ldr	r1, [pc, #508]	; (8002c98 <HAL_I2C_Master_Receive+0x234>)
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 fccc 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e23e      	b.n	8002f28 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_I2C_Master_Receive+0x54>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e237      	b.n	8002f28 <HAL_I2C_Master_Receive+0x4c4>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d007      	beq.n	8002ade <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2222      	movs	r2, #34	; 0x22
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2210      	movs	r2, #16
 8002afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	893a      	ldrh	r2, [r7, #8]
 8002b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a5f      	ldr	r2, [pc, #380]	; (8002c9c <HAL_I2C_Master_Receive+0x238>)
 8002b1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b20:	8979      	ldrh	r1, [r7, #10]
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 fbb8 	bl	800329c <I2C_MasterRequestRead>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e1f8      	b.n	8002f28 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d113      	bne.n	8002b66 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	e1cc      	b.n	8002f00 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d11e      	bne.n	8002bac <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b7e:	b672      	cpsid	i
}
 8002b80:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ba8:	b662      	cpsie	i
}
 8002baa:	e035      	b.n	8002c18 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d11e      	bne.n	8002bf2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc4:	b672      	cpsid	i
}
 8002bc6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bee:	b662      	cpsie	i
}
 8002bf0:	e012      	b.n	8002c18 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c18:	e172      	b.n	8002f00 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	f200 811f 	bhi.w	8002e62 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d123      	bne.n	8002c74 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fdab 	bl	800378c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e173      	b.n	8002f28 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c72:	e145      	b.n	8002f00 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d152      	bne.n	8002d22 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	2200      	movs	r2, #0
 8002c84:	4906      	ldr	r1, [pc, #24]	; (8002ca0 <HAL_I2C_Master_Receive+0x23c>)
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 fbd6 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e148      	b.n	8002f28 <HAL_I2C_Master_Receive+0x4c4>
 8002c96:	bf00      	nop
 8002c98:	00100002 	.word	0x00100002
 8002c9c:	ffff0000 	.word	0xffff0000
 8002ca0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca4:	b672      	cpsid	i
}
 8002ca6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002cea:	b662      	cpsie	i
}
 8002cec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d20:	e0ee      	b.n	8002f00 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	2200      	movs	r2, #0
 8002d2a:	4981      	ldr	r1, [pc, #516]	; (8002f30 <HAL_I2C_Master_Receive+0x4cc>)
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 fb83 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0f5      	b.n	8002f28 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d4c:	b672      	cpsid	i
}
 8002d4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d82:	4b6c      	ldr	r3, [pc, #432]	; (8002f34 <HAL_I2C_Master_Receive+0x4d0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	08db      	lsrs	r3, r3, #3
 8002d88:	4a6b      	ldr	r2, [pc, #428]	; (8002f38 <HAL_I2C_Master_Receive+0x4d4>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	0a1a      	lsrs	r2, r3, #8
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	00da      	lsls	r2, r3, #3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d118      	bne.n	8002dda <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f043 0220 	orr.w	r2, r3, #32
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002dca:	b662      	cpsie	i
}
 8002dcc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0a6      	b.n	8002f28 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d1d9      	bne.n	8002d9c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e2a:	b662      	cpsie	i
}
 8002e2c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e60:	e04e      	b.n	8002f00 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 fc90 	bl	800378c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e058      	b.n	8002f28 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d124      	bne.n	8002f00 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d107      	bne.n	8002ece <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ecc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f47f ae88 	bne.w	8002c1a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e000      	b.n	8002f28 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
  }
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3728      	adds	r7, #40	; 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	00010004 	.word	0x00010004
 8002f34:	20000008 	.word	0x20000008
 8002f38:	14f8b589 	.word	0x14f8b589

08002f3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f4c:	f7ff f84e 	bl	8001fec <HAL_GetTick>
 8002f50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	f040 8111 	bne.w	8003186 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	2319      	movs	r3, #25
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4988      	ldr	r1, [pc, #544]	; (8003190 <HAL_I2C_IsDeviceReady+0x254>)
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fa62 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e104      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_I2C_IsDeviceReady+0x50>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e0fd      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d007      	beq.n	8002fb2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2224      	movs	r2, #36	; 0x24
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4a70      	ldr	r2, [pc, #448]	; (8003194 <HAL_I2C_IsDeviceReady+0x258>)
 8002fd4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fa20 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300c:	d103      	bne.n	8003016 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e0b6      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800301a:	897b      	ldrh	r3, [r7, #10]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003028:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800302a:	f7fe ffdf 	bl	8001fec <HAL_GetTick>
 800302e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b02      	cmp	r3, #2
 800303c:	bf0c      	ite	eq
 800303e:	2301      	moveq	r3, #1
 8003040:	2300      	movne	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800305e:	e025      	b.n	80030ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003060:	f7fe ffc4 	bl	8001fec <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d302      	bcc.n	8003076 <HAL_I2C_IsDeviceReady+0x13a>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d103      	bne.n	800307e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	22a0      	movs	r2, #160	; 0xa0
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b02      	cmp	r3, #2
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2ba0      	cmp	r3, #160	; 0xa0
 80030b6:	d005      	beq.n	80030c4 <HAL_I2C_IsDeviceReady+0x188>
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d102      	bne.n	80030c4 <HAL_I2C_IsDeviceReady+0x188>
 80030be:	7dbb      	ldrb	r3, [r7, #22]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0cd      	beq.n	8003060 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d129      	bne.n	800312e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2319      	movs	r3, #25
 8003106:	2201      	movs	r2, #1
 8003108:	4921      	ldr	r1, [pc, #132]	; (8003190 <HAL_I2C_IsDeviceReady+0x254>)
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f994 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e036      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e02c      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003146:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2319      	movs	r3, #25
 800314e:	2201      	movs	r2, #1
 8003150:	490f      	ldr	r1, [pc, #60]	; (8003190 <HAL_I2C_IsDeviceReady+0x254>)
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f970 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e012      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	3301      	adds	r3, #1
 8003166:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	f4ff af32 	bcc.w	8002fd6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003186:	2302      	movs	r3, #2
  }
}
 8003188:	4618      	mov	r0, r3
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	00100002 	.word	0x00100002
 8003194:	ffff0000 	.word	0xffff0000

08003198 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	460b      	mov	r3, r1
 80031a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d006      	beq.n	80031c2 <I2C_MasterRequestWrite+0x2a>
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d003      	beq.n	80031c2 <I2C_MasterRequestWrite+0x2a>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031c0:	d108      	bne.n	80031d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	e00b      	b.n	80031ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	2b12      	cmp	r3, #18
 80031da:	d107      	bne.n	80031ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f91d 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00d      	beq.n	8003220 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003212:	d103      	bne.n	800321c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800321a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e035      	b.n	800328c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003228:	d108      	bne.n	800323c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800322a:	897b      	ldrh	r3, [r7, #10]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003238:	611a      	str	r2, [r3, #16]
 800323a:	e01b      	b.n	8003274 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800323c:	897b      	ldrh	r3, [r7, #10]
 800323e:	11db      	asrs	r3, r3, #7
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f003 0306 	and.w	r3, r3, #6
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f063 030f 	orn	r3, r3, #15
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	490e      	ldr	r1, [pc, #56]	; (8003294 <I2C_MasterRequestWrite+0xfc>)
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f966 	bl	800352c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e010      	b.n	800328c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	4907      	ldr	r1, [pc, #28]	; (8003298 <I2C_MasterRequestWrite+0x100>)
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f956 	bl	800352c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	00010008 	.word	0x00010008
 8003298:	00010002 	.word	0x00010002

0800329c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	460b      	mov	r3, r1
 80032aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d006      	beq.n	80032d6 <I2C_MasterRequestRead+0x3a>
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d003      	beq.n	80032d6 <I2C_MasterRequestRead+0x3a>
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032d4:	d108      	bne.n	80032e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e00b      	b.n	8003300 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	2b11      	cmp	r3, #17
 80032ee:	d107      	bne.n	8003300 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f893 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00d      	beq.n	8003334 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003326:	d103      	bne.n	8003330 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800332e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e079      	b.n	8003428 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800333c:	d108      	bne.n	8003350 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800333e:	897b      	ldrh	r3, [r7, #10]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	b2da      	uxtb	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	611a      	str	r2, [r3, #16]
 800334e:	e05f      	b.n	8003410 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003350:	897b      	ldrh	r3, [r7, #10]
 8003352:	11db      	asrs	r3, r3, #7
 8003354:	b2db      	uxtb	r3, r3
 8003356:	f003 0306 	and.w	r3, r3, #6
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f063 030f 	orn	r3, r3, #15
 8003360:	b2da      	uxtb	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4930      	ldr	r1, [pc, #192]	; (8003430 <I2C_MasterRequestRead+0x194>)
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f8dc 	bl	800352c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e054      	b.n	8003428 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800337e:	897b      	ldrh	r3, [r7, #10]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	4929      	ldr	r1, [pc, #164]	; (8003434 <I2C_MasterRequestRead+0x198>)
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f8cc 	bl	800352c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e044      	b.n	8003428 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f831 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00d      	beq.n	80033f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ea:	d103      	bne.n	80033f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e017      	b.n	8003428 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80033f8:	897b      	ldrh	r3, [r7, #10]
 80033fa:	11db      	asrs	r3, r3, #7
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f003 0306 	and.w	r3, r3, #6
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f063 030e 	orn	r3, r3, #14
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	4907      	ldr	r1, [pc, #28]	; (8003434 <I2C_MasterRequestRead+0x198>)
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f888 	bl	800352c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	00010008 	.word	0x00010008
 8003434:	00010002 	.word	0x00010002

08003438 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	4613      	mov	r3, r2
 8003446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003448:	e048      	b.n	80034dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003450:	d044      	beq.n	80034dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003452:	f7fe fdcb 	bl	8001fec <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d302      	bcc.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d139      	bne.n	80034dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	0c1b      	lsrs	r3, r3, #16
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b01      	cmp	r3, #1
 8003470:	d10d      	bne.n	800348e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	43da      	mvns	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4013      	ands	r3, r2
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	e00c      	b.n	80034a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	43da      	mvns	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4013      	ands	r3, r2
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d116      	bne.n	80034dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	f043 0220 	orr.w	r2, r3, #32
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e023      	b.n	8003524 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	0c1b      	lsrs	r3, r3, #16
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d10d      	bne.n	8003502 <I2C_WaitOnFlagUntilTimeout+0xca>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	43da      	mvns	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4013      	ands	r3, r2
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	e00c      	b.n	800351c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	43da      	mvns	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4013      	ands	r3, r2
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf0c      	ite	eq
 8003514:	2301      	moveq	r3, #1
 8003516:	2300      	movne	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	429a      	cmp	r2, r3
 8003520:	d093      	beq.n	800344a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800353a:	e071      	b.n	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354a:	d123      	bne.n	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003564:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	f043 0204 	orr.w	r2, r3, #4
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e067      	b.n	8003664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d041      	beq.n	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359c:	f7fe fd26 	bl	8001fec <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d302      	bcc.n	80035b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d136      	bne.n	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d10c      	bne.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	43da      	mvns	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4013      	ands	r3, r2
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	bf14      	ite	ne
 80035ce:	2301      	movne	r3, #1
 80035d0:	2300      	moveq	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	e00b      	b.n	80035ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	43da      	mvns	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4013      	ands	r3, r2
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	bf14      	ite	ne
 80035e8:	2301      	movne	r3, #1
 80035ea:	2300      	moveq	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d016      	beq.n	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e021      	b.n	8003664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	0c1b      	lsrs	r3, r3, #16
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b01      	cmp	r3, #1
 8003628:	d10c      	bne.n	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	43da      	mvns	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4013      	ands	r3, r2
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e00b      	b.n	800365c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	43da      	mvns	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4013      	ands	r3, r2
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf14      	ite	ne
 8003656:	2301      	movne	r3, #1
 8003658:	2300      	moveq	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	f47f af6d 	bne.w	800353c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003678:	e034      	b.n	80036e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f8e3 	bl	8003846 <I2C_IsAcknowledgeFailed>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e034      	b.n	80036f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d028      	beq.n	80036e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003692:	f7fe fcab 	bl	8001fec <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d302      	bcc.n	80036a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d11d      	bne.n	80036e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b2:	2b80      	cmp	r3, #128	; 0x80
 80036b4:	d016      	beq.n	80036e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	f043 0220 	orr.w	r2, r3, #32
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e007      	b.n	80036f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ee:	2b80      	cmp	r3, #128	; 0x80
 80036f0:	d1c3      	bne.n	800367a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003708:	e034      	b.n	8003774 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f89b 	bl	8003846 <I2C_IsAcknowledgeFailed>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e034      	b.n	8003784 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d028      	beq.n	8003774 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003722:	f7fe fc63 	bl	8001fec <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	429a      	cmp	r2, r3
 8003730:	d302      	bcc.n	8003738 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d11d      	bne.n	8003774 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b04      	cmp	r3, #4
 8003744:	d016      	beq.n	8003774 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	f043 0220 	orr.w	r2, r3, #32
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e007      	b.n	8003784 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b04      	cmp	r3, #4
 8003780:	d1c3      	bne.n	800370a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003798:	e049      	b.n	800382e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	2b10      	cmp	r3, #16
 80037a6:	d119      	bne.n	80037dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0210 	mvn.w	r2, #16
 80037b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e030      	b.n	800383e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037dc:	f7fe fc06 	bl	8001fec <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d302      	bcc.n	80037f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d11d      	bne.n	800382e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	d016      	beq.n	800382e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f043 0220 	orr.w	r2, r3, #32
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e007      	b.n	800383e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003838:	2b40      	cmp	r3, #64	; 0x40
 800383a:	d1ae      	bne.n	800379a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385c:	d11b      	bne.n	8003896 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003866:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f043 0204 	orr.w	r2, r3, #4
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a4:	b08b      	sub	sp, #44	; 0x2c
 80038a6:	af06      	add	r7, sp, #24
 80038a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0f1      	b.n	8003a98 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d106      	bne.n	80038ce <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7fd ff3f 	bl	800174c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2203      	movs	r2, #3
 80038d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 ff86 	bl	80047ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	687e      	ldr	r6, [r7, #4]
 80038e8:	466d      	mov	r5, sp
 80038ea:	f106 0410 	add.w	r4, r6, #16
 80038ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	602b      	str	r3, [r5, #0]
 80038f6:	1d33      	adds	r3, r6, #4
 80038f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038fa:	6838      	ldr	r0, [r7, #0]
 80038fc:	f000 ff66 	bl	80047cc <USB_CoreInit>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2202      	movs	r2, #2
 800390a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e0c2      	b.n	8003a98 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f000 ff81 	bl	8004820 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800391e:	2300      	movs	r3, #0
 8003920:	73fb      	strb	r3, [r7, #15]
 8003922:	e040      	b.n	80039a6 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	440b      	add	r3, r1
 8003934:	3301      	adds	r3, #1
 8003936:	2201      	movs	r2, #1
 8003938:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	440b      	add	r3, r1
 800394a:	7bfa      	ldrb	r2, [r7, #15]
 800394c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	440b      	add	r3, r1
 800395e:	3303      	adds	r3, #3
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003964:	7bfa      	ldrb	r2, [r7, #15]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	440b      	add	r3, r1
 8003972:	3338      	adds	r3, #56	; 0x38
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003978:	7bfa      	ldrb	r2, [r7, #15]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	440b      	add	r3, r1
 8003986:	333c      	adds	r3, #60	; 0x3c
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800398c:	7bfa      	ldrb	r2, [r7, #15]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	440b      	add	r3, r1
 800399a:	3340      	adds	r3, #64	; 0x40
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	3301      	adds	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
 80039a6:	7bfa      	ldrb	r2, [r7, #15]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d3b9      	bcc.n	8003924 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b0:	2300      	movs	r3, #0
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	e044      	b.n	8003a40 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039b6:	7bfa      	ldrb	r2, [r7, #15]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	440b      	add	r3, r1
 80039c4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039cc:	7bfa      	ldrb	r2, [r7, #15]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	440b      	add	r3, r1
 80039da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039de:	7bfa      	ldrb	r2, [r7, #15]
 80039e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039e2:	7bfa      	ldrb	r2, [r7, #15]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	440b      	add	r3, r1
 80039f0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039f8:	7bfa      	ldrb	r2, [r7, #15]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	440b      	add	r3, r1
 8003a06:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a0e:	7bfa      	ldrb	r2, [r7, #15]
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	440b      	add	r3, r1
 8003a1c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a24:	7bfa      	ldrb	r2, [r7, #15]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	440b      	add	r3, r1
 8003a32:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
 8003a40:	7bfa      	ldrb	r2, [r7, #15]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d3b5      	bcc.n	80039b6 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	687e      	ldr	r6, [r7, #4]
 8003a52:	466d      	mov	r5, sp
 8003a54:	f106 0410 	add.w	r4, r6, #16
 8003a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	602b      	str	r3, [r5, #0]
 8003a60:	1d33      	adds	r3, r6, #4
 8003a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a64:	6838      	ldr	r0, [r7, #0]
 8003a66:	f000 fee7 	bl	8004838 <USB_DevInit>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e00d      	b.n	8003a98 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fef1 	bl	8004878 <USB_DevDisconnect>

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003aa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e272      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 8087 	beq.w	8003bce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ac0:	4b92      	ldr	r3, [pc, #584]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 030c 	and.w	r3, r3, #12
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d00c      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003acc:	4b8f      	ldr	r3, [pc, #572]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d112      	bne.n	8003afe <HAL_RCC_OscConfig+0x5e>
 8003ad8:	4b8c      	ldr	r3, [pc, #560]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	d10b      	bne.n	8003afe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae6:	4b89      	ldr	r3, [pc, #548]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d06c      	beq.n	8003bcc <HAL_RCC_OscConfig+0x12c>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d168      	bne.n	8003bcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e24c      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b06:	d106      	bne.n	8003b16 <HAL_RCC_OscConfig+0x76>
 8003b08:	4b80      	ldr	r3, [pc, #512]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a7f      	ldr	r2, [pc, #508]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	e02e      	b.n	8003b74 <HAL_RCC_OscConfig+0xd4>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10c      	bne.n	8003b38 <HAL_RCC_OscConfig+0x98>
 8003b1e:	4b7b      	ldr	r3, [pc, #492]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a7a      	ldr	r2, [pc, #488]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	4b78      	ldr	r3, [pc, #480]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a77      	ldr	r2, [pc, #476]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e01d      	b.n	8003b74 <HAL_RCC_OscConfig+0xd4>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCC_OscConfig+0xbc>
 8003b42:	4b72      	ldr	r3, [pc, #456]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a71      	ldr	r2, [pc, #452]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	4b6f      	ldr	r3, [pc, #444]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a6e      	ldr	r2, [pc, #440]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e00b      	b.n	8003b74 <HAL_RCC_OscConfig+0xd4>
 8003b5c:	4b6b      	ldr	r3, [pc, #428]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a6a      	ldr	r2, [pc, #424]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	4b68      	ldr	r3, [pc, #416]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a67      	ldr	r2, [pc, #412]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d013      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7fe fa36 	bl	8001fec <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b84:	f7fe fa32 	bl	8001fec <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	; 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e200      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b96:	4b5d      	ldr	r3, [pc, #372]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0xe4>
 8003ba2:	e014      	b.n	8003bce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fe fa22 	bl	8001fec <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bac:	f7fe fa1e 	bl	8001fec <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	; 0x64
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e1ec      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bbe:	4b53      	ldr	r3, [pc, #332]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x10c>
 8003bca:	e000      	b.n	8003bce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d063      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bda:	4b4c      	ldr	r3, [pc, #304]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 030c 	and.w	r3, r3, #12
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003be6:	4b49      	ldr	r3, [pc, #292]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d11c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x18c>
 8003bf2:	4b46      	ldr	r3, [pc, #280]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d116      	bne.n	8003c2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfe:	4b43      	ldr	r3, [pc, #268]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_RCC_OscConfig+0x176>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e1c0      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c16:	4b3d      	ldr	r3, [pc, #244]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4939      	ldr	r1, [pc, #228]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2a:	e03a      	b.n	8003ca2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c34:	4b36      	ldr	r3, [pc, #216]	; (8003d10 <HAL_RCC_OscConfig+0x270>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3a:	f7fe f9d7 	bl	8001fec <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c42:	f7fe f9d3 	bl	8001fec <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e1a1      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c54:	4b2d      	ldr	r3, [pc, #180]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c60:	4b2a      	ldr	r3, [pc, #168]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4927      	ldr	r1, [pc, #156]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]
 8003c74:	e015      	b.n	8003ca2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c76:	4b26      	ldr	r3, [pc, #152]	; (8003d10 <HAL_RCC_OscConfig+0x270>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fe f9b6 	bl	8001fec <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c84:	f7fe f9b2 	bl	8001fec <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e180      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c96:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d03a      	beq.n	8003d24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d019      	beq.n	8003cea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb6:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <HAL_RCC_OscConfig+0x274>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cbc:	f7fe f996 	bl	8001fec <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc4:	f7fe f992 	bl	8001fec <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e160      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	f000 face 	bl	8004284 <RCC_Delay>
 8003ce8:	e01c      	b.n	8003d24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cea:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <HAL_RCC_OscConfig+0x274>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf0:	f7fe f97c 	bl	8001fec <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf6:	e00f      	b.n	8003d18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf8:	f7fe f978 	bl	8001fec <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d908      	bls.n	8003d18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e146      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
 8003d0a:	bf00      	nop
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	42420000 	.word	0x42420000
 8003d14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d18:	4b92      	ldr	r3, [pc, #584]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e9      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80a6 	beq.w	8003e7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d32:	2300      	movs	r3, #0
 8003d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d36:	4b8b      	ldr	r3, [pc, #556]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10d      	bne.n	8003d5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d42:	4b88      	ldr	r3, [pc, #544]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	4a87      	ldr	r2, [pc, #540]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	61d3      	str	r3, [r2, #28]
 8003d4e:	4b85      	ldr	r3, [pc, #532]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5e:	4b82      	ldr	r3, [pc, #520]	; (8003f68 <HAL_RCC_OscConfig+0x4c8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d118      	bne.n	8003d9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d6a:	4b7f      	ldr	r3, [pc, #508]	; (8003f68 <HAL_RCC_OscConfig+0x4c8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a7e      	ldr	r2, [pc, #504]	; (8003f68 <HAL_RCC_OscConfig+0x4c8>)
 8003d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d76:	f7fe f939 	bl	8001fec <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7e:	f7fe f935 	bl	8001fec <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b64      	cmp	r3, #100	; 0x64
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e103      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d90:	4b75      	ldr	r3, [pc, #468]	; (8003f68 <HAL_RCC_OscConfig+0x4c8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d106      	bne.n	8003db2 <HAL_RCC_OscConfig+0x312>
 8003da4:	4b6f      	ldr	r3, [pc, #444]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	4a6e      	ldr	r2, [pc, #440]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	6213      	str	r3, [r2, #32]
 8003db0:	e02d      	b.n	8003e0e <HAL_RCC_OscConfig+0x36e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x334>
 8003dba:	4b6a      	ldr	r3, [pc, #424]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	4a69      	ldr	r2, [pc, #420]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	6213      	str	r3, [r2, #32]
 8003dc6:	4b67      	ldr	r3, [pc, #412]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	4a66      	ldr	r2, [pc, #408]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	f023 0304 	bic.w	r3, r3, #4
 8003dd0:	6213      	str	r3, [r2, #32]
 8003dd2:	e01c      	b.n	8003e0e <HAL_RCC_OscConfig+0x36e>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b05      	cmp	r3, #5
 8003dda:	d10c      	bne.n	8003df6 <HAL_RCC_OscConfig+0x356>
 8003ddc:	4b61      	ldr	r3, [pc, #388]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	4a60      	ldr	r2, [pc, #384]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003de2:	f043 0304 	orr.w	r3, r3, #4
 8003de6:	6213      	str	r3, [r2, #32]
 8003de8:	4b5e      	ldr	r3, [pc, #376]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	4a5d      	ldr	r2, [pc, #372]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	6213      	str	r3, [r2, #32]
 8003df4:	e00b      	b.n	8003e0e <HAL_RCC_OscConfig+0x36e>
 8003df6:	4b5b      	ldr	r3, [pc, #364]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	4a5a      	ldr	r2, [pc, #360]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	6213      	str	r3, [r2, #32]
 8003e02:	4b58      	ldr	r3, [pc, #352]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	4a57      	ldr	r2, [pc, #348]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	f023 0304 	bic.w	r3, r3, #4
 8003e0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d015      	beq.n	8003e42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e16:	f7fe f8e9 	bl	8001fec <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1c:	e00a      	b.n	8003e34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7fe f8e5 	bl	8001fec <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e0b1      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e34:	4b4b      	ldr	r3, [pc, #300]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ee      	beq.n	8003e1e <HAL_RCC_OscConfig+0x37e>
 8003e40:	e014      	b.n	8003e6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e42:	f7fe f8d3 	bl	8001fec <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e48:	e00a      	b.n	8003e60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4a:	f7fe f8cf 	bl	8001fec <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e09b      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e60:	4b40      	ldr	r3, [pc, #256]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1ee      	bne.n	8003e4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d105      	bne.n	8003e7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e72:	4b3c      	ldr	r3, [pc, #240]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	4a3b      	ldr	r2, [pc, #236]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8087 	beq.w	8003f96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e88:	4b36      	ldr	r3, [pc, #216]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 030c 	and.w	r3, r3, #12
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d061      	beq.n	8003f58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d146      	bne.n	8003f2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9c:	4b33      	ldr	r3, [pc, #204]	; (8003f6c <HAL_RCC_OscConfig+0x4cc>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea2:	f7fe f8a3 	bl	8001fec <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eaa:	f7fe f89f 	bl	8001fec <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e06d      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ebc:	4b29      	ldr	r3, [pc, #164]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f0      	bne.n	8003eaa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed0:	d108      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ed2:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	4921      	ldr	r1, [pc, #132]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ee4:	4b1f      	ldr	r3, [pc, #124]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a19      	ldr	r1, [r3, #32]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	491b      	ldr	r1, [pc, #108]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003efc:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <HAL_RCC_OscConfig+0x4cc>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f02:	f7fe f873 	bl	8001fec <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0a:	f7fe f86f 	bl	8001fec <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e03d      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f1c:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0f0      	beq.n	8003f0a <HAL_RCC_OscConfig+0x46a>
 8003f28:	e035      	b.n	8003f96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2a:	4b10      	ldr	r3, [pc, #64]	; (8003f6c <HAL_RCC_OscConfig+0x4cc>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fe f85c 	bl	8001fec <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f38:	f7fe f858 	bl	8001fec <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e026      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f4a:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x498>
 8003f56:	e01e      	b.n	8003f96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d107      	bne.n	8003f70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e019      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40007000 	.word	0x40007000
 8003f6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_RCC_OscConfig+0x500>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d106      	bne.n	8003f92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d001      	beq.n	8003f96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000

08003fa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0d0      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b6a      	ldr	r3, [pc, #424]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d910      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b67      	ldr	r3, [pc, #412]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 0207 	bic.w	r2, r3, #7
 8003fce:	4965      	ldr	r1, [pc, #404]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b63      	ldr	r3, [pc, #396]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0b8      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004000:	4b59      	ldr	r3, [pc, #356]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	4a58      	ldr	r2, [pc, #352]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800400a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004018:	4b53      	ldr	r3, [pc, #332]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4a52      	ldr	r2, [pc, #328]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004022:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004024:	4b50      	ldr	r3, [pc, #320]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	494d      	ldr	r1, [pc, #308]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	4313      	orrs	r3, r2
 8004034:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d040      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	4b47      	ldr	r3, [pc, #284]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d115      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e07f      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004062:	4b41      	ldr	r3, [pc, #260]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e073      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004072:	4b3d      	ldr	r3, [pc, #244]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e06b      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004082:	4b39      	ldr	r3, [pc, #228]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f023 0203 	bic.w	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4936      	ldr	r1, [pc, #216]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004090:	4313      	orrs	r3, r2
 8004092:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004094:	f7fd ffaa 	bl	8001fec <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409c:	f7fd ffa6 	bl	8001fec <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e053      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b2:	4b2d      	ldr	r3, [pc, #180]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 020c 	and.w	r2, r3, #12
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d1eb      	bne.n	800409c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040c4:	4b27      	ldr	r3, [pc, #156]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d210      	bcs.n	80040f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b24      	ldr	r3, [pc, #144]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 0207 	bic.w	r2, r3, #7
 80040da:	4922      	ldr	r1, [pc, #136]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e032      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004100:	4b19      	ldr	r3, [pc, #100]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4916      	ldr	r1, [pc, #88]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	4313      	orrs	r3, r2
 8004110:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	490e      	ldr	r1, [pc, #56]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004132:	f000 f821 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8004136:	4602      	mov	r2, r0
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	490a      	ldr	r1, [pc, #40]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004144:	5ccb      	ldrb	r3, [r1, r3]
 8004146:	fa22 f303 	lsr.w	r3, r2, r3
 800414a:	4a09      	ldr	r2, [pc, #36]	; (8004170 <HAL_RCC_ClockConfig+0x1cc>)
 800414c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_RCC_ClockConfig+0x1d0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7fd ff08 	bl	8001f68 <HAL_InitTick>

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40022000 	.word	0x40022000
 8004168:	40021000 	.word	0x40021000
 800416c:	08006d04 	.word	0x08006d04
 8004170:	20000008 	.word	0x20000008
 8004174:	2000000c 	.word	0x2000000c

08004178 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	2300      	movs	r3, #0
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	2300      	movs	r3, #0
 800418c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004192:	4b1e      	ldr	r3, [pc, #120]	; (800420c <HAL_RCC_GetSysClockFreq+0x94>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d002      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0x30>
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d003      	beq.n	80041ae <HAL_RCC_GetSysClockFreq+0x36>
 80041a6:	e027      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041a8:	4b19      	ldr	r3, [pc, #100]	; (8004210 <HAL_RCC_GetSysClockFreq+0x98>)
 80041aa:	613b      	str	r3, [r7, #16]
      break;
 80041ac:	e027      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	0c9b      	lsrs	r3, r3, #18
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	4a17      	ldr	r2, [pc, #92]	; (8004214 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041b8:	5cd3      	ldrb	r3, [r2, r3]
 80041ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d010      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041c6:	4b11      	ldr	r3, [pc, #68]	; (800420c <HAL_RCC_GetSysClockFreq+0x94>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	0c5b      	lsrs	r3, r3, #17
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	4a11      	ldr	r2, [pc, #68]	; (8004218 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041d2:	5cd3      	ldrb	r3, [r2, r3]
 80041d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a0d      	ldr	r2, [pc, #52]	; (8004210 <HAL_RCC_GetSysClockFreq+0x98>)
 80041da:	fb03 f202 	mul.w	r2, r3, r2
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	e004      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a0c      	ldr	r2, [pc, #48]	; (800421c <HAL_RCC_GetSysClockFreq+0xa4>)
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	613b      	str	r3, [r7, #16]
      break;
 80041f6:	e002      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_RCC_GetSysClockFreq+0x98>)
 80041fa:	613b      	str	r3, [r7, #16]
      break;
 80041fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041fe:	693b      	ldr	r3, [r7, #16]
}
 8004200:	4618      	mov	r0, r3
 8004202:	371c      	adds	r7, #28
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40021000 	.word	0x40021000
 8004210:	007a1200 	.word	0x007a1200
 8004214:	08006d1c 	.word	0x08006d1c
 8004218:	08006d2c 	.word	0x08006d2c
 800421c:	003d0900 	.word	0x003d0900

08004220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004224:	4b02      	ldr	r3, [pc, #8]	; (8004230 <HAL_RCC_GetHCLKFreq+0x10>)
 8004226:	681b      	ldr	r3, [r3, #0]
}
 8004228:	4618      	mov	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr
 8004230:	20000008 	.word	0x20000008

08004234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004238:	f7ff fff2 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 800423c:	4602      	mov	r2, r0
 800423e:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	0a1b      	lsrs	r3, r3, #8
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4903      	ldr	r1, [pc, #12]	; (8004258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800424a:	5ccb      	ldrb	r3, [r1, r3]
 800424c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004250:	4618      	mov	r0, r3
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40021000 	.word	0x40021000
 8004258:	08006d14 	.word	0x08006d14

0800425c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004260:	f7ff ffde 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8004264:	4602      	mov	r2, r0
 8004266:	4b05      	ldr	r3, [pc, #20]	; (800427c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	0adb      	lsrs	r3, r3, #11
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	4903      	ldr	r1, [pc, #12]	; (8004280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004272:	5ccb      	ldrb	r3, [r1, r3]
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004278:	4618      	mov	r0, r3
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40021000 	.word	0x40021000
 8004280:	08006d14 	.word	0x08006d14

08004284 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800428c:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <RCC_Delay+0x34>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a0a      	ldr	r2, [pc, #40]	; (80042bc <RCC_Delay+0x38>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	0a5b      	lsrs	r3, r3, #9
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	fb02 f303 	mul.w	r3, r2, r3
 800429e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042a0:	bf00      	nop
  }
  while (Delay --);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	1e5a      	subs	r2, r3, #1
 80042a6:	60fa      	str	r2, [r7, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f9      	bne.n	80042a0 <RCC_Delay+0x1c>
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	20000008 	.word	0x20000008
 80042bc:	10624dd3 	.word	0x10624dd3

080042c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d07d      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042dc:	2300      	movs	r3, #0
 80042de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e0:	4b4f      	ldr	r3, [pc, #316]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10d      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ec:	4b4c      	ldr	r3, [pc, #304]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	4a4b      	ldr	r2, [pc, #300]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f6:	61d3      	str	r3, [r2, #28]
 80042f8:	4b49      	ldr	r3, [pc, #292]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004304:	2301      	movs	r3, #1
 8004306:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004308:	4b46      	ldr	r3, [pc, #280]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004310:	2b00      	cmp	r3, #0
 8004312:	d118      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004314:	4b43      	ldr	r3, [pc, #268]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a42      	ldr	r2, [pc, #264]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800431a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004320:	f7fd fe64 	bl	8001fec <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004326:	e008      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004328:	f7fd fe60 	bl	8001fec <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b64      	cmp	r3, #100	; 0x64
 8004334:	d901      	bls.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e06d      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433a:	4b3a      	ldr	r3, [pc, #232]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004346:	4b36      	ldr	r3, [pc, #216]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d02e      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	429a      	cmp	r2, r3
 8004362:	d027      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004364:	4b2e      	ldr	r3, [pc, #184]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800436c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800436e:	4b2e      	ldr	r3, [pc, #184]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004370:	2201      	movs	r2, #1
 8004372:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004374:	4b2c      	ldr	r3, [pc, #176]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800437a:	4a29      	ldr	r2, [pc, #164]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d014      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438a:	f7fd fe2f 	bl	8001fec <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004390:	e00a      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004392:	f7fd fe2b 	bl	8001fec <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e036      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a8:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0ee      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043b4:	4b1a      	ldr	r3, [pc, #104]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	4917      	ldr	r1, [pc, #92]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043c6:	7dfb      	ldrb	r3, [r7, #23]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d105      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043cc:	4b14      	ldr	r3, [pc, #80]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	4a13      	ldr	r2, [pc, #76]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043e4:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	490b      	ldr	r1, [pc, #44]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0310 	and.w	r3, r3, #16
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d008      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	4904      	ldr	r1, [pc, #16]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004410:	4313      	orrs	r3, r2
 8004412:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000
 8004424:	40007000 	.word	0x40007000
 8004428:	42420440 	.word	0x42420440

0800442c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e042      	b.n	80044c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fd f92e 	bl	80016b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2224      	movs	r2, #36	; 0x24
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800446e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f91d 	bl	80046b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004484:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695a      	ldr	r2, [r3, #20]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004494:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08a      	sub	sp, #40	; 0x28
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d16d      	bne.n	80045c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_UART_Transmit+0x2c>
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e066      	b.n	80045ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2221      	movs	r2, #33	; 0x21
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800450a:	f7fd fd6f 	bl	8001fec <HAL_GetTick>
 800450e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	88fa      	ldrh	r2, [r7, #6]
 8004514:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	88fa      	ldrh	r2, [r7, #6]
 800451a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004524:	d108      	bne.n	8004538 <HAL_UART_Transmit+0x6c>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d104      	bne.n	8004538 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	e003      	b.n	8004540 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800453c:	2300      	movs	r3, #0
 800453e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004540:	e02a      	b.n	8004598 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2200      	movs	r2, #0
 800454a:	2180      	movs	r1, #128	; 0x80
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f840 	bl	80045d2 <UART_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e036      	b.n	80045ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10b      	bne.n	800457a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004570:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	3302      	adds	r3, #2
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	e007      	b.n	800458a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	781a      	ldrb	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	3301      	adds	r3, #1
 8004588:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1cf      	bne.n	8004542 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2200      	movs	r2, #0
 80045aa:	2140      	movs	r1, #64	; 0x40
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 f810 	bl	80045d2 <UART_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e006      	b.n	80045ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	e000      	b.n	80045ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80045c8:	2302      	movs	r3, #2
  }
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b090      	sub	sp, #64	; 0x40
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	603b      	str	r3, [r7, #0]
 80045de:	4613      	mov	r3, r2
 80045e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e2:	e050      	b.n	8004686 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ea:	d04c      	beq.n	8004686 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d007      	beq.n	8004602 <UART_WaitOnFlagUntilTimeout+0x30>
 80045f2:	f7fd fcfb 	bl	8001fec <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045fe:	429a      	cmp	r2, r3
 8004600:	d241      	bcs.n	8004686 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	330c      	adds	r3, #12
 8004608:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	330c      	adds	r3, #12
 8004620:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004622:	637a      	str	r2, [r7, #52]	; 0x34
 8004624:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004628:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e5      	bne.n	8004602 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3314      	adds	r3, #20
 800463c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	613b      	str	r3, [r7, #16]
   return(result);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f023 0301 	bic.w	r3, r3, #1
 800464c:	63bb      	str	r3, [r7, #56]	; 0x38
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3314      	adds	r3, #20
 8004654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004656:	623a      	str	r2, [r7, #32]
 8004658:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465a:	69f9      	ldr	r1, [r7, #28]
 800465c:	6a3a      	ldr	r2, [r7, #32]
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	61bb      	str	r3, [r7, #24]
   return(result);
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1e5      	bne.n	8004636 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2220      	movs	r2, #32
 8004676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e00f      	b.n	80046a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4013      	ands	r3, r2
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	429a      	cmp	r2, r3
 8004694:	bf0c      	ite	eq
 8004696:	2301      	moveq	r3, #1
 8004698:	2300      	movne	r3, #0
 800469a:	b2db      	uxtb	r3, r3
 800469c:	461a      	mov	r2, r3
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d09f      	beq.n	80045e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3740      	adds	r7, #64	; 0x40
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046ea:	f023 030c 	bic.w	r3, r3, #12
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	430b      	orrs	r3, r1
 80046f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a2c      	ldr	r2, [pc, #176]	; (80047c4 <UART_SetConfig+0x114>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d103      	bne.n	8004720 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004718:	f7ff fda0 	bl	800425c <HAL_RCC_GetPCLK2Freq>
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	e002      	b.n	8004726 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004720:	f7ff fd88 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8004724:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	009a      	lsls	r2, r3, #2
 8004730:	441a      	add	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	4a22      	ldr	r2, [pc, #136]	; (80047c8 <UART_SetConfig+0x118>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	0119      	lsls	r1, r3, #4
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	009a      	lsls	r2, r3, #2
 8004750:	441a      	add	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	fbb2 f2f3 	udiv	r2, r2, r3
 800475c:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <UART_SetConfig+0x118>)
 800475e:	fba3 0302 	umull	r0, r3, r3, r2
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	2064      	movs	r0, #100	; 0x64
 8004766:	fb00 f303 	mul.w	r3, r0, r3
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	3332      	adds	r3, #50	; 0x32
 8004770:	4a15      	ldr	r2, [pc, #84]	; (80047c8 <UART_SetConfig+0x118>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800477c:	4419      	add	r1, r3
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	009a      	lsls	r2, r3, #2
 8004788:	441a      	add	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	fbb2 f2f3 	udiv	r2, r2, r3
 8004794:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <UART_SetConfig+0x118>)
 8004796:	fba3 0302 	umull	r0, r3, r3, r2
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	2064      	movs	r0, #100	; 0x64
 800479e:	fb00 f303 	mul.w	r3, r0, r3
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	3332      	adds	r3, #50	; 0x32
 80047a8:	4a07      	ldr	r2, [pc, #28]	; (80047c8 <UART_SetConfig+0x118>)
 80047aa:	fba2 2303 	umull	r2, r3, r2, r3
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	f003 020f 	and.w	r2, r3, #15
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	440a      	add	r2, r1
 80047ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047bc:	bf00      	nop
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40013800 	.word	0x40013800
 80047c8:	51eb851f 	.word	0x51eb851f

080047cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80047cc:	b084      	sub	sp, #16
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	f107 0014 	add.w	r0, r7, #20
 80047da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	b004      	add	sp, #16
 80047ea:	4770      	bx	lr

080047ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047f4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80047f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	b29b      	uxth	r3, r3
 8004806:	43db      	mvns	r3, r3
 8004808:	b29b      	uxth	r3, r3
 800480a:	4013      	ands	r3, r2
 800480c:	b29a      	uxth	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr

08004820 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004838:	b084      	sub	sp, #16
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	f107 0014 	add.w	r0, r7, #20
 8004846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	b004      	add	sp, #16
 8004876:	4770      	bx	lr

08004878 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr

0800488c <malloc>:
 800488c:	4b02      	ldr	r3, [pc, #8]	; (8004898 <malloc+0xc>)
 800488e:	4601      	mov	r1, r0
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	f000 b82b 	b.w	80048ec <_malloc_r>
 8004896:	bf00      	nop
 8004898:	2000006c 	.word	0x2000006c

0800489c <free>:
 800489c:	4b02      	ldr	r3, [pc, #8]	; (80048a8 <free+0xc>)
 800489e:	4601      	mov	r1, r0
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	f000 baa1 	b.w	8004de8 <_free_r>
 80048a6:	bf00      	nop
 80048a8:	2000006c 	.word	0x2000006c

080048ac <sbrk_aligned>:
 80048ac:	b570      	push	{r4, r5, r6, lr}
 80048ae:	4e0e      	ldr	r6, [pc, #56]	; (80048e8 <sbrk_aligned+0x3c>)
 80048b0:	460c      	mov	r4, r1
 80048b2:	6831      	ldr	r1, [r6, #0]
 80048b4:	4605      	mov	r5, r0
 80048b6:	b911      	cbnz	r1, 80048be <sbrk_aligned+0x12>
 80048b8:	f000 fa3a 	bl	8004d30 <_sbrk_r>
 80048bc:	6030      	str	r0, [r6, #0]
 80048be:	4621      	mov	r1, r4
 80048c0:	4628      	mov	r0, r5
 80048c2:	f000 fa35 	bl	8004d30 <_sbrk_r>
 80048c6:	1c43      	adds	r3, r0, #1
 80048c8:	d00a      	beq.n	80048e0 <sbrk_aligned+0x34>
 80048ca:	1cc4      	adds	r4, r0, #3
 80048cc:	f024 0403 	bic.w	r4, r4, #3
 80048d0:	42a0      	cmp	r0, r4
 80048d2:	d007      	beq.n	80048e4 <sbrk_aligned+0x38>
 80048d4:	1a21      	subs	r1, r4, r0
 80048d6:	4628      	mov	r0, r5
 80048d8:	f000 fa2a 	bl	8004d30 <_sbrk_r>
 80048dc:	3001      	adds	r0, #1
 80048de:	d101      	bne.n	80048e4 <sbrk_aligned+0x38>
 80048e0:	f04f 34ff 	mov.w	r4, #4294967295
 80048e4:	4620      	mov	r0, r4
 80048e6:	bd70      	pop	{r4, r5, r6, pc}
 80048e8:	20000938 	.word	0x20000938

080048ec <_malloc_r>:
 80048ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048f0:	1ccd      	adds	r5, r1, #3
 80048f2:	f025 0503 	bic.w	r5, r5, #3
 80048f6:	3508      	adds	r5, #8
 80048f8:	2d0c      	cmp	r5, #12
 80048fa:	bf38      	it	cc
 80048fc:	250c      	movcc	r5, #12
 80048fe:	2d00      	cmp	r5, #0
 8004900:	4607      	mov	r7, r0
 8004902:	db01      	blt.n	8004908 <_malloc_r+0x1c>
 8004904:	42a9      	cmp	r1, r5
 8004906:	d905      	bls.n	8004914 <_malloc_r+0x28>
 8004908:	230c      	movs	r3, #12
 800490a:	2600      	movs	r6, #0
 800490c:	603b      	str	r3, [r7, #0]
 800490e:	4630      	mov	r0, r6
 8004910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004914:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80049e8 <_malloc_r+0xfc>
 8004918:	f000 f868 	bl	80049ec <__malloc_lock>
 800491c:	f8d8 3000 	ldr.w	r3, [r8]
 8004920:	461c      	mov	r4, r3
 8004922:	bb5c      	cbnz	r4, 800497c <_malloc_r+0x90>
 8004924:	4629      	mov	r1, r5
 8004926:	4638      	mov	r0, r7
 8004928:	f7ff ffc0 	bl	80048ac <sbrk_aligned>
 800492c:	1c43      	adds	r3, r0, #1
 800492e:	4604      	mov	r4, r0
 8004930:	d155      	bne.n	80049de <_malloc_r+0xf2>
 8004932:	f8d8 4000 	ldr.w	r4, [r8]
 8004936:	4626      	mov	r6, r4
 8004938:	2e00      	cmp	r6, #0
 800493a:	d145      	bne.n	80049c8 <_malloc_r+0xdc>
 800493c:	2c00      	cmp	r4, #0
 800493e:	d048      	beq.n	80049d2 <_malloc_r+0xe6>
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	4631      	mov	r1, r6
 8004944:	4638      	mov	r0, r7
 8004946:	eb04 0903 	add.w	r9, r4, r3
 800494a:	f000 f9f1 	bl	8004d30 <_sbrk_r>
 800494e:	4581      	cmp	r9, r0
 8004950:	d13f      	bne.n	80049d2 <_malloc_r+0xe6>
 8004952:	6821      	ldr	r1, [r4, #0]
 8004954:	4638      	mov	r0, r7
 8004956:	1a6d      	subs	r5, r5, r1
 8004958:	4629      	mov	r1, r5
 800495a:	f7ff ffa7 	bl	80048ac <sbrk_aligned>
 800495e:	3001      	adds	r0, #1
 8004960:	d037      	beq.n	80049d2 <_malloc_r+0xe6>
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	442b      	add	r3, r5
 8004966:	6023      	str	r3, [r4, #0]
 8004968:	f8d8 3000 	ldr.w	r3, [r8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d038      	beq.n	80049e2 <_malloc_r+0xf6>
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	42a2      	cmp	r2, r4
 8004974:	d12b      	bne.n	80049ce <_malloc_r+0xe2>
 8004976:	2200      	movs	r2, #0
 8004978:	605a      	str	r2, [r3, #4]
 800497a:	e00f      	b.n	800499c <_malloc_r+0xb0>
 800497c:	6822      	ldr	r2, [r4, #0]
 800497e:	1b52      	subs	r2, r2, r5
 8004980:	d41f      	bmi.n	80049c2 <_malloc_r+0xd6>
 8004982:	2a0b      	cmp	r2, #11
 8004984:	d917      	bls.n	80049b6 <_malloc_r+0xca>
 8004986:	1961      	adds	r1, r4, r5
 8004988:	42a3      	cmp	r3, r4
 800498a:	6025      	str	r5, [r4, #0]
 800498c:	bf18      	it	ne
 800498e:	6059      	strne	r1, [r3, #4]
 8004990:	6863      	ldr	r3, [r4, #4]
 8004992:	bf08      	it	eq
 8004994:	f8c8 1000 	streq.w	r1, [r8]
 8004998:	5162      	str	r2, [r4, r5]
 800499a:	604b      	str	r3, [r1, #4]
 800499c:	4638      	mov	r0, r7
 800499e:	f104 060b 	add.w	r6, r4, #11
 80049a2:	f000 f829 	bl	80049f8 <__malloc_unlock>
 80049a6:	f026 0607 	bic.w	r6, r6, #7
 80049aa:	1d23      	adds	r3, r4, #4
 80049ac:	1af2      	subs	r2, r6, r3
 80049ae:	d0ae      	beq.n	800490e <_malloc_r+0x22>
 80049b0:	1b9b      	subs	r3, r3, r6
 80049b2:	50a3      	str	r3, [r4, r2]
 80049b4:	e7ab      	b.n	800490e <_malloc_r+0x22>
 80049b6:	42a3      	cmp	r3, r4
 80049b8:	6862      	ldr	r2, [r4, #4]
 80049ba:	d1dd      	bne.n	8004978 <_malloc_r+0x8c>
 80049bc:	f8c8 2000 	str.w	r2, [r8]
 80049c0:	e7ec      	b.n	800499c <_malloc_r+0xb0>
 80049c2:	4623      	mov	r3, r4
 80049c4:	6864      	ldr	r4, [r4, #4]
 80049c6:	e7ac      	b.n	8004922 <_malloc_r+0x36>
 80049c8:	4634      	mov	r4, r6
 80049ca:	6876      	ldr	r6, [r6, #4]
 80049cc:	e7b4      	b.n	8004938 <_malloc_r+0x4c>
 80049ce:	4613      	mov	r3, r2
 80049d0:	e7cc      	b.n	800496c <_malloc_r+0x80>
 80049d2:	230c      	movs	r3, #12
 80049d4:	4638      	mov	r0, r7
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	f000 f80e 	bl	80049f8 <__malloc_unlock>
 80049dc:	e797      	b.n	800490e <_malloc_r+0x22>
 80049de:	6025      	str	r5, [r4, #0]
 80049e0:	e7dc      	b.n	800499c <_malloc_r+0xb0>
 80049e2:	605b      	str	r3, [r3, #4]
 80049e4:	deff      	udf	#255	; 0xff
 80049e6:	bf00      	nop
 80049e8:	20000934 	.word	0x20000934

080049ec <__malloc_lock>:
 80049ec:	4801      	ldr	r0, [pc, #4]	; (80049f4 <__malloc_lock+0x8>)
 80049ee:	f000 b9eb 	b.w	8004dc8 <__retarget_lock_acquire_recursive>
 80049f2:	bf00      	nop
 80049f4:	20000a7c 	.word	0x20000a7c

080049f8 <__malloc_unlock>:
 80049f8:	4801      	ldr	r0, [pc, #4]	; (8004a00 <__malloc_unlock+0x8>)
 80049fa:	f000 b9e6 	b.w	8004dca <__retarget_lock_release_recursive>
 80049fe:	bf00      	nop
 8004a00:	20000a7c 	.word	0x20000a7c

08004a04 <std>:
 8004a04:	2300      	movs	r3, #0
 8004a06:	b510      	push	{r4, lr}
 8004a08:	4604      	mov	r4, r0
 8004a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a12:	6083      	str	r3, [r0, #8]
 8004a14:	8181      	strh	r1, [r0, #12]
 8004a16:	6643      	str	r3, [r0, #100]	; 0x64
 8004a18:	81c2      	strh	r2, [r0, #14]
 8004a1a:	6183      	str	r3, [r0, #24]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	2208      	movs	r2, #8
 8004a20:	305c      	adds	r0, #92	; 0x5c
 8004a22:	f000 f949 	bl	8004cb8 <memset>
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <std+0x38>)
 8004a28:	6224      	str	r4, [r4, #32]
 8004a2a:	6263      	str	r3, [r4, #36]	; 0x24
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <std+0x3c>)
 8004a2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a30:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <std+0x40>)
 8004a32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a34:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <std+0x44>)
 8004a36:	6323      	str	r3, [r4, #48]	; 0x30
 8004a38:	bd10      	pop	{r4, pc}
 8004a3a:	bf00      	nop
 8004a3c:	08004bf1 	.word	0x08004bf1
 8004a40:	08004c13 	.word	0x08004c13
 8004a44:	08004c4b 	.word	0x08004c4b
 8004a48:	08004c6f 	.word	0x08004c6f

08004a4c <stdio_exit_handler>:
 8004a4c:	4a02      	ldr	r2, [pc, #8]	; (8004a58 <stdio_exit_handler+0xc>)
 8004a4e:	4903      	ldr	r1, [pc, #12]	; (8004a5c <stdio_exit_handler+0x10>)
 8004a50:	4803      	ldr	r0, [pc, #12]	; (8004a60 <stdio_exit_handler+0x14>)
 8004a52:	f000 b869 	b.w	8004b28 <_fwalk_sglue>
 8004a56:	bf00      	nop
 8004a58:	20000014 	.word	0x20000014
 8004a5c:	080057d9 	.word	0x080057d9
 8004a60:	20000020 	.word	0x20000020

08004a64 <cleanup_stdio>:
 8004a64:	6841      	ldr	r1, [r0, #4]
 8004a66:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <cleanup_stdio+0x34>)
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	4299      	cmp	r1, r3
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	d001      	beq.n	8004a74 <cleanup_stdio+0x10>
 8004a70:	f000 feb2 	bl	80057d8 <_fflush_r>
 8004a74:	68a1      	ldr	r1, [r4, #8]
 8004a76:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <cleanup_stdio+0x38>)
 8004a78:	4299      	cmp	r1, r3
 8004a7a:	d002      	beq.n	8004a82 <cleanup_stdio+0x1e>
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f000 feab 	bl	80057d8 <_fflush_r>
 8004a82:	68e1      	ldr	r1, [r4, #12]
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <cleanup_stdio+0x3c>)
 8004a86:	4299      	cmp	r1, r3
 8004a88:	d004      	beq.n	8004a94 <cleanup_stdio+0x30>
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a90:	f000 bea2 	b.w	80057d8 <_fflush_r>
 8004a94:	bd10      	pop	{r4, pc}
 8004a96:	bf00      	nop
 8004a98:	2000093c 	.word	0x2000093c
 8004a9c:	200009a4 	.word	0x200009a4
 8004aa0:	20000a0c 	.word	0x20000a0c

08004aa4 <global_stdio_init.part.0>:
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <global_stdio_init.part.0+0x30>)
 8004aa8:	4c0b      	ldr	r4, [pc, #44]	; (8004ad8 <global_stdio_init.part.0+0x34>)
 8004aaa:	4a0c      	ldr	r2, [pc, #48]	; (8004adc <global_stdio_init.part.0+0x38>)
 8004aac:	4620      	mov	r0, r4
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	2104      	movs	r1, #4
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f7ff ffa6 	bl	8004a04 <std>
 8004ab8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004abc:	2201      	movs	r2, #1
 8004abe:	2109      	movs	r1, #9
 8004ac0:	f7ff ffa0 	bl	8004a04 <std>
 8004ac4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ac8:	2202      	movs	r2, #2
 8004aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ace:	2112      	movs	r1, #18
 8004ad0:	f7ff bf98 	b.w	8004a04 <std>
 8004ad4:	20000a74 	.word	0x20000a74
 8004ad8:	2000093c 	.word	0x2000093c
 8004adc:	08004a4d 	.word	0x08004a4d

08004ae0 <__sfp_lock_acquire>:
 8004ae0:	4801      	ldr	r0, [pc, #4]	; (8004ae8 <__sfp_lock_acquire+0x8>)
 8004ae2:	f000 b971 	b.w	8004dc8 <__retarget_lock_acquire_recursive>
 8004ae6:	bf00      	nop
 8004ae8:	20000a7d 	.word	0x20000a7d

08004aec <__sfp_lock_release>:
 8004aec:	4801      	ldr	r0, [pc, #4]	; (8004af4 <__sfp_lock_release+0x8>)
 8004aee:	f000 b96c 	b.w	8004dca <__retarget_lock_release_recursive>
 8004af2:	bf00      	nop
 8004af4:	20000a7d 	.word	0x20000a7d

08004af8 <__sinit>:
 8004af8:	b510      	push	{r4, lr}
 8004afa:	4604      	mov	r4, r0
 8004afc:	f7ff fff0 	bl	8004ae0 <__sfp_lock_acquire>
 8004b00:	6a23      	ldr	r3, [r4, #32]
 8004b02:	b11b      	cbz	r3, 8004b0c <__sinit+0x14>
 8004b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b08:	f7ff bff0 	b.w	8004aec <__sfp_lock_release>
 8004b0c:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <__sinit+0x28>)
 8004b0e:	6223      	str	r3, [r4, #32]
 8004b10:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <__sinit+0x2c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1f5      	bne.n	8004b04 <__sinit+0xc>
 8004b18:	f7ff ffc4 	bl	8004aa4 <global_stdio_init.part.0>
 8004b1c:	e7f2      	b.n	8004b04 <__sinit+0xc>
 8004b1e:	bf00      	nop
 8004b20:	08004a65 	.word	0x08004a65
 8004b24:	20000a74 	.word	0x20000a74

08004b28 <_fwalk_sglue>:
 8004b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	4688      	mov	r8, r1
 8004b30:	4614      	mov	r4, r2
 8004b32:	2600      	movs	r6, #0
 8004b34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b38:	f1b9 0901 	subs.w	r9, r9, #1
 8004b3c:	d505      	bpl.n	8004b4a <_fwalk_sglue+0x22>
 8004b3e:	6824      	ldr	r4, [r4, #0]
 8004b40:	2c00      	cmp	r4, #0
 8004b42:	d1f7      	bne.n	8004b34 <_fwalk_sglue+0xc>
 8004b44:	4630      	mov	r0, r6
 8004b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b4a:	89ab      	ldrh	r3, [r5, #12]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d907      	bls.n	8004b60 <_fwalk_sglue+0x38>
 8004b50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b54:	3301      	adds	r3, #1
 8004b56:	d003      	beq.n	8004b60 <_fwalk_sglue+0x38>
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	47c0      	blx	r8
 8004b5e:	4306      	orrs	r6, r0
 8004b60:	3568      	adds	r5, #104	; 0x68
 8004b62:	e7e9      	b.n	8004b38 <_fwalk_sglue+0x10>

08004b64 <iprintf>:
 8004b64:	b40f      	push	{r0, r1, r2, r3}
 8004b66:	b507      	push	{r0, r1, r2, lr}
 8004b68:	4906      	ldr	r1, [pc, #24]	; (8004b84 <iprintf+0x20>)
 8004b6a:	ab04      	add	r3, sp, #16
 8004b6c:	6808      	ldr	r0, [r1, #0]
 8004b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b72:	6881      	ldr	r1, [r0, #8]
 8004b74:	9301      	str	r3, [sp, #4]
 8004b76:	f000 faff 	bl	8005178 <_vfiprintf_r>
 8004b7a:	b003      	add	sp, #12
 8004b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b80:	b004      	add	sp, #16
 8004b82:	4770      	bx	lr
 8004b84:	2000006c 	.word	0x2000006c

08004b88 <sniprintf>:
 8004b88:	b40c      	push	{r2, r3}
 8004b8a:	b530      	push	{r4, r5, lr}
 8004b8c:	4b17      	ldr	r3, [pc, #92]	; (8004bec <sniprintf+0x64>)
 8004b8e:	1e0c      	subs	r4, r1, #0
 8004b90:	681d      	ldr	r5, [r3, #0]
 8004b92:	b09d      	sub	sp, #116	; 0x74
 8004b94:	da08      	bge.n	8004ba8 <sniprintf+0x20>
 8004b96:	238b      	movs	r3, #139	; 0x8b
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9c:	602b      	str	r3, [r5, #0]
 8004b9e:	b01d      	add	sp, #116	; 0x74
 8004ba0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ba4:	b002      	add	sp, #8
 8004ba6:	4770      	bx	lr
 8004ba8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004bac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004bb0:	bf0c      	ite	eq
 8004bb2:	4623      	moveq	r3, r4
 8004bb4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004bb8:	9304      	str	r3, [sp, #16]
 8004bba:	9307      	str	r3, [sp, #28]
 8004bbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bc0:	9002      	str	r0, [sp, #8]
 8004bc2:	9006      	str	r0, [sp, #24]
 8004bc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004bc8:	4628      	mov	r0, r5
 8004bca:	ab21      	add	r3, sp, #132	; 0x84
 8004bcc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004bce:	a902      	add	r1, sp, #8
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	f000 f9ab 	bl	8004f2c <_svfiprintf_r>
 8004bd6:	1c43      	adds	r3, r0, #1
 8004bd8:	bfbc      	itt	lt
 8004bda:	238b      	movlt	r3, #139	; 0x8b
 8004bdc:	602b      	strlt	r3, [r5, #0]
 8004bde:	2c00      	cmp	r4, #0
 8004be0:	d0dd      	beq.n	8004b9e <sniprintf+0x16>
 8004be2:	2200      	movs	r2, #0
 8004be4:	9b02      	ldr	r3, [sp, #8]
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	e7d9      	b.n	8004b9e <sniprintf+0x16>
 8004bea:	bf00      	nop
 8004bec:	2000006c 	.word	0x2000006c

08004bf0 <__sread>:
 8004bf0:	b510      	push	{r4, lr}
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf8:	f000 f888 	bl	8004d0c <_read_r>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	bfab      	itete	ge
 8004c00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c02:	89a3      	ldrhlt	r3, [r4, #12]
 8004c04:	181b      	addge	r3, r3, r0
 8004c06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c0a:	bfac      	ite	ge
 8004c0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c0e:	81a3      	strhlt	r3, [r4, #12]
 8004c10:	bd10      	pop	{r4, pc}

08004c12 <__swrite>:
 8004c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c16:	461f      	mov	r7, r3
 8004c18:	898b      	ldrh	r3, [r1, #12]
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	05db      	lsls	r3, r3, #23
 8004c1e:	460c      	mov	r4, r1
 8004c20:	4616      	mov	r6, r2
 8004c22:	d505      	bpl.n	8004c30 <__swrite+0x1e>
 8004c24:	2302      	movs	r3, #2
 8004c26:	2200      	movs	r2, #0
 8004c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c2c:	f000 f85c 	bl	8004ce8 <_lseek_r>
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	4632      	mov	r2, r6
 8004c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c38:	81a3      	strh	r3, [r4, #12]
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	463b      	mov	r3, r7
 8004c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c46:	f000 b883 	b.w	8004d50 <_write_r>

08004c4a <__sseek>:
 8004c4a:	b510      	push	{r4, lr}
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c52:	f000 f849 	bl	8004ce8 <_lseek_r>
 8004c56:	1c43      	adds	r3, r0, #1
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	bf15      	itete	ne
 8004c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c66:	81a3      	strheq	r3, [r4, #12]
 8004c68:	bf18      	it	ne
 8004c6a:	81a3      	strhne	r3, [r4, #12]
 8004c6c:	bd10      	pop	{r4, pc}

08004c6e <__sclose>:
 8004c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c72:	f000 b829 	b.w	8004cc8 <_close_r>
	...

08004c78 <_vsiprintf_r>:
 8004c78:	b500      	push	{lr}
 8004c7a:	b09b      	sub	sp, #108	; 0x6c
 8004c7c:	9100      	str	r1, [sp, #0]
 8004c7e:	9104      	str	r1, [sp, #16]
 8004c80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c84:	9105      	str	r1, [sp, #20]
 8004c86:	9102      	str	r1, [sp, #8]
 8004c88:	4905      	ldr	r1, [pc, #20]	; (8004ca0 <_vsiprintf_r+0x28>)
 8004c8a:	9103      	str	r1, [sp, #12]
 8004c8c:	4669      	mov	r1, sp
 8004c8e:	f000 f94d 	bl	8004f2c <_svfiprintf_r>
 8004c92:	2200      	movs	r2, #0
 8004c94:	9b00      	ldr	r3, [sp, #0]
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	b01b      	add	sp, #108	; 0x6c
 8004c9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c9e:	bf00      	nop
 8004ca0:	ffff0208 	.word	0xffff0208

08004ca4 <vsiprintf>:
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	460a      	mov	r2, r1
 8004ca8:	4601      	mov	r1, r0
 8004caa:	4802      	ldr	r0, [pc, #8]	; (8004cb4 <vsiprintf+0x10>)
 8004cac:	6800      	ldr	r0, [r0, #0]
 8004cae:	f7ff bfe3 	b.w	8004c78 <_vsiprintf_r>
 8004cb2:	bf00      	nop
 8004cb4:	2000006c 	.word	0x2000006c

08004cb8 <memset>:
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4402      	add	r2, r0
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d100      	bne.n	8004cc2 <memset+0xa>
 8004cc0:	4770      	bx	lr
 8004cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc6:	e7f9      	b.n	8004cbc <memset+0x4>

08004cc8 <_close_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	2300      	movs	r3, #0
 8004ccc:	4d05      	ldr	r5, [pc, #20]	; (8004ce4 <_close_r+0x1c>)
 8004cce:	4604      	mov	r4, r0
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	602b      	str	r3, [r5, #0]
 8004cd4:	f7fc fdc5 	bl	8001862 <_close>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d102      	bne.n	8004ce2 <_close_r+0x1a>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	b103      	cbz	r3, 8004ce2 <_close_r+0x1a>
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	20000a78 	.word	0x20000a78

08004ce8 <_lseek_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	4604      	mov	r4, r0
 8004cec:	4608      	mov	r0, r1
 8004cee:	4611      	mov	r1, r2
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	4d05      	ldr	r5, [pc, #20]	; (8004d08 <_lseek_r+0x20>)
 8004cf4:	602a      	str	r2, [r5, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f7fc fdd7 	bl	80018aa <_lseek>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_lseek_r+0x1e>
 8004d00:	682b      	ldr	r3, [r5, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_lseek_r+0x1e>
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	20000a78 	.word	0x20000a78

08004d0c <_read_r>:
 8004d0c:	b538      	push	{r3, r4, r5, lr}
 8004d0e:	4604      	mov	r4, r0
 8004d10:	4608      	mov	r0, r1
 8004d12:	4611      	mov	r1, r2
 8004d14:	2200      	movs	r2, #0
 8004d16:	4d05      	ldr	r5, [pc, #20]	; (8004d2c <_read_r+0x20>)
 8004d18:	602a      	str	r2, [r5, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f7fc fd68 	bl	80017f0 <_read>
 8004d20:	1c43      	adds	r3, r0, #1
 8004d22:	d102      	bne.n	8004d2a <_read_r+0x1e>
 8004d24:	682b      	ldr	r3, [r5, #0]
 8004d26:	b103      	cbz	r3, 8004d2a <_read_r+0x1e>
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	bd38      	pop	{r3, r4, r5, pc}
 8004d2c:	20000a78 	.word	0x20000a78

08004d30 <_sbrk_r>:
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	2300      	movs	r3, #0
 8004d34:	4d05      	ldr	r5, [pc, #20]	; (8004d4c <_sbrk_r+0x1c>)
 8004d36:	4604      	mov	r4, r0
 8004d38:	4608      	mov	r0, r1
 8004d3a:	602b      	str	r3, [r5, #0]
 8004d3c:	f7fc fdc2 	bl	80018c4 <_sbrk>
 8004d40:	1c43      	adds	r3, r0, #1
 8004d42:	d102      	bne.n	8004d4a <_sbrk_r+0x1a>
 8004d44:	682b      	ldr	r3, [r5, #0]
 8004d46:	b103      	cbz	r3, 8004d4a <_sbrk_r+0x1a>
 8004d48:	6023      	str	r3, [r4, #0]
 8004d4a:	bd38      	pop	{r3, r4, r5, pc}
 8004d4c:	20000a78 	.word	0x20000a78

08004d50 <_write_r>:
 8004d50:	b538      	push	{r3, r4, r5, lr}
 8004d52:	4604      	mov	r4, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	4611      	mov	r1, r2
 8004d58:	2200      	movs	r2, #0
 8004d5a:	4d05      	ldr	r5, [pc, #20]	; (8004d70 <_write_r+0x20>)
 8004d5c:	602a      	str	r2, [r5, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f7fc fd63 	bl	800182a <_write>
 8004d64:	1c43      	adds	r3, r0, #1
 8004d66:	d102      	bne.n	8004d6e <_write_r+0x1e>
 8004d68:	682b      	ldr	r3, [r5, #0]
 8004d6a:	b103      	cbz	r3, 8004d6e <_write_r+0x1e>
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	bd38      	pop	{r3, r4, r5, pc}
 8004d70:	20000a78 	.word	0x20000a78

08004d74 <__errno>:
 8004d74:	4b01      	ldr	r3, [pc, #4]	; (8004d7c <__errno+0x8>)
 8004d76:	6818      	ldr	r0, [r3, #0]
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	2000006c 	.word	0x2000006c

08004d80 <__libc_init_array>:
 8004d80:	b570      	push	{r4, r5, r6, lr}
 8004d82:	2600      	movs	r6, #0
 8004d84:	4d0c      	ldr	r5, [pc, #48]	; (8004db8 <__libc_init_array+0x38>)
 8004d86:	4c0d      	ldr	r4, [pc, #52]	; (8004dbc <__libc_init_array+0x3c>)
 8004d88:	1b64      	subs	r4, r4, r5
 8004d8a:	10a4      	asrs	r4, r4, #2
 8004d8c:	42a6      	cmp	r6, r4
 8004d8e:	d109      	bne.n	8004da4 <__libc_init_array+0x24>
 8004d90:	f000 fec2 	bl	8005b18 <_init>
 8004d94:	2600      	movs	r6, #0
 8004d96:	4d0a      	ldr	r5, [pc, #40]	; (8004dc0 <__libc_init_array+0x40>)
 8004d98:	4c0a      	ldr	r4, [pc, #40]	; (8004dc4 <__libc_init_array+0x44>)
 8004d9a:	1b64      	subs	r4, r4, r5
 8004d9c:	10a4      	asrs	r4, r4, #2
 8004d9e:	42a6      	cmp	r6, r4
 8004da0:	d105      	bne.n	8004dae <__libc_init_array+0x2e>
 8004da2:	bd70      	pop	{r4, r5, r6, pc}
 8004da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da8:	4798      	blx	r3
 8004daa:	3601      	adds	r6, #1
 8004dac:	e7ee      	b.n	8004d8c <__libc_init_array+0xc>
 8004dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db2:	4798      	blx	r3
 8004db4:	3601      	adds	r6, #1
 8004db6:	e7f2      	b.n	8004d9e <__libc_init_array+0x1e>
 8004db8:	08006d64 	.word	0x08006d64
 8004dbc:	08006d64 	.word	0x08006d64
 8004dc0:	08006d64 	.word	0x08006d64
 8004dc4:	08006d68 	.word	0x08006d68

08004dc8 <__retarget_lock_acquire_recursive>:
 8004dc8:	4770      	bx	lr

08004dca <__retarget_lock_release_recursive>:
 8004dca:	4770      	bx	lr

08004dcc <memcpy>:
 8004dcc:	440a      	add	r2, r1
 8004dce:	4291      	cmp	r1, r2
 8004dd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dd4:	d100      	bne.n	8004dd8 <memcpy+0xc>
 8004dd6:	4770      	bx	lr
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dde:	4291      	cmp	r1, r2
 8004de0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004de4:	d1f9      	bne.n	8004dda <memcpy+0xe>
 8004de6:	bd10      	pop	{r4, pc}

08004de8 <_free_r>:
 8004de8:	b538      	push	{r3, r4, r5, lr}
 8004dea:	4605      	mov	r5, r0
 8004dec:	2900      	cmp	r1, #0
 8004dee:	d040      	beq.n	8004e72 <_free_r+0x8a>
 8004df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004df4:	1f0c      	subs	r4, r1, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	bfb8      	it	lt
 8004dfa:	18e4      	addlt	r4, r4, r3
 8004dfc:	f7ff fdf6 	bl	80049ec <__malloc_lock>
 8004e00:	4a1c      	ldr	r2, [pc, #112]	; (8004e74 <_free_r+0x8c>)
 8004e02:	6813      	ldr	r3, [r2, #0]
 8004e04:	b933      	cbnz	r3, 8004e14 <_free_r+0x2c>
 8004e06:	6063      	str	r3, [r4, #4]
 8004e08:	6014      	str	r4, [r2, #0]
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e10:	f7ff bdf2 	b.w	80049f8 <__malloc_unlock>
 8004e14:	42a3      	cmp	r3, r4
 8004e16:	d908      	bls.n	8004e2a <_free_r+0x42>
 8004e18:	6820      	ldr	r0, [r4, #0]
 8004e1a:	1821      	adds	r1, r4, r0
 8004e1c:	428b      	cmp	r3, r1
 8004e1e:	bf01      	itttt	eq
 8004e20:	6819      	ldreq	r1, [r3, #0]
 8004e22:	685b      	ldreq	r3, [r3, #4]
 8004e24:	1809      	addeq	r1, r1, r0
 8004e26:	6021      	streq	r1, [r4, #0]
 8004e28:	e7ed      	b.n	8004e06 <_free_r+0x1e>
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	b10b      	cbz	r3, 8004e34 <_free_r+0x4c>
 8004e30:	42a3      	cmp	r3, r4
 8004e32:	d9fa      	bls.n	8004e2a <_free_r+0x42>
 8004e34:	6811      	ldr	r1, [r2, #0]
 8004e36:	1850      	adds	r0, r2, r1
 8004e38:	42a0      	cmp	r0, r4
 8004e3a:	d10b      	bne.n	8004e54 <_free_r+0x6c>
 8004e3c:	6820      	ldr	r0, [r4, #0]
 8004e3e:	4401      	add	r1, r0
 8004e40:	1850      	adds	r0, r2, r1
 8004e42:	4283      	cmp	r3, r0
 8004e44:	6011      	str	r1, [r2, #0]
 8004e46:	d1e0      	bne.n	8004e0a <_free_r+0x22>
 8004e48:	6818      	ldr	r0, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	4408      	add	r0, r1
 8004e4e:	6010      	str	r0, [r2, #0]
 8004e50:	6053      	str	r3, [r2, #4]
 8004e52:	e7da      	b.n	8004e0a <_free_r+0x22>
 8004e54:	d902      	bls.n	8004e5c <_free_r+0x74>
 8004e56:	230c      	movs	r3, #12
 8004e58:	602b      	str	r3, [r5, #0]
 8004e5a:	e7d6      	b.n	8004e0a <_free_r+0x22>
 8004e5c:	6820      	ldr	r0, [r4, #0]
 8004e5e:	1821      	adds	r1, r4, r0
 8004e60:	428b      	cmp	r3, r1
 8004e62:	bf01      	itttt	eq
 8004e64:	6819      	ldreq	r1, [r3, #0]
 8004e66:	685b      	ldreq	r3, [r3, #4]
 8004e68:	1809      	addeq	r1, r1, r0
 8004e6a:	6021      	streq	r1, [r4, #0]
 8004e6c:	6063      	str	r3, [r4, #4]
 8004e6e:	6054      	str	r4, [r2, #4]
 8004e70:	e7cb      	b.n	8004e0a <_free_r+0x22>
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	20000934 	.word	0x20000934

08004e78 <__ssputs_r>:
 8004e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e7c:	461f      	mov	r7, r3
 8004e7e:	688e      	ldr	r6, [r1, #8]
 8004e80:	4682      	mov	sl, r0
 8004e82:	42be      	cmp	r6, r7
 8004e84:	460c      	mov	r4, r1
 8004e86:	4690      	mov	r8, r2
 8004e88:	680b      	ldr	r3, [r1, #0]
 8004e8a:	d82c      	bhi.n	8004ee6 <__ssputs_r+0x6e>
 8004e8c:	898a      	ldrh	r2, [r1, #12]
 8004e8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e92:	d026      	beq.n	8004ee2 <__ssputs_r+0x6a>
 8004e94:	6965      	ldr	r5, [r4, #20]
 8004e96:	6909      	ldr	r1, [r1, #16]
 8004e98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e9c:	eba3 0901 	sub.w	r9, r3, r1
 8004ea0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ea4:	1c7b      	adds	r3, r7, #1
 8004ea6:	444b      	add	r3, r9
 8004ea8:	106d      	asrs	r5, r5, #1
 8004eaa:	429d      	cmp	r5, r3
 8004eac:	bf38      	it	cc
 8004eae:	461d      	movcc	r5, r3
 8004eb0:	0553      	lsls	r3, r2, #21
 8004eb2:	d527      	bpl.n	8004f04 <__ssputs_r+0x8c>
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	f7ff fd19 	bl	80048ec <_malloc_r>
 8004eba:	4606      	mov	r6, r0
 8004ebc:	b360      	cbz	r0, 8004f18 <__ssputs_r+0xa0>
 8004ebe:	464a      	mov	r2, r9
 8004ec0:	6921      	ldr	r1, [r4, #16]
 8004ec2:	f7ff ff83 	bl	8004dcc <memcpy>
 8004ec6:	89a3      	ldrh	r3, [r4, #12]
 8004ec8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed0:	81a3      	strh	r3, [r4, #12]
 8004ed2:	6126      	str	r6, [r4, #16]
 8004ed4:	444e      	add	r6, r9
 8004ed6:	6026      	str	r6, [r4, #0]
 8004ed8:	463e      	mov	r6, r7
 8004eda:	6165      	str	r5, [r4, #20]
 8004edc:	eba5 0509 	sub.w	r5, r5, r9
 8004ee0:	60a5      	str	r5, [r4, #8]
 8004ee2:	42be      	cmp	r6, r7
 8004ee4:	d900      	bls.n	8004ee8 <__ssputs_r+0x70>
 8004ee6:	463e      	mov	r6, r7
 8004ee8:	4632      	mov	r2, r6
 8004eea:	4641      	mov	r1, r8
 8004eec:	6820      	ldr	r0, [r4, #0]
 8004eee:	f000 fd31 	bl	8005954 <memmove>
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	68a3      	ldr	r3, [r4, #8]
 8004ef6:	1b9b      	subs	r3, r3, r6
 8004ef8:	60a3      	str	r3, [r4, #8]
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	4433      	add	r3, r6
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f04:	462a      	mov	r2, r5
 8004f06:	f000 fd4d 	bl	80059a4 <_realloc_r>
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d1e0      	bne.n	8004ed2 <__ssputs_r+0x5a>
 8004f10:	4650      	mov	r0, sl
 8004f12:	6921      	ldr	r1, [r4, #16]
 8004f14:	f7ff ff68 	bl	8004de8 <_free_r>
 8004f18:	230c      	movs	r3, #12
 8004f1a:	f8ca 3000 	str.w	r3, [sl]
 8004f1e:	89a3      	ldrh	r3, [r4, #12]
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295
 8004f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f28:	81a3      	strh	r3, [r4, #12]
 8004f2a:	e7e9      	b.n	8004f00 <__ssputs_r+0x88>

08004f2c <_svfiprintf_r>:
 8004f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f30:	4698      	mov	r8, r3
 8004f32:	898b      	ldrh	r3, [r1, #12]
 8004f34:	4607      	mov	r7, r0
 8004f36:	061b      	lsls	r3, r3, #24
 8004f38:	460d      	mov	r5, r1
 8004f3a:	4614      	mov	r4, r2
 8004f3c:	b09d      	sub	sp, #116	; 0x74
 8004f3e:	d50e      	bpl.n	8004f5e <_svfiprintf_r+0x32>
 8004f40:	690b      	ldr	r3, [r1, #16]
 8004f42:	b963      	cbnz	r3, 8004f5e <_svfiprintf_r+0x32>
 8004f44:	2140      	movs	r1, #64	; 0x40
 8004f46:	f7ff fcd1 	bl	80048ec <_malloc_r>
 8004f4a:	6028      	str	r0, [r5, #0]
 8004f4c:	6128      	str	r0, [r5, #16]
 8004f4e:	b920      	cbnz	r0, 8004f5a <_svfiprintf_r+0x2e>
 8004f50:	230c      	movs	r3, #12
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	f04f 30ff 	mov.w	r0, #4294967295
 8004f58:	e0d0      	b.n	80050fc <_svfiprintf_r+0x1d0>
 8004f5a:	2340      	movs	r3, #64	; 0x40
 8004f5c:	616b      	str	r3, [r5, #20]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	9309      	str	r3, [sp, #36]	; 0x24
 8004f62:	2320      	movs	r3, #32
 8004f64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f68:	2330      	movs	r3, #48	; 0x30
 8004f6a:	f04f 0901 	mov.w	r9, #1
 8004f6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f72:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005114 <_svfiprintf_r+0x1e8>
 8004f76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f7a:	4623      	mov	r3, r4
 8004f7c:	469a      	mov	sl, r3
 8004f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f82:	b10a      	cbz	r2, 8004f88 <_svfiprintf_r+0x5c>
 8004f84:	2a25      	cmp	r2, #37	; 0x25
 8004f86:	d1f9      	bne.n	8004f7c <_svfiprintf_r+0x50>
 8004f88:	ebba 0b04 	subs.w	fp, sl, r4
 8004f8c:	d00b      	beq.n	8004fa6 <_svfiprintf_r+0x7a>
 8004f8e:	465b      	mov	r3, fp
 8004f90:	4622      	mov	r2, r4
 8004f92:	4629      	mov	r1, r5
 8004f94:	4638      	mov	r0, r7
 8004f96:	f7ff ff6f 	bl	8004e78 <__ssputs_r>
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	f000 80a9 	beq.w	80050f2 <_svfiprintf_r+0x1c6>
 8004fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fa2:	445a      	add	r2, fp
 8004fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8004fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 80a1 	beq.w	80050f2 <_svfiprintf_r+0x1c6>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fba:	f10a 0a01 	add.w	sl, sl, #1
 8004fbe:	9304      	str	r3, [sp, #16]
 8004fc0:	9307      	str	r3, [sp, #28]
 8004fc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fc6:	931a      	str	r3, [sp, #104]	; 0x68
 8004fc8:	4654      	mov	r4, sl
 8004fca:	2205      	movs	r2, #5
 8004fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fd0:	4850      	ldr	r0, [pc, #320]	; (8005114 <_svfiprintf_r+0x1e8>)
 8004fd2:	f000 fcd9 	bl	8005988 <memchr>
 8004fd6:	9a04      	ldr	r2, [sp, #16]
 8004fd8:	b9d8      	cbnz	r0, 8005012 <_svfiprintf_r+0xe6>
 8004fda:	06d0      	lsls	r0, r2, #27
 8004fdc:	bf44      	itt	mi
 8004fde:	2320      	movmi	r3, #32
 8004fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fe4:	0711      	lsls	r1, r2, #28
 8004fe6:	bf44      	itt	mi
 8004fe8:	232b      	movmi	r3, #43	; 0x2b
 8004fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fee:	f89a 3000 	ldrb.w	r3, [sl]
 8004ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ff4:	d015      	beq.n	8005022 <_svfiprintf_r+0xf6>
 8004ff6:	4654      	mov	r4, sl
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	f04f 0c0a 	mov.w	ip, #10
 8004ffe:	9a07      	ldr	r2, [sp, #28]
 8005000:	4621      	mov	r1, r4
 8005002:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005006:	3b30      	subs	r3, #48	; 0x30
 8005008:	2b09      	cmp	r3, #9
 800500a:	d94d      	bls.n	80050a8 <_svfiprintf_r+0x17c>
 800500c:	b1b0      	cbz	r0, 800503c <_svfiprintf_r+0x110>
 800500e:	9207      	str	r2, [sp, #28]
 8005010:	e014      	b.n	800503c <_svfiprintf_r+0x110>
 8005012:	eba0 0308 	sub.w	r3, r0, r8
 8005016:	fa09 f303 	lsl.w	r3, r9, r3
 800501a:	4313      	orrs	r3, r2
 800501c:	46a2      	mov	sl, r4
 800501e:	9304      	str	r3, [sp, #16]
 8005020:	e7d2      	b.n	8004fc8 <_svfiprintf_r+0x9c>
 8005022:	9b03      	ldr	r3, [sp, #12]
 8005024:	1d19      	adds	r1, r3, #4
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	9103      	str	r1, [sp, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	bfbb      	ittet	lt
 800502e:	425b      	neglt	r3, r3
 8005030:	f042 0202 	orrlt.w	r2, r2, #2
 8005034:	9307      	strge	r3, [sp, #28]
 8005036:	9307      	strlt	r3, [sp, #28]
 8005038:	bfb8      	it	lt
 800503a:	9204      	strlt	r2, [sp, #16]
 800503c:	7823      	ldrb	r3, [r4, #0]
 800503e:	2b2e      	cmp	r3, #46	; 0x2e
 8005040:	d10c      	bne.n	800505c <_svfiprintf_r+0x130>
 8005042:	7863      	ldrb	r3, [r4, #1]
 8005044:	2b2a      	cmp	r3, #42	; 0x2a
 8005046:	d134      	bne.n	80050b2 <_svfiprintf_r+0x186>
 8005048:	9b03      	ldr	r3, [sp, #12]
 800504a:	3402      	adds	r4, #2
 800504c:	1d1a      	adds	r2, r3, #4
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	9203      	str	r2, [sp, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	bfb8      	it	lt
 8005056:	f04f 33ff 	movlt.w	r3, #4294967295
 800505a:	9305      	str	r3, [sp, #20]
 800505c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005118 <_svfiprintf_r+0x1ec>
 8005060:	2203      	movs	r2, #3
 8005062:	4650      	mov	r0, sl
 8005064:	7821      	ldrb	r1, [r4, #0]
 8005066:	f000 fc8f 	bl	8005988 <memchr>
 800506a:	b138      	cbz	r0, 800507c <_svfiprintf_r+0x150>
 800506c:	2240      	movs	r2, #64	; 0x40
 800506e:	9b04      	ldr	r3, [sp, #16]
 8005070:	eba0 000a 	sub.w	r0, r0, sl
 8005074:	4082      	lsls	r2, r0
 8005076:	4313      	orrs	r3, r2
 8005078:	3401      	adds	r4, #1
 800507a:	9304      	str	r3, [sp, #16]
 800507c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005080:	2206      	movs	r2, #6
 8005082:	4826      	ldr	r0, [pc, #152]	; (800511c <_svfiprintf_r+0x1f0>)
 8005084:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005088:	f000 fc7e 	bl	8005988 <memchr>
 800508c:	2800      	cmp	r0, #0
 800508e:	d038      	beq.n	8005102 <_svfiprintf_r+0x1d6>
 8005090:	4b23      	ldr	r3, [pc, #140]	; (8005120 <_svfiprintf_r+0x1f4>)
 8005092:	bb1b      	cbnz	r3, 80050dc <_svfiprintf_r+0x1b0>
 8005094:	9b03      	ldr	r3, [sp, #12]
 8005096:	3307      	adds	r3, #7
 8005098:	f023 0307 	bic.w	r3, r3, #7
 800509c:	3308      	adds	r3, #8
 800509e:	9303      	str	r3, [sp, #12]
 80050a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a2:	4433      	add	r3, r6
 80050a4:	9309      	str	r3, [sp, #36]	; 0x24
 80050a6:	e768      	b.n	8004f7a <_svfiprintf_r+0x4e>
 80050a8:	460c      	mov	r4, r1
 80050aa:	2001      	movs	r0, #1
 80050ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80050b0:	e7a6      	b.n	8005000 <_svfiprintf_r+0xd4>
 80050b2:	2300      	movs	r3, #0
 80050b4:	f04f 0c0a 	mov.w	ip, #10
 80050b8:	4619      	mov	r1, r3
 80050ba:	3401      	adds	r4, #1
 80050bc:	9305      	str	r3, [sp, #20]
 80050be:	4620      	mov	r0, r4
 80050c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050c4:	3a30      	subs	r2, #48	; 0x30
 80050c6:	2a09      	cmp	r2, #9
 80050c8:	d903      	bls.n	80050d2 <_svfiprintf_r+0x1a6>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0c6      	beq.n	800505c <_svfiprintf_r+0x130>
 80050ce:	9105      	str	r1, [sp, #20]
 80050d0:	e7c4      	b.n	800505c <_svfiprintf_r+0x130>
 80050d2:	4604      	mov	r4, r0
 80050d4:	2301      	movs	r3, #1
 80050d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80050da:	e7f0      	b.n	80050be <_svfiprintf_r+0x192>
 80050dc:	ab03      	add	r3, sp, #12
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	462a      	mov	r2, r5
 80050e2:	4638      	mov	r0, r7
 80050e4:	4b0f      	ldr	r3, [pc, #60]	; (8005124 <_svfiprintf_r+0x1f8>)
 80050e6:	a904      	add	r1, sp, #16
 80050e8:	f3af 8000 	nop.w
 80050ec:	1c42      	adds	r2, r0, #1
 80050ee:	4606      	mov	r6, r0
 80050f0:	d1d6      	bne.n	80050a0 <_svfiprintf_r+0x174>
 80050f2:	89ab      	ldrh	r3, [r5, #12]
 80050f4:	065b      	lsls	r3, r3, #25
 80050f6:	f53f af2d 	bmi.w	8004f54 <_svfiprintf_r+0x28>
 80050fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050fc:	b01d      	add	sp, #116	; 0x74
 80050fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005102:	ab03      	add	r3, sp, #12
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	462a      	mov	r2, r5
 8005108:	4638      	mov	r0, r7
 800510a:	4b06      	ldr	r3, [pc, #24]	; (8005124 <_svfiprintf_r+0x1f8>)
 800510c:	a904      	add	r1, sp, #16
 800510e:	f000 f9bf 	bl	8005490 <_printf_i>
 8005112:	e7eb      	b.n	80050ec <_svfiprintf_r+0x1c0>
 8005114:	08006d2e 	.word	0x08006d2e
 8005118:	08006d34 	.word	0x08006d34
 800511c:	08006d38 	.word	0x08006d38
 8005120:	00000000 	.word	0x00000000
 8005124:	08004e79 	.word	0x08004e79

08005128 <__sfputc_r>:
 8005128:	6893      	ldr	r3, [r2, #8]
 800512a:	b410      	push	{r4}
 800512c:	3b01      	subs	r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	6093      	str	r3, [r2, #8]
 8005132:	da07      	bge.n	8005144 <__sfputc_r+0x1c>
 8005134:	6994      	ldr	r4, [r2, #24]
 8005136:	42a3      	cmp	r3, r4
 8005138:	db01      	blt.n	800513e <__sfputc_r+0x16>
 800513a:	290a      	cmp	r1, #10
 800513c:	d102      	bne.n	8005144 <__sfputc_r+0x1c>
 800513e:	bc10      	pop	{r4}
 8005140:	f000 bb72 	b.w	8005828 <__swbuf_r>
 8005144:	6813      	ldr	r3, [r2, #0]
 8005146:	1c58      	adds	r0, r3, #1
 8005148:	6010      	str	r0, [r2, #0]
 800514a:	7019      	strb	r1, [r3, #0]
 800514c:	4608      	mov	r0, r1
 800514e:	bc10      	pop	{r4}
 8005150:	4770      	bx	lr

08005152 <__sfputs_r>:
 8005152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005154:	4606      	mov	r6, r0
 8005156:	460f      	mov	r7, r1
 8005158:	4614      	mov	r4, r2
 800515a:	18d5      	adds	r5, r2, r3
 800515c:	42ac      	cmp	r4, r5
 800515e:	d101      	bne.n	8005164 <__sfputs_r+0x12>
 8005160:	2000      	movs	r0, #0
 8005162:	e007      	b.n	8005174 <__sfputs_r+0x22>
 8005164:	463a      	mov	r2, r7
 8005166:	4630      	mov	r0, r6
 8005168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800516c:	f7ff ffdc 	bl	8005128 <__sfputc_r>
 8005170:	1c43      	adds	r3, r0, #1
 8005172:	d1f3      	bne.n	800515c <__sfputs_r+0xa>
 8005174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005178 <_vfiprintf_r>:
 8005178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517c:	460d      	mov	r5, r1
 800517e:	4614      	mov	r4, r2
 8005180:	4698      	mov	r8, r3
 8005182:	4606      	mov	r6, r0
 8005184:	b09d      	sub	sp, #116	; 0x74
 8005186:	b118      	cbz	r0, 8005190 <_vfiprintf_r+0x18>
 8005188:	6a03      	ldr	r3, [r0, #32]
 800518a:	b90b      	cbnz	r3, 8005190 <_vfiprintf_r+0x18>
 800518c:	f7ff fcb4 	bl	8004af8 <__sinit>
 8005190:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005192:	07d9      	lsls	r1, r3, #31
 8005194:	d405      	bmi.n	80051a2 <_vfiprintf_r+0x2a>
 8005196:	89ab      	ldrh	r3, [r5, #12]
 8005198:	059a      	lsls	r2, r3, #22
 800519a:	d402      	bmi.n	80051a2 <_vfiprintf_r+0x2a>
 800519c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800519e:	f7ff fe13 	bl	8004dc8 <__retarget_lock_acquire_recursive>
 80051a2:	89ab      	ldrh	r3, [r5, #12]
 80051a4:	071b      	lsls	r3, r3, #28
 80051a6:	d501      	bpl.n	80051ac <_vfiprintf_r+0x34>
 80051a8:	692b      	ldr	r3, [r5, #16]
 80051aa:	b99b      	cbnz	r3, 80051d4 <_vfiprintf_r+0x5c>
 80051ac:	4629      	mov	r1, r5
 80051ae:	4630      	mov	r0, r6
 80051b0:	f000 fb78 	bl	80058a4 <__swsetup_r>
 80051b4:	b170      	cbz	r0, 80051d4 <_vfiprintf_r+0x5c>
 80051b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051b8:	07dc      	lsls	r4, r3, #31
 80051ba:	d504      	bpl.n	80051c6 <_vfiprintf_r+0x4e>
 80051bc:	f04f 30ff 	mov.w	r0, #4294967295
 80051c0:	b01d      	add	sp, #116	; 0x74
 80051c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c6:	89ab      	ldrh	r3, [r5, #12]
 80051c8:	0598      	lsls	r0, r3, #22
 80051ca:	d4f7      	bmi.n	80051bc <_vfiprintf_r+0x44>
 80051cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051ce:	f7ff fdfc 	bl	8004dca <__retarget_lock_release_recursive>
 80051d2:	e7f3      	b.n	80051bc <_vfiprintf_r+0x44>
 80051d4:	2300      	movs	r3, #0
 80051d6:	9309      	str	r3, [sp, #36]	; 0x24
 80051d8:	2320      	movs	r3, #32
 80051da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051de:	2330      	movs	r3, #48	; 0x30
 80051e0:	f04f 0901 	mov.w	r9, #1
 80051e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80051e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005398 <_vfiprintf_r+0x220>
 80051ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051f0:	4623      	mov	r3, r4
 80051f2:	469a      	mov	sl, r3
 80051f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051f8:	b10a      	cbz	r2, 80051fe <_vfiprintf_r+0x86>
 80051fa:	2a25      	cmp	r2, #37	; 0x25
 80051fc:	d1f9      	bne.n	80051f2 <_vfiprintf_r+0x7a>
 80051fe:	ebba 0b04 	subs.w	fp, sl, r4
 8005202:	d00b      	beq.n	800521c <_vfiprintf_r+0xa4>
 8005204:	465b      	mov	r3, fp
 8005206:	4622      	mov	r2, r4
 8005208:	4629      	mov	r1, r5
 800520a:	4630      	mov	r0, r6
 800520c:	f7ff ffa1 	bl	8005152 <__sfputs_r>
 8005210:	3001      	adds	r0, #1
 8005212:	f000 80a9 	beq.w	8005368 <_vfiprintf_r+0x1f0>
 8005216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005218:	445a      	add	r2, fp
 800521a:	9209      	str	r2, [sp, #36]	; 0x24
 800521c:	f89a 3000 	ldrb.w	r3, [sl]
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80a1 	beq.w	8005368 <_vfiprintf_r+0x1f0>
 8005226:	2300      	movs	r3, #0
 8005228:	f04f 32ff 	mov.w	r2, #4294967295
 800522c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005230:	f10a 0a01 	add.w	sl, sl, #1
 8005234:	9304      	str	r3, [sp, #16]
 8005236:	9307      	str	r3, [sp, #28]
 8005238:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800523c:	931a      	str	r3, [sp, #104]	; 0x68
 800523e:	4654      	mov	r4, sl
 8005240:	2205      	movs	r2, #5
 8005242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005246:	4854      	ldr	r0, [pc, #336]	; (8005398 <_vfiprintf_r+0x220>)
 8005248:	f000 fb9e 	bl	8005988 <memchr>
 800524c:	9a04      	ldr	r2, [sp, #16]
 800524e:	b9d8      	cbnz	r0, 8005288 <_vfiprintf_r+0x110>
 8005250:	06d1      	lsls	r1, r2, #27
 8005252:	bf44      	itt	mi
 8005254:	2320      	movmi	r3, #32
 8005256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800525a:	0713      	lsls	r3, r2, #28
 800525c:	bf44      	itt	mi
 800525e:	232b      	movmi	r3, #43	; 0x2b
 8005260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005264:	f89a 3000 	ldrb.w	r3, [sl]
 8005268:	2b2a      	cmp	r3, #42	; 0x2a
 800526a:	d015      	beq.n	8005298 <_vfiprintf_r+0x120>
 800526c:	4654      	mov	r4, sl
 800526e:	2000      	movs	r0, #0
 8005270:	f04f 0c0a 	mov.w	ip, #10
 8005274:	9a07      	ldr	r2, [sp, #28]
 8005276:	4621      	mov	r1, r4
 8005278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800527c:	3b30      	subs	r3, #48	; 0x30
 800527e:	2b09      	cmp	r3, #9
 8005280:	d94d      	bls.n	800531e <_vfiprintf_r+0x1a6>
 8005282:	b1b0      	cbz	r0, 80052b2 <_vfiprintf_r+0x13a>
 8005284:	9207      	str	r2, [sp, #28]
 8005286:	e014      	b.n	80052b2 <_vfiprintf_r+0x13a>
 8005288:	eba0 0308 	sub.w	r3, r0, r8
 800528c:	fa09 f303 	lsl.w	r3, r9, r3
 8005290:	4313      	orrs	r3, r2
 8005292:	46a2      	mov	sl, r4
 8005294:	9304      	str	r3, [sp, #16]
 8005296:	e7d2      	b.n	800523e <_vfiprintf_r+0xc6>
 8005298:	9b03      	ldr	r3, [sp, #12]
 800529a:	1d19      	adds	r1, r3, #4
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	9103      	str	r1, [sp, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	bfbb      	ittet	lt
 80052a4:	425b      	neglt	r3, r3
 80052a6:	f042 0202 	orrlt.w	r2, r2, #2
 80052aa:	9307      	strge	r3, [sp, #28]
 80052ac:	9307      	strlt	r3, [sp, #28]
 80052ae:	bfb8      	it	lt
 80052b0:	9204      	strlt	r2, [sp, #16]
 80052b2:	7823      	ldrb	r3, [r4, #0]
 80052b4:	2b2e      	cmp	r3, #46	; 0x2e
 80052b6:	d10c      	bne.n	80052d2 <_vfiprintf_r+0x15a>
 80052b8:	7863      	ldrb	r3, [r4, #1]
 80052ba:	2b2a      	cmp	r3, #42	; 0x2a
 80052bc:	d134      	bne.n	8005328 <_vfiprintf_r+0x1b0>
 80052be:	9b03      	ldr	r3, [sp, #12]
 80052c0:	3402      	adds	r4, #2
 80052c2:	1d1a      	adds	r2, r3, #4
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	9203      	str	r2, [sp, #12]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bfb8      	it	lt
 80052cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80052d0:	9305      	str	r3, [sp, #20]
 80052d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800539c <_vfiprintf_r+0x224>
 80052d6:	2203      	movs	r2, #3
 80052d8:	4650      	mov	r0, sl
 80052da:	7821      	ldrb	r1, [r4, #0]
 80052dc:	f000 fb54 	bl	8005988 <memchr>
 80052e0:	b138      	cbz	r0, 80052f2 <_vfiprintf_r+0x17a>
 80052e2:	2240      	movs	r2, #64	; 0x40
 80052e4:	9b04      	ldr	r3, [sp, #16]
 80052e6:	eba0 000a 	sub.w	r0, r0, sl
 80052ea:	4082      	lsls	r2, r0
 80052ec:	4313      	orrs	r3, r2
 80052ee:	3401      	adds	r4, #1
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f6:	2206      	movs	r2, #6
 80052f8:	4829      	ldr	r0, [pc, #164]	; (80053a0 <_vfiprintf_r+0x228>)
 80052fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052fe:	f000 fb43 	bl	8005988 <memchr>
 8005302:	2800      	cmp	r0, #0
 8005304:	d03f      	beq.n	8005386 <_vfiprintf_r+0x20e>
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <_vfiprintf_r+0x22c>)
 8005308:	bb1b      	cbnz	r3, 8005352 <_vfiprintf_r+0x1da>
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	3307      	adds	r3, #7
 800530e:	f023 0307 	bic.w	r3, r3, #7
 8005312:	3308      	adds	r3, #8
 8005314:	9303      	str	r3, [sp, #12]
 8005316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005318:	443b      	add	r3, r7
 800531a:	9309      	str	r3, [sp, #36]	; 0x24
 800531c:	e768      	b.n	80051f0 <_vfiprintf_r+0x78>
 800531e:	460c      	mov	r4, r1
 8005320:	2001      	movs	r0, #1
 8005322:	fb0c 3202 	mla	r2, ip, r2, r3
 8005326:	e7a6      	b.n	8005276 <_vfiprintf_r+0xfe>
 8005328:	2300      	movs	r3, #0
 800532a:	f04f 0c0a 	mov.w	ip, #10
 800532e:	4619      	mov	r1, r3
 8005330:	3401      	adds	r4, #1
 8005332:	9305      	str	r3, [sp, #20]
 8005334:	4620      	mov	r0, r4
 8005336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800533a:	3a30      	subs	r2, #48	; 0x30
 800533c:	2a09      	cmp	r2, #9
 800533e:	d903      	bls.n	8005348 <_vfiprintf_r+0x1d0>
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0c6      	beq.n	80052d2 <_vfiprintf_r+0x15a>
 8005344:	9105      	str	r1, [sp, #20]
 8005346:	e7c4      	b.n	80052d2 <_vfiprintf_r+0x15a>
 8005348:	4604      	mov	r4, r0
 800534a:	2301      	movs	r3, #1
 800534c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005350:	e7f0      	b.n	8005334 <_vfiprintf_r+0x1bc>
 8005352:	ab03      	add	r3, sp, #12
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	462a      	mov	r2, r5
 8005358:	4630      	mov	r0, r6
 800535a:	4b13      	ldr	r3, [pc, #76]	; (80053a8 <_vfiprintf_r+0x230>)
 800535c:	a904      	add	r1, sp, #16
 800535e:	f3af 8000 	nop.w
 8005362:	4607      	mov	r7, r0
 8005364:	1c78      	adds	r0, r7, #1
 8005366:	d1d6      	bne.n	8005316 <_vfiprintf_r+0x19e>
 8005368:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800536a:	07d9      	lsls	r1, r3, #31
 800536c:	d405      	bmi.n	800537a <_vfiprintf_r+0x202>
 800536e:	89ab      	ldrh	r3, [r5, #12]
 8005370:	059a      	lsls	r2, r3, #22
 8005372:	d402      	bmi.n	800537a <_vfiprintf_r+0x202>
 8005374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005376:	f7ff fd28 	bl	8004dca <__retarget_lock_release_recursive>
 800537a:	89ab      	ldrh	r3, [r5, #12]
 800537c:	065b      	lsls	r3, r3, #25
 800537e:	f53f af1d 	bmi.w	80051bc <_vfiprintf_r+0x44>
 8005382:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005384:	e71c      	b.n	80051c0 <_vfiprintf_r+0x48>
 8005386:	ab03      	add	r3, sp, #12
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	462a      	mov	r2, r5
 800538c:	4630      	mov	r0, r6
 800538e:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <_vfiprintf_r+0x230>)
 8005390:	a904      	add	r1, sp, #16
 8005392:	f000 f87d 	bl	8005490 <_printf_i>
 8005396:	e7e4      	b.n	8005362 <_vfiprintf_r+0x1ea>
 8005398:	08006d2e 	.word	0x08006d2e
 800539c:	08006d34 	.word	0x08006d34
 80053a0:	08006d38 	.word	0x08006d38
 80053a4:	00000000 	.word	0x00000000
 80053a8:	08005153 	.word	0x08005153

080053ac <_printf_common>:
 80053ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b0:	4616      	mov	r6, r2
 80053b2:	4699      	mov	r9, r3
 80053b4:	688a      	ldr	r2, [r1, #8]
 80053b6:	690b      	ldr	r3, [r1, #16]
 80053b8:	4607      	mov	r7, r0
 80053ba:	4293      	cmp	r3, r2
 80053bc:	bfb8      	it	lt
 80053be:	4613      	movlt	r3, r2
 80053c0:	6033      	str	r3, [r6, #0]
 80053c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053c6:	460c      	mov	r4, r1
 80053c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053cc:	b10a      	cbz	r2, 80053d2 <_printf_common+0x26>
 80053ce:	3301      	adds	r3, #1
 80053d0:	6033      	str	r3, [r6, #0]
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	0699      	lsls	r1, r3, #26
 80053d6:	bf42      	ittt	mi
 80053d8:	6833      	ldrmi	r3, [r6, #0]
 80053da:	3302      	addmi	r3, #2
 80053dc:	6033      	strmi	r3, [r6, #0]
 80053de:	6825      	ldr	r5, [r4, #0]
 80053e0:	f015 0506 	ands.w	r5, r5, #6
 80053e4:	d106      	bne.n	80053f4 <_printf_common+0x48>
 80053e6:	f104 0a19 	add.w	sl, r4, #25
 80053ea:	68e3      	ldr	r3, [r4, #12]
 80053ec:	6832      	ldr	r2, [r6, #0]
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	42ab      	cmp	r3, r5
 80053f2:	dc2b      	bgt.n	800544c <_printf_common+0xa0>
 80053f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053f8:	1e13      	subs	r3, r2, #0
 80053fa:	6822      	ldr	r2, [r4, #0]
 80053fc:	bf18      	it	ne
 80053fe:	2301      	movne	r3, #1
 8005400:	0692      	lsls	r2, r2, #26
 8005402:	d430      	bmi.n	8005466 <_printf_common+0xba>
 8005404:	4649      	mov	r1, r9
 8005406:	4638      	mov	r0, r7
 8005408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800540c:	47c0      	blx	r8
 800540e:	3001      	adds	r0, #1
 8005410:	d023      	beq.n	800545a <_printf_common+0xae>
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	6922      	ldr	r2, [r4, #16]
 8005416:	f003 0306 	and.w	r3, r3, #6
 800541a:	2b04      	cmp	r3, #4
 800541c:	bf14      	ite	ne
 800541e:	2500      	movne	r5, #0
 8005420:	6833      	ldreq	r3, [r6, #0]
 8005422:	f04f 0600 	mov.w	r6, #0
 8005426:	bf08      	it	eq
 8005428:	68e5      	ldreq	r5, [r4, #12]
 800542a:	f104 041a 	add.w	r4, r4, #26
 800542e:	bf08      	it	eq
 8005430:	1aed      	subeq	r5, r5, r3
 8005432:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005436:	bf08      	it	eq
 8005438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800543c:	4293      	cmp	r3, r2
 800543e:	bfc4      	itt	gt
 8005440:	1a9b      	subgt	r3, r3, r2
 8005442:	18ed      	addgt	r5, r5, r3
 8005444:	42b5      	cmp	r5, r6
 8005446:	d11a      	bne.n	800547e <_printf_common+0xd2>
 8005448:	2000      	movs	r0, #0
 800544a:	e008      	b.n	800545e <_printf_common+0xb2>
 800544c:	2301      	movs	r3, #1
 800544e:	4652      	mov	r2, sl
 8005450:	4649      	mov	r1, r9
 8005452:	4638      	mov	r0, r7
 8005454:	47c0      	blx	r8
 8005456:	3001      	adds	r0, #1
 8005458:	d103      	bne.n	8005462 <_printf_common+0xb6>
 800545a:	f04f 30ff 	mov.w	r0, #4294967295
 800545e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005462:	3501      	adds	r5, #1
 8005464:	e7c1      	b.n	80053ea <_printf_common+0x3e>
 8005466:	2030      	movs	r0, #48	; 0x30
 8005468:	18e1      	adds	r1, r4, r3
 800546a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005474:	4422      	add	r2, r4
 8005476:	3302      	adds	r3, #2
 8005478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800547c:	e7c2      	b.n	8005404 <_printf_common+0x58>
 800547e:	2301      	movs	r3, #1
 8005480:	4622      	mov	r2, r4
 8005482:	4649      	mov	r1, r9
 8005484:	4638      	mov	r0, r7
 8005486:	47c0      	blx	r8
 8005488:	3001      	adds	r0, #1
 800548a:	d0e6      	beq.n	800545a <_printf_common+0xae>
 800548c:	3601      	adds	r6, #1
 800548e:	e7d9      	b.n	8005444 <_printf_common+0x98>

08005490 <_printf_i>:
 8005490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005494:	7e0f      	ldrb	r7, [r1, #24]
 8005496:	4691      	mov	r9, r2
 8005498:	2f78      	cmp	r7, #120	; 0x78
 800549a:	4680      	mov	r8, r0
 800549c:	460c      	mov	r4, r1
 800549e:	469a      	mov	sl, r3
 80054a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054a6:	d807      	bhi.n	80054b8 <_printf_i+0x28>
 80054a8:	2f62      	cmp	r7, #98	; 0x62
 80054aa:	d80a      	bhi.n	80054c2 <_printf_i+0x32>
 80054ac:	2f00      	cmp	r7, #0
 80054ae:	f000 80d5 	beq.w	800565c <_printf_i+0x1cc>
 80054b2:	2f58      	cmp	r7, #88	; 0x58
 80054b4:	f000 80c1 	beq.w	800563a <_printf_i+0x1aa>
 80054b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054c0:	e03a      	b.n	8005538 <_printf_i+0xa8>
 80054c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054c6:	2b15      	cmp	r3, #21
 80054c8:	d8f6      	bhi.n	80054b8 <_printf_i+0x28>
 80054ca:	a101      	add	r1, pc, #4	; (adr r1, 80054d0 <_printf_i+0x40>)
 80054cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054d0:	08005529 	.word	0x08005529
 80054d4:	0800553d 	.word	0x0800553d
 80054d8:	080054b9 	.word	0x080054b9
 80054dc:	080054b9 	.word	0x080054b9
 80054e0:	080054b9 	.word	0x080054b9
 80054e4:	080054b9 	.word	0x080054b9
 80054e8:	0800553d 	.word	0x0800553d
 80054ec:	080054b9 	.word	0x080054b9
 80054f0:	080054b9 	.word	0x080054b9
 80054f4:	080054b9 	.word	0x080054b9
 80054f8:	080054b9 	.word	0x080054b9
 80054fc:	08005643 	.word	0x08005643
 8005500:	08005569 	.word	0x08005569
 8005504:	080055fd 	.word	0x080055fd
 8005508:	080054b9 	.word	0x080054b9
 800550c:	080054b9 	.word	0x080054b9
 8005510:	08005665 	.word	0x08005665
 8005514:	080054b9 	.word	0x080054b9
 8005518:	08005569 	.word	0x08005569
 800551c:	080054b9 	.word	0x080054b9
 8005520:	080054b9 	.word	0x080054b9
 8005524:	08005605 	.word	0x08005605
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	1d1a      	adds	r2, r3, #4
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	602a      	str	r2, [r5, #0]
 8005530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005538:	2301      	movs	r3, #1
 800553a:	e0a0      	b.n	800567e <_printf_i+0x1ee>
 800553c:	6820      	ldr	r0, [r4, #0]
 800553e:	682b      	ldr	r3, [r5, #0]
 8005540:	0607      	lsls	r7, r0, #24
 8005542:	f103 0104 	add.w	r1, r3, #4
 8005546:	6029      	str	r1, [r5, #0]
 8005548:	d501      	bpl.n	800554e <_printf_i+0xbe>
 800554a:	681e      	ldr	r6, [r3, #0]
 800554c:	e003      	b.n	8005556 <_printf_i+0xc6>
 800554e:	0646      	lsls	r6, r0, #25
 8005550:	d5fb      	bpl.n	800554a <_printf_i+0xba>
 8005552:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005556:	2e00      	cmp	r6, #0
 8005558:	da03      	bge.n	8005562 <_printf_i+0xd2>
 800555a:	232d      	movs	r3, #45	; 0x2d
 800555c:	4276      	negs	r6, r6
 800555e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005562:	230a      	movs	r3, #10
 8005564:	4859      	ldr	r0, [pc, #356]	; (80056cc <_printf_i+0x23c>)
 8005566:	e012      	b.n	800558e <_printf_i+0xfe>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	6820      	ldr	r0, [r4, #0]
 800556c:	1d19      	adds	r1, r3, #4
 800556e:	6029      	str	r1, [r5, #0]
 8005570:	0605      	lsls	r5, r0, #24
 8005572:	d501      	bpl.n	8005578 <_printf_i+0xe8>
 8005574:	681e      	ldr	r6, [r3, #0]
 8005576:	e002      	b.n	800557e <_printf_i+0xee>
 8005578:	0641      	lsls	r1, r0, #25
 800557a:	d5fb      	bpl.n	8005574 <_printf_i+0xe4>
 800557c:	881e      	ldrh	r6, [r3, #0]
 800557e:	2f6f      	cmp	r7, #111	; 0x6f
 8005580:	bf0c      	ite	eq
 8005582:	2308      	moveq	r3, #8
 8005584:	230a      	movne	r3, #10
 8005586:	4851      	ldr	r0, [pc, #324]	; (80056cc <_printf_i+0x23c>)
 8005588:	2100      	movs	r1, #0
 800558a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800558e:	6865      	ldr	r5, [r4, #4]
 8005590:	2d00      	cmp	r5, #0
 8005592:	bfa8      	it	ge
 8005594:	6821      	ldrge	r1, [r4, #0]
 8005596:	60a5      	str	r5, [r4, #8]
 8005598:	bfa4      	itt	ge
 800559a:	f021 0104 	bicge.w	r1, r1, #4
 800559e:	6021      	strge	r1, [r4, #0]
 80055a0:	b90e      	cbnz	r6, 80055a6 <_printf_i+0x116>
 80055a2:	2d00      	cmp	r5, #0
 80055a4:	d04b      	beq.n	800563e <_printf_i+0x1ae>
 80055a6:	4615      	mov	r5, r2
 80055a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80055ac:	fb03 6711 	mls	r7, r3, r1, r6
 80055b0:	5dc7      	ldrb	r7, [r0, r7]
 80055b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055b6:	4637      	mov	r7, r6
 80055b8:	42bb      	cmp	r3, r7
 80055ba:	460e      	mov	r6, r1
 80055bc:	d9f4      	bls.n	80055a8 <_printf_i+0x118>
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d10b      	bne.n	80055da <_printf_i+0x14a>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	07de      	lsls	r6, r3, #31
 80055c6:	d508      	bpl.n	80055da <_printf_i+0x14a>
 80055c8:	6923      	ldr	r3, [r4, #16]
 80055ca:	6861      	ldr	r1, [r4, #4]
 80055cc:	4299      	cmp	r1, r3
 80055ce:	bfde      	ittt	le
 80055d0:	2330      	movle	r3, #48	; 0x30
 80055d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055da:	1b52      	subs	r2, r2, r5
 80055dc:	6122      	str	r2, [r4, #16]
 80055de:	464b      	mov	r3, r9
 80055e0:	4621      	mov	r1, r4
 80055e2:	4640      	mov	r0, r8
 80055e4:	f8cd a000 	str.w	sl, [sp]
 80055e8:	aa03      	add	r2, sp, #12
 80055ea:	f7ff fedf 	bl	80053ac <_printf_common>
 80055ee:	3001      	adds	r0, #1
 80055f0:	d14a      	bne.n	8005688 <_printf_i+0x1f8>
 80055f2:	f04f 30ff 	mov.w	r0, #4294967295
 80055f6:	b004      	add	sp, #16
 80055f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	f043 0320 	orr.w	r3, r3, #32
 8005602:	6023      	str	r3, [r4, #0]
 8005604:	2778      	movs	r7, #120	; 0x78
 8005606:	4832      	ldr	r0, [pc, #200]	; (80056d0 <_printf_i+0x240>)
 8005608:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	6829      	ldr	r1, [r5, #0]
 8005610:	061f      	lsls	r7, r3, #24
 8005612:	f851 6b04 	ldr.w	r6, [r1], #4
 8005616:	d402      	bmi.n	800561e <_printf_i+0x18e>
 8005618:	065f      	lsls	r7, r3, #25
 800561a:	bf48      	it	mi
 800561c:	b2b6      	uxthmi	r6, r6
 800561e:	07df      	lsls	r7, r3, #31
 8005620:	bf48      	it	mi
 8005622:	f043 0320 	orrmi.w	r3, r3, #32
 8005626:	6029      	str	r1, [r5, #0]
 8005628:	bf48      	it	mi
 800562a:	6023      	strmi	r3, [r4, #0]
 800562c:	b91e      	cbnz	r6, 8005636 <_printf_i+0x1a6>
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	f023 0320 	bic.w	r3, r3, #32
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	2310      	movs	r3, #16
 8005638:	e7a6      	b.n	8005588 <_printf_i+0xf8>
 800563a:	4824      	ldr	r0, [pc, #144]	; (80056cc <_printf_i+0x23c>)
 800563c:	e7e4      	b.n	8005608 <_printf_i+0x178>
 800563e:	4615      	mov	r5, r2
 8005640:	e7bd      	b.n	80055be <_printf_i+0x12e>
 8005642:	682b      	ldr	r3, [r5, #0]
 8005644:	6826      	ldr	r6, [r4, #0]
 8005646:	1d18      	adds	r0, r3, #4
 8005648:	6961      	ldr	r1, [r4, #20]
 800564a:	6028      	str	r0, [r5, #0]
 800564c:	0635      	lsls	r5, r6, #24
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	d501      	bpl.n	8005656 <_printf_i+0x1c6>
 8005652:	6019      	str	r1, [r3, #0]
 8005654:	e002      	b.n	800565c <_printf_i+0x1cc>
 8005656:	0670      	lsls	r0, r6, #25
 8005658:	d5fb      	bpl.n	8005652 <_printf_i+0x1c2>
 800565a:	8019      	strh	r1, [r3, #0]
 800565c:	2300      	movs	r3, #0
 800565e:	4615      	mov	r5, r2
 8005660:	6123      	str	r3, [r4, #16]
 8005662:	e7bc      	b.n	80055de <_printf_i+0x14e>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	2100      	movs	r1, #0
 8005668:	1d1a      	adds	r2, r3, #4
 800566a:	602a      	str	r2, [r5, #0]
 800566c:	681d      	ldr	r5, [r3, #0]
 800566e:	6862      	ldr	r2, [r4, #4]
 8005670:	4628      	mov	r0, r5
 8005672:	f000 f989 	bl	8005988 <memchr>
 8005676:	b108      	cbz	r0, 800567c <_printf_i+0x1ec>
 8005678:	1b40      	subs	r0, r0, r5
 800567a:	6060      	str	r0, [r4, #4]
 800567c:	6863      	ldr	r3, [r4, #4]
 800567e:	6123      	str	r3, [r4, #16]
 8005680:	2300      	movs	r3, #0
 8005682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005686:	e7aa      	b.n	80055de <_printf_i+0x14e>
 8005688:	462a      	mov	r2, r5
 800568a:	4649      	mov	r1, r9
 800568c:	4640      	mov	r0, r8
 800568e:	6923      	ldr	r3, [r4, #16]
 8005690:	47d0      	blx	sl
 8005692:	3001      	adds	r0, #1
 8005694:	d0ad      	beq.n	80055f2 <_printf_i+0x162>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	079b      	lsls	r3, r3, #30
 800569a:	d413      	bmi.n	80056c4 <_printf_i+0x234>
 800569c:	68e0      	ldr	r0, [r4, #12]
 800569e:	9b03      	ldr	r3, [sp, #12]
 80056a0:	4298      	cmp	r0, r3
 80056a2:	bfb8      	it	lt
 80056a4:	4618      	movlt	r0, r3
 80056a6:	e7a6      	b.n	80055f6 <_printf_i+0x166>
 80056a8:	2301      	movs	r3, #1
 80056aa:	4632      	mov	r2, r6
 80056ac:	4649      	mov	r1, r9
 80056ae:	4640      	mov	r0, r8
 80056b0:	47d0      	blx	sl
 80056b2:	3001      	adds	r0, #1
 80056b4:	d09d      	beq.n	80055f2 <_printf_i+0x162>
 80056b6:	3501      	adds	r5, #1
 80056b8:	68e3      	ldr	r3, [r4, #12]
 80056ba:	9903      	ldr	r1, [sp, #12]
 80056bc:	1a5b      	subs	r3, r3, r1
 80056be:	42ab      	cmp	r3, r5
 80056c0:	dcf2      	bgt.n	80056a8 <_printf_i+0x218>
 80056c2:	e7eb      	b.n	800569c <_printf_i+0x20c>
 80056c4:	2500      	movs	r5, #0
 80056c6:	f104 0619 	add.w	r6, r4, #25
 80056ca:	e7f5      	b.n	80056b8 <_printf_i+0x228>
 80056cc:	08006d3f 	.word	0x08006d3f
 80056d0:	08006d50 	.word	0x08006d50

080056d4 <__sflush_r>:
 80056d4:	898a      	ldrh	r2, [r1, #12]
 80056d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d8:	4605      	mov	r5, r0
 80056da:	0710      	lsls	r0, r2, #28
 80056dc:	460c      	mov	r4, r1
 80056de:	d457      	bmi.n	8005790 <__sflush_r+0xbc>
 80056e0:	684b      	ldr	r3, [r1, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	dc04      	bgt.n	80056f0 <__sflush_r+0x1c>
 80056e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	dc01      	bgt.n	80056f0 <__sflush_r+0x1c>
 80056ec:	2000      	movs	r0, #0
 80056ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056f2:	2e00      	cmp	r6, #0
 80056f4:	d0fa      	beq.n	80056ec <__sflush_r+0x18>
 80056f6:	2300      	movs	r3, #0
 80056f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80056fc:	682f      	ldr	r7, [r5, #0]
 80056fe:	6a21      	ldr	r1, [r4, #32]
 8005700:	602b      	str	r3, [r5, #0]
 8005702:	d032      	beq.n	800576a <__sflush_r+0x96>
 8005704:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	075a      	lsls	r2, r3, #29
 800570a:	d505      	bpl.n	8005718 <__sflush_r+0x44>
 800570c:	6863      	ldr	r3, [r4, #4]
 800570e:	1ac0      	subs	r0, r0, r3
 8005710:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005712:	b10b      	cbz	r3, 8005718 <__sflush_r+0x44>
 8005714:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005716:	1ac0      	subs	r0, r0, r3
 8005718:	2300      	movs	r3, #0
 800571a:	4602      	mov	r2, r0
 800571c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800571e:	4628      	mov	r0, r5
 8005720:	6a21      	ldr	r1, [r4, #32]
 8005722:	47b0      	blx	r6
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	89a3      	ldrh	r3, [r4, #12]
 8005728:	d106      	bne.n	8005738 <__sflush_r+0x64>
 800572a:	6829      	ldr	r1, [r5, #0]
 800572c:	291d      	cmp	r1, #29
 800572e:	d82b      	bhi.n	8005788 <__sflush_r+0xb4>
 8005730:	4a28      	ldr	r2, [pc, #160]	; (80057d4 <__sflush_r+0x100>)
 8005732:	410a      	asrs	r2, r1
 8005734:	07d6      	lsls	r6, r2, #31
 8005736:	d427      	bmi.n	8005788 <__sflush_r+0xb4>
 8005738:	2200      	movs	r2, #0
 800573a:	6062      	str	r2, [r4, #4]
 800573c:	6922      	ldr	r2, [r4, #16]
 800573e:	04d9      	lsls	r1, r3, #19
 8005740:	6022      	str	r2, [r4, #0]
 8005742:	d504      	bpl.n	800574e <__sflush_r+0x7a>
 8005744:	1c42      	adds	r2, r0, #1
 8005746:	d101      	bne.n	800574c <__sflush_r+0x78>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	b903      	cbnz	r3, 800574e <__sflush_r+0x7a>
 800574c:	6560      	str	r0, [r4, #84]	; 0x54
 800574e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005750:	602f      	str	r7, [r5, #0]
 8005752:	2900      	cmp	r1, #0
 8005754:	d0ca      	beq.n	80056ec <__sflush_r+0x18>
 8005756:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800575a:	4299      	cmp	r1, r3
 800575c:	d002      	beq.n	8005764 <__sflush_r+0x90>
 800575e:	4628      	mov	r0, r5
 8005760:	f7ff fb42 	bl	8004de8 <_free_r>
 8005764:	2000      	movs	r0, #0
 8005766:	6360      	str	r0, [r4, #52]	; 0x34
 8005768:	e7c1      	b.n	80056ee <__sflush_r+0x1a>
 800576a:	2301      	movs	r3, #1
 800576c:	4628      	mov	r0, r5
 800576e:	47b0      	blx	r6
 8005770:	1c41      	adds	r1, r0, #1
 8005772:	d1c8      	bne.n	8005706 <__sflush_r+0x32>
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0c5      	beq.n	8005706 <__sflush_r+0x32>
 800577a:	2b1d      	cmp	r3, #29
 800577c:	d001      	beq.n	8005782 <__sflush_r+0xae>
 800577e:	2b16      	cmp	r3, #22
 8005780:	d101      	bne.n	8005786 <__sflush_r+0xb2>
 8005782:	602f      	str	r7, [r5, #0]
 8005784:	e7b2      	b.n	80056ec <__sflush_r+0x18>
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800578c:	81a3      	strh	r3, [r4, #12]
 800578e:	e7ae      	b.n	80056ee <__sflush_r+0x1a>
 8005790:	690f      	ldr	r7, [r1, #16]
 8005792:	2f00      	cmp	r7, #0
 8005794:	d0aa      	beq.n	80056ec <__sflush_r+0x18>
 8005796:	0793      	lsls	r3, r2, #30
 8005798:	bf18      	it	ne
 800579a:	2300      	movne	r3, #0
 800579c:	680e      	ldr	r6, [r1, #0]
 800579e:	bf08      	it	eq
 80057a0:	694b      	ldreq	r3, [r1, #20]
 80057a2:	1bf6      	subs	r6, r6, r7
 80057a4:	600f      	str	r7, [r1, #0]
 80057a6:	608b      	str	r3, [r1, #8]
 80057a8:	2e00      	cmp	r6, #0
 80057aa:	dd9f      	ble.n	80056ec <__sflush_r+0x18>
 80057ac:	4633      	mov	r3, r6
 80057ae:	463a      	mov	r2, r7
 80057b0:	4628      	mov	r0, r5
 80057b2:	6a21      	ldr	r1, [r4, #32]
 80057b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80057b8:	47e0      	blx	ip
 80057ba:	2800      	cmp	r0, #0
 80057bc:	dc06      	bgt.n	80057cc <__sflush_r+0xf8>
 80057be:	89a3      	ldrh	r3, [r4, #12]
 80057c0:	f04f 30ff 	mov.w	r0, #4294967295
 80057c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057c8:	81a3      	strh	r3, [r4, #12]
 80057ca:	e790      	b.n	80056ee <__sflush_r+0x1a>
 80057cc:	4407      	add	r7, r0
 80057ce:	1a36      	subs	r6, r6, r0
 80057d0:	e7ea      	b.n	80057a8 <__sflush_r+0xd4>
 80057d2:	bf00      	nop
 80057d4:	dfbffffe 	.word	0xdfbffffe

080057d8 <_fflush_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	690b      	ldr	r3, [r1, #16]
 80057dc:	4605      	mov	r5, r0
 80057de:	460c      	mov	r4, r1
 80057e0:	b913      	cbnz	r3, 80057e8 <_fflush_r+0x10>
 80057e2:	2500      	movs	r5, #0
 80057e4:	4628      	mov	r0, r5
 80057e6:	bd38      	pop	{r3, r4, r5, pc}
 80057e8:	b118      	cbz	r0, 80057f2 <_fflush_r+0x1a>
 80057ea:	6a03      	ldr	r3, [r0, #32]
 80057ec:	b90b      	cbnz	r3, 80057f2 <_fflush_r+0x1a>
 80057ee:	f7ff f983 	bl	8004af8 <__sinit>
 80057f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0f3      	beq.n	80057e2 <_fflush_r+0xa>
 80057fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80057fc:	07d0      	lsls	r0, r2, #31
 80057fe:	d404      	bmi.n	800580a <_fflush_r+0x32>
 8005800:	0599      	lsls	r1, r3, #22
 8005802:	d402      	bmi.n	800580a <_fflush_r+0x32>
 8005804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005806:	f7ff fadf 	bl	8004dc8 <__retarget_lock_acquire_recursive>
 800580a:	4628      	mov	r0, r5
 800580c:	4621      	mov	r1, r4
 800580e:	f7ff ff61 	bl	80056d4 <__sflush_r>
 8005812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005814:	4605      	mov	r5, r0
 8005816:	07da      	lsls	r2, r3, #31
 8005818:	d4e4      	bmi.n	80057e4 <_fflush_r+0xc>
 800581a:	89a3      	ldrh	r3, [r4, #12]
 800581c:	059b      	lsls	r3, r3, #22
 800581e:	d4e1      	bmi.n	80057e4 <_fflush_r+0xc>
 8005820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005822:	f7ff fad2 	bl	8004dca <__retarget_lock_release_recursive>
 8005826:	e7dd      	b.n	80057e4 <_fflush_r+0xc>

08005828 <__swbuf_r>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	460e      	mov	r6, r1
 800582c:	4614      	mov	r4, r2
 800582e:	4605      	mov	r5, r0
 8005830:	b118      	cbz	r0, 800583a <__swbuf_r+0x12>
 8005832:	6a03      	ldr	r3, [r0, #32]
 8005834:	b90b      	cbnz	r3, 800583a <__swbuf_r+0x12>
 8005836:	f7ff f95f 	bl	8004af8 <__sinit>
 800583a:	69a3      	ldr	r3, [r4, #24]
 800583c:	60a3      	str	r3, [r4, #8]
 800583e:	89a3      	ldrh	r3, [r4, #12]
 8005840:	071a      	lsls	r2, r3, #28
 8005842:	d525      	bpl.n	8005890 <__swbuf_r+0x68>
 8005844:	6923      	ldr	r3, [r4, #16]
 8005846:	b31b      	cbz	r3, 8005890 <__swbuf_r+0x68>
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	6922      	ldr	r2, [r4, #16]
 800584c:	b2f6      	uxtb	r6, r6
 800584e:	1a98      	subs	r0, r3, r2
 8005850:	6963      	ldr	r3, [r4, #20]
 8005852:	4637      	mov	r7, r6
 8005854:	4283      	cmp	r3, r0
 8005856:	dc04      	bgt.n	8005862 <__swbuf_r+0x3a>
 8005858:	4621      	mov	r1, r4
 800585a:	4628      	mov	r0, r5
 800585c:	f7ff ffbc 	bl	80057d8 <_fflush_r>
 8005860:	b9e0      	cbnz	r0, 800589c <__swbuf_r+0x74>
 8005862:	68a3      	ldr	r3, [r4, #8]
 8005864:	3b01      	subs	r3, #1
 8005866:	60a3      	str	r3, [r4, #8]
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	6022      	str	r2, [r4, #0]
 800586e:	701e      	strb	r6, [r3, #0]
 8005870:	6962      	ldr	r2, [r4, #20]
 8005872:	1c43      	adds	r3, r0, #1
 8005874:	429a      	cmp	r2, r3
 8005876:	d004      	beq.n	8005882 <__swbuf_r+0x5a>
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	07db      	lsls	r3, r3, #31
 800587c:	d506      	bpl.n	800588c <__swbuf_r+0x64>
 800587e:	2e0a      	cmp	r6, #10
 8005880:	d104      	bne.n	800588c <__swbuf_r+0x64>
 8005882:	4621      	mov	r1, r4
 8005884:	4628      	mov	r0, r5
 8005886:	f7ff ffa7 	bl	80057d8 <_fflush_r>
 800588a:	b938      	cbnz	r0, 800589c <__swbuf_r+0x74>
 800588c:	4638      	mov	r0, r7
 800588e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005890:	4621      	mov	r1, r4
 8005892:	4628      	mov	r0, r5
 8005894:	f000 f806 	bl	80058a4 <__swsetup_r>
 8005898:	2800      	cmp	r0, #0
 800589a:	d0d5      	beq.n	8005848 <__swbuf_r+0x20>
 800589c:	f04f 37ff 	mov.w	r7, #4294967295
 80058a0:	e7f4      	b.n	800588c <__swbuf_r+0x64>
	...

080058a4 <__swsetup_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4b2a      	ldr	r3, [pc, #168]	; (8005950 <__swsetup_r+0xac>)
 80058a8:	4605      	mov	r5, r0
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	460c      	mov	r4, r1
 80058ae:	b118      	cbz	r0, 80058b8 <__swsetup_r+0x14>
 80058b0:	6a03      	ldr	r3, [r0, #32]
 80058b2:	b90b      	cbnz	r3, 80058b8 <__swsetup_r+0x14>
 80058b4:	f7ff f920 	bl	8004af8 <__sinit>
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058be:	0718      	lsls	r0, r3, #28
 80058c0:	d422      	bmi.n	8005908 <__swsetup_r+0x64>
 80058c2:	06d9      	lsls	r1, r3, #27
 80058c4:	d407      	bmi.n	80058d6 <__swsetup_r+0x32>
 80058c6:	2309      	movs	r3, #9
 80058c8:	602b      	str	r3, [r5, #0]
 80058ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058ce:	f04f 30ff 	mov.w	r0, #4294967295
 80058d2:	81a3      	strh	r3, [r4, #12]
 80058d4:	e034      	b.n	8005940 <__swsetup_r+0x9c>
 80058d6:	0758      	lsls	r0, r3, #29
 80058d8:	d512      	bpl.n	8005900 <__swsetup_r+0x5c>
 80058da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058dc:	b141      	cbz	r1, 80058f0 <__swsetup_r+0x4c>
 80058de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058e2:	4299      	cmp	r1, r3
 80058e4:	d002      	beq.n	80058ec <__swsetup_r+0x48>
 80058e6:	4628      	mov	r0, r5
 80058e8:	f7ff fa7e 	bl	8004de8 <_free_r>
 80058ec:	2300      	movs	r3, #0
 80058ee:	6363      	str	r3, [r4, #52]	; 0x34
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058f6:	81a3      	strh	r3, [r4, #12]
 80058f8:	2300      	movs	r3, #0
 80058fa:	6063      	str	r3, [r4, #4]
 80058fc:	6923      	ldr	r3, [r4, #16]
 80058fe:	6023      	str	r3, [r4, #0]
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	f043 0308 	orr.w	r3, r3, #8
 8005906:	81a3      	strh	r3, [r4, #12]
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	b94b      	cbnz	r3, 8005920 <__swsetup_r+0x7c>
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005916:	d003      	beq.n	8005920 <__swsetup_r+0x7c>
 8005918:	4621      	mov	r1, r4
 800591a:	4628      	mov	r0, r5
 800591c:	f000 f896 	bl	8005a4c <__smakebuf_r>
 8005920:	89a0      	ldrh	r0, [r4, #12]
 8005922:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005926:	f010 0301 	ands.w	r3, r0, #1
 800592a:	d00a      	beq.n	8005942 <__swsetup_r+0x9e>
 800592c:	2300      	movs	r3, #0
 800592e:	60a3      	str	r3, [r4, #8]
 8005930:	6963      	ldr	r3, [r4, #20]
 8005932:	425b      	negs	r3, r3
 8005934:	61a3      	str	r3, [r4, #24]
 8005936:	6923      	ldr	r3, [r4, #16]
 8005938:	b943      	cbnz	r3, 800594c <__swsetup_r+0xa8>
 800593a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800593e:	d1c4      	bne.n	80058ca <__swsetup_r+0x26>
 8005940:	bd38      	pop	{r3, r4, r5, pc}
 8005942:	0781      	lsls	r1, r0, #30
 8005944:	bf58      	it	pl
 8005946:	6963      	ldrpl	r3, [r4, #20]
 8005948:	60a3      	str	r3, [r4, #8]
 800594a:	e7f4      	b.n	8005936 <__swsetup_r+0x92>
 800594c:	2000      	movs	r0, #0
 800594e:	e7f7      	b.n	8005940 <__swsetup_r+0x9c>
 8005950:	2000006c 	.word	0x2000006c

08005954 <memmove>:
 8005954:	4288      	cmp	r0, r1
 8005956:	b510      	push	{r4, lr}
 8005958:	eb01 0402 	add.w	r4, r1, r2
 800595c:	d902      	bls.n	8005964 <memmove+0x10>
 800595e:	4284      	cmp	r4, r0
 8005960:	4623      	mov	r3, r4
 8005962:	d807      	bhi.n	8005974 <memmove+0x20>
 8005964:	1e43      	subs	r3, r0, #1
 8005966:	42a1      	cmp	r1, r4
 8005968:	d008      	beq.n	800597c <memmove+0x28>
 800596a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800596e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005972:	e7f8      	b.n	8005966 <memmove+0x12>
 8005974:	4601      	mov	r1, r0
 8005976:	4402      	add	r2, r0
 8005978:	428a      	cmp	r2, r1
 800597a:	d100      	bne.n	800597e <memmove+0x2a>
 800597c:	bd10      	pop	{r4, pc}
 800597e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005982:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005986:	e7f7      	b.n	8005978 <memmove+0x24>

08005988 <memchr>:
 8005988:	4603      	mov	r3, r0
 800598a:	b510      	push	{r4, lr}
 800598c:	b2c9      	uxtb	r1, r1
 800598e:	4402      	add	r2, r0
 8005990:	4293      	cmp	r3, r2
 8005992:	4618      	mov	r0, r3
 8005994:	d101      	bne.n	800599a <memchr+0x12>
 8005996:	2000      	movs	r0, #0
 8005998:	e003      	b.n	80059a2 <memchr+0x1a>
 800599a:	7804      	ldrb	r4, [r0, #0]
 800599c:	3301      	adds	r3, #1
 800599e:	428c      	cmp	r4, r1
 80059a0:	d1f6      	bne.n	8005990 <memchr+0x8>
 80059a2:	bd10      	pop	{r4, pc}

080059a4 <_realloc_r>:
 80059a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a8:	4680      	mov	r8, r0
 80059aa:	4614      	mov	r4, r2
 80059ac:	460e      	mov	r6, r1
 80059ae:	b921      	cbnz	r1, 80059ba <_realloc_r+0x16>
 80059b0:	4611      	mov	r1, r2
 80059b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059b6:	f7fe bf99 	b.w	80048ec <_malloc_r>
 80059ba:	b92a      	cbnz	r2, 80059c8 <_realloc_r+0x24>
 80059bc:	f7ff fa14 	bl	8004de8 <_free_r>
 80059c0:	4625      	mov	r5, r4
 80059c2:	4628      	mov	r0, r5
 80059c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059c8:	f000 f89e 	bl	8005b08 <_malloc_usable_size_r>
 80059cc:	4284      	cmp	r4, r0
 80059ce:	4607      	mov	r7, r0
 80059d0:	d802      	bhi.n	80059d8 <_realloc_r+0x34>
 80059d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059d6:	d812      	bhi.n	80059fe <_realloc_r+0x5a>
 80059d8:	4621      	mov	r1, r4
 80059da:	4640      	mov	r0, r8
 80059dc:	f7fe ff86 	bl	80048ec <_malloc_r>
 80059e0:	4605      	mov	r5, r0
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d0ed      	beq.n	80059c2 <_realloc_r+0x1e>
 80059e6:	42bc      	cmp	r4, r7
 80059e8:	4622      	mov	r2, r4
 80059ea:	4631      	mov	r1, r6
 80059ec:	bf28      	it	cs
 80059ee:	463a      	movcs	r2, r7
 80059f0:	f7ff f9ec 	bl	8004dcc <memcpy>
 80059f4:	4631      	mov	r1, r6
 80059f6:	4640      	mov	r0, r8
 80059f8:	f7ff f9f6 	bl	8004de8 <_free_r>
 80059fc:	e7e1      	b.n	80059c2 <_realloc_r+0x1e>
 80059fe:	4635      	mov	r5, r6
 8005a00:	e7df      	b.n	80059c2 <_realloc_r+0x1e>

08005a02 <__swhatbuf_r>:
 8005a02:	b570      	push	{r4, r5, r6, lr}
 8005a04:	460c      	mov	r4, r1
 8005a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a0a:	4615      	mov	r5, r2
 8005a0c:	2900      	cmp	r1, #0
 8005a0e:	461e      	mov	r6, r3
 8005a10:	b096      	sub	sp, #88	; 0x58
 8005a12:	da0c      	bge.n	8005a2e <__swhatbuf_r+0x2c>
 8005a14:	89a3      	ldrh	r3, [r4, #12]
 8005a16:	2100      	movs	r1, #0
 8005a18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a1c:	bf0c      	ite	eq
 8005a1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005a22:	2340      	movne	r3, #64	; 0x40
 8005a24:	2000      	movs	r0, #0
 8005a26:	6031      	str	r1, [r6, #0]
 8005a28:	602b      	str	r3, [r5, #0]
 8005a2a:	b016      	add	sp, #88	; 0x58
 8005a2c:	bd70      	pop	{r4, r5, r6, pc}
 8005a2e:	466a      	mov	r2, sp
 8005a30:	f000 f848 	bl	8005ac4 <_fstat_r>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	dbed      	blt.n	8005a14 <__swhatbuf_r+0x12>
 8005a38:	9901      	ldr	r1, [sp, #4]
 8005a3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005a3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005a42:	4259      	negs	r1, r3
 8005a44:	4159      	adcs	r1, r3
 8005a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a4a:	e7eb      	b.n	8005a24 <__swhatbuf_r+0x22>

08005a4c <__smakebuf_r>:
 8005a4c:	898b      	ldrh	r3, [r1, #12]
 8005a4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a50:	079d      	lsls	r5, r3, #30
 8005a52:	4606      	mov	r6, r0
 8005a54:	460c      	mov	r4, r1
 8005a56:	d507      	bpl.n	8005a68 <__smakebuf_r+0x1c>
 8005a58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	6123      	str	r3, [r4, #16]
 8005a60:	2301      	movs	r3, #1
 8005a62:	6163      	str	r3, [r4, #20]
 8005a64:	b002      	add	sp, #8
 8005a66:	bd70      	pop	{r4, r5, r6, pc}
 8005a68:	466a      	mov	r2, sp
 8005a6a:	ab01      	add	r3, sp, #4
 8005a6c:	f7ff ffc9 	bl	8005a02 <__swhatbuf_r>
 8005a70:	9900      	ldr	r1, [sp, #0]
 8005a72:	4605      	mov	r5, r0
 8005a74:	4630      	mov	r0, r6
 8005a76:	f7fe ff39 	bl	80048ec <_malloc_r>
 8005a7a:	b948      	cbnz	r0, 8005a90 <__smakebuf_r+0x44>
 8005a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a80:	059a      	lsls	r2, r3, #22
 8005a82:	d4ef      	bmi.n	8005a64 <__smakebuf_r+0x18>
 8005a84:	f023 0303 	bic.w	r3, r3, #3
 8005a88:	f043 0302 	orr.w	r3, r3, #2
 8005a8c:	81a3      	strh	r3, [r4, #12]
 8005a8e:	e7e3      	b.n	8005a58 <__smakebuf_r+0xc>
 8005a90:	89a3      	ldrh	r3, [r4, #12]
 8005a92:	6020      	str	r0, [r4, #0]
 8005a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a98:	81a3      	strh	r3, [r4, #12]
 8005a9a:	9b00      	ldr	r3, [sp, #0]
 8005a9c:	6120      	str	r0, [r4, #16]
 8005a9e:	6163      	str	r3, [r4, #20]
 8005aa0:	9b01      	ldr	r3, [sp, #4]
 8005aa2:	b15b      	cbz	r3, 8005abc <__smakebuf_r+0x70>
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aaa:	f000 f81d 	bl	8005ae8 <_isatty_r>
 8005aae:	b128      	cbz	r0, 8005abc <__smakebuf_r+0x70>
 8005ab0:	89a3      	ldrh	r3, [r4, #12]
 8005ab2:	f023 0303 	bic.w	r3, r3, #3
 8005ab6:	f043 0301 	orr.w	r3, r3, #1
 8005aba:	81a3      	strh	r3, [r4, #12]
 8005abc:	89a3      	ldrh	r3, [r4, #12]
 8005abe:	431d      	orrs	r5, r3
 8005ac0:	81a5      	strh	r5, [r4, #12]
 8005ac2:	e7cf      	b.n	8005a64 <__smakebuf_r+0x18>

08005ac4 <_fstat_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	4d06      	ldr	r5, [pc, #24]	; (8005ae4 <_fstat_r+0x20>)
 8005aca:	4604      	mov	r4, r0
 8005acc:	4608      	mov	r0, r1
 8005ace:	4611      	mov	r1, r2
 8005ad0:	602b      	str	r3, [r5, #0]
 8005ad2:	f7fb fed1 	bl	8001878 <_fstat>
 8005ad6:	1c43      	adds	r3, r0, #1
 8005ad8:	d102      	bne.n	8005ae0 <_fstat_r+0x1c>
 8005ada:	682b      	ldr	r3, [r5, #0]
 8005adc:	b103      	cbz	r3, 8005ae0 <_fstat_r+0x1c>
 8005ade:	6023      	str	r3, [r4, #0]
 8005ae0:	bd38      	pop	{r3, r4, r5, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000a78 	.word	0x20000a78

08005ae8 <_isatty_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	2300      	movs	r3, #0
 8005aec:	4d05      	ldr	r5, [pc, #20]	; (8005b04 <_isatty_r+0x1c>)
 8005aee:	4604      	mov	r4, r0
 8005af0:	4608      	mov	r0, r1
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	f7fb fecf 	bl	8001896 <_isatty>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d102      	bne.n	8005b02 <_isatty_r+0x1a>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	b103      	cbz	r3, 8005b02 <_isatty_r+0x1a>
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	20000a78 	.word	0x20000a78

08005b08 <_malloc_usable_size_r>:
 8005b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b0c:	1f18      	subs	r0, r3, #4
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bfbc      	itt	lt
 8005b12:	580b      	ldrlt	r3, [r1, r0]
 8005b14:	18c0      	addlt	r0, r0, r3
 8005b16:	4770      	bx	lr

08005b18 <_init>:
 8005b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1a:	bf00      	nop
 8005b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1e:	bc08      	pop	{r3}
 8005b20:	469e      	mov	lr, r3
 8005b22:	4770      	bx	lr

08005b24 <_fini>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	bf00      	nop
 8005b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2a:	bc08      	pop	{r3}
 8005b2c:	469e      	mov	lr, r3
 8005b2e:	4770      	bx	lr
