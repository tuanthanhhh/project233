
DOAN_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000111c  08007d40  08007d40  00017d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e5c  08008e5c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008e5c  08008e5c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e5c  08008e5c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e5c  08008e5c  00018e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e60  08008e60  00018e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a54  200001dc  08009040  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c30  08009040  00020c30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014aa0  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cc5  00000000  00000000  00034ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  000379b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f4f  00000000  00000000  00038d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a1a0  00000000  00000000  00039c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016dc0  00000000  00000000  00053e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092c4e  00000000  00000000  0006abef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006554  00000000  00000000  000fd840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00103d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d24 	.word	0x08007d24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007d24 	.word	0x08007d24

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000ace:	f000 fa5f 	bl	8000f90 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000ad2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2178      	movs	r1, #120	; 0x78
 8000ada:	485b      	ldr	r0, [pc, #364]	; (8000c48 <SSD1306_Init+0x180>)
 8000adc:	f002 faa8 	bl	8003030 <HAL_I2C_IsDeviceReady>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e0a9      	b.n	8000c3e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000aea:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000aee:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000af0:	e002      	b.n	8000af8 <SSD1306_Init+0x30>
		p--;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1f9      	bne.n	8000af2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000afe:	22ae      	movs	r2, #174	; 0xae
 8000b00:	2100      	movs	r1, #0
 8000b02:	2078      	movs	r0, #120	; 0x78
 8000b04:	f000 fabe 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000b08:	2220      	movs	r2, #32
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2078      	movs	r0, #120	; 0x78
 8000b0e:	f000 fab9 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000b12:	2210      	movs	r2, #16
 8000b14:	2100      	movs	r1, #0
 8000b16:	2078      	movs	r0, #120	; 0x78
 8000b18:	f000 fab4 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b1c:	22b0      	movs	r2, #176	; 0xb0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2078      	movs	r0, #120	; 0x78
 8000b22:	f000 faaf 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000b26:	22c8      	movs	r2, #200	; 0xc8
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2078      	movs	r0, #120	; 0x78
 8000b2c:	f000 faaa 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	2078      	movs	r0, #120	; 0x78
 8000b36:	f000 faa5 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000b3a:	2210      	movs	r2, #16
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2078      	movs	r0, #120	; 0x78
 8000b40:	f000 faa0 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000b44:	2240      	movs	r2, #64	; 0x40
 8000b46:	2100      	movs	r1, #0
 8000b48:	2078      	movs	r0, #120	; 0x78
 8000b4a:	f000 fa9b 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000b4e:	2281      	movs	r2, #129	; 0x81
 8000b50:	2100      	movs	r1, #0
 8000b52:	2078      	movs	r0, #120	; 0x78
 8000b54:	f000 fa96 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000b58:	22ff      	movs	r2, #255	; 0xff
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2078      	movs	r0, #120	; 0x78
 8000b5e:	f000 fa91 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000b62:	22a1      	movs	r2, #161	; 0xa1
 8000b64:	2100      	movs	r1, #0
 8000b66:	2078      	movs	r0, #120	; 0x78
 8000b68:	f000 fa8c 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000b6c:	22a6      	movs	r2, #166	; 0xa6
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2078      	movs	r0, #120	; 0x78
 8000b72:	f000 fa87 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000b76:	22a8      	movs	r2, #168	; 0xa8
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2078      	movs	r0, #120	; 0x78
 8000b7c:	f000 fa82 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000b80:	223f      	movs	r2, #63	; 0x3f
 8000b82:	2100      	movs	r1, #0
 8000b84:	2078      	movs	r0, #120	; 0x78
 8000b86:	f000 fa7d 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000b8a:	22a4      	movs	r2, #164	; 0xa4
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2078      	movs	r0, #120	; 0x78
 8000b90:	f000 fa78 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000b94:	22d3      	movs	r2, #211	; 0xd3
 8000b96:	2100      	movs	r1, #0
 8000b98:	2078      	movs	r0, #120	; 0x78
 8000b9a:	f000 fa73 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2078      	movs	r0, #120	; 0x78
 8000ba4:	f000 fa6e 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ba8:	22d5      	movs	r2, #213	; 0xd5
 8000baa:	2100      	movs	r1, #0
 8000bac:	2078      	movs	r0, #120	; 0x78
 8000bae:	f000 fa69 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000bb2:	22f0      	movs	r2, #240	; 0xf0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2078      	movs	r0, #120	; 0x78
 8000bb8:	f000 fa64 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000bbc:	22d9      	movs	r2, #217	; 0xd9
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2078      	movs	r0, #120	; 0x78
 8000bc2:	f000 fa5f 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000bc6:	2222      	movs	r2, #34	; 0x22
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2078      	movs	r0, #120	; 0x78
 8000bcc:	f000 fa5a 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000bd0:	22da      	movs	r2, #218	; 0xda
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2078      	movs	r0, #120	; 0x78
 8000bd6:	f000 fa55 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000bda:	2212      	movs	r2, #18
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2078      	movs	r0, #120	; 0x78
 8000be0:	f000 fa50 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000be4:	22db      	movs	r2, #219	; 0xdb
 8000be6:	2100      	movs	r1, #0
 8000be8:	2078      	movs	r0, #120	; 0x78
 8000bea:	f000 fa4b 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000bee:	2220      	movs	r2, #32
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2078      	movs	r0, #120	; 0x78
 8000bf4:	f000 fa46 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000bf8:	228d      	movs	r2, #141	; 0x8d
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2078      	movs	r0, #120	; 0x78
 8000bfe:	f000 fa41 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000c02:	2214      	movs	r2, #20
 8000c04:	2100      	movs	r1, #0
 8000c06:	2078      	movs	r0, #120	; 0x78
 8000c08:	f000 fa3c 	bl	8001084 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000c0c:	22af      	movs	r2, #175	; 0xaf
 8000c0e:	2100      	movs	r1, #0
 8000c10:	2078      	movs	r0, #120	; 0x78
 8000c12:	f000 fa37 	bl	8001084 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000c16:	222e      	movs	r2, #46	; 0x2e
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2078      	movs	r0, #120	; 0x78
 8000c1c:	f000 fa32 	bl	8001084 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f000 f843 	bl	8000cac <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000c26:	f000 f813 	bl	8000c50 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <SSD1306_Init+0x184>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SSD1306_Init+0x184>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SSD1306_Init+0x184>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000c3c:	2301      	movs	r3, #1
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000600 	.word	0x20000600
 8000c4c:	200005f8 	.word	0x200005f8

08000c50 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000c56:	2300      	movs	r3, #0
 8000c58:	71fb      	strb	r3, [r7, #7]
 8000c5a:	e01d      	b.n	8000c98 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	3b50      	subs	r3, #80	; 0x50
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	2100      	movs	r1, #0
 8000c66:	2078      	movs	r0, #120	; 0x78
 8000c68:	f000 fa0c 	bl	8001084 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2078      	movs	r0, #120	; 0x78
 8000c72:	f000 fa07 	bl	8001084 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000c76:	2210      	movs	r2, #16
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2078      	movs	r0, #120	; 0x78
 8000c7c:	f000 fa02 	bl	8001084 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	01db      	lsls	r3, r3, #7
 8000c84:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <SSD1306_UpdateScreen+0x58>)
 8000c86:	441a      	add	r2, r3
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	2140      	movs	r1, #64	; 0x40
 8000c8c:	2078      	movs	r0, #120	; 0x78
 8000c8e:	f000 f993 	bl	8000fb8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	3301      	adds	r3, #1
 8000c96:	71fb      	strb	r3, [r7, #7]
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	2b07      	cmp	r3, #7
 8000c9c:	d9de      	bls.n	8000c5c <SSD1306_UpdateScreen+0xc>
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200001f8 	.word	0x200001f8

08000cac <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d101      	bne.n	8000cc0 <SSD1306_Fill+0x14>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e000      	b.n	8000cc2 <SSD1306_Fill+0x16>
 8000cc0:	23ff      	movs	r3, #255	; 0xff
 8000cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <SSD1306_Fill+0x2c>)
 8000cca:	f004 fff3 	bl	8005cb4 <memset>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200001f8 	.word	0x200001f8

08000cdc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	80bb      	strh	r3, [r7, #4]
 8000cea:	4613      	mov	r3, r2
 8000cec:	70fb      	strb	r3, [r7, #3]
	if (
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	2b7f      	cmp	r3, #127	; 0x7f
 8000cf2:	d848      	bhi.n	8000d86 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000cf4:	88bb      	ldrh	r3, [r7, #4]
 8000cf6:	2b3f      	cmp	r3, #63	; 0x3f
 8000cf8:	d845      	bhi.n	8000d86 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000cfa:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <SSD1306_DrawPixel+0xb4>)
 8000cfc:	791b      	ldrb	r3, [r3, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d006      	beq.n	8000d10 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000d02:	78fb      	ldrb	r3, [r7, #3]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	bf0c      	ite	eq
 8000d08:	2301      	moveq	r3, #1
 8000d0a:	2300      	movne	r3, #0
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d11a      	bne.n	8000d4c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d16:	88fa      	ldrh	r2, [r7, #6]
 8000d18:	88bb      	ldrh	r3, [r7, #4]
 8000d1a:	08db      	lsrs	r3, r3, #3
 8000d1c:	b298      	uxth	r0, r3
 8000d1e:	4603      	mov	r3, r0
 8000d20:	01db      	lsls	r3, r3, #7
 8000d22:	4413      	add	r3, r2
 8000d24:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <SSD1306_DrawPixel+0xb8>)
 8000d26:	5cd3      	ldrb	r3, [r2, r3]
 8000d28:	b25a      	sxtb	r2, r3
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	f003 0307 	and.w	r3, r3, #7
 8000d30:	2101      	movs	r1, #1
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	b25b      	sxtb	r3, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b259      	sxtb	r1, r3
 8000d3c:	88fa      	ldrh	r2, [r7, #6]
 8000d3e:	4603      	mov	r3, r0
 8000d40:	01db      	lsls	r3, r3, #7
 8000d42:	4413      	add	r3, r2
 8000d44:	b2c9      	uxtb	r1, r1
 8000d46:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <SSD1306_DrawPixel+0xb8>)
 8000d48:	54d1      	strb	r1, [r2, r3]
 8000d4a:	e01d      	b.n	8000d88 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d4c:	88fa      	ldrh	r2, [r7, #6]
 8000d4e:	88bb      	ldrh	r3, [r7, #4]
 8000d50:	08db      	lsrs	r3, r3, #3
 8000d52:	b298      	uxth	r0, r3
 8000d54:	4603      	mov	r3, r0
 8000d56:	01db      	lsls	r3, r3, #7
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <SSD1306_DrawPixel+0xb8>)
 8000d5c:	5cd3      	ldrb	r3, [r2, r3]
 8000d5e:	b25a      	sxtb	r2, r3
 8000d60:	88bb      	ldrh	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	2101      	movs	r1, #1
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	4013      	ands	r3, r2
 8000d74:	b259      	sxtb	r1, r3
 8000d76:	88fa      	ldrh	r2, [r7, #6]
 8000d78:	4603      	mov	r3, r0
 8000d7a:	01db      	lsls	r3, r3, #7
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b2c9      	uxtb	r1, r1
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <SSD1306_DrawPixel+0xb8>)
 8000d82:	54d1      	strb	r1, [r2, r3]
 8000d84:	e000      	b.n	8000d88 <SSD1306_DrawPixel+0xac>
		return;
 8000d86:	bf00      	nop
	}
}
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	200005f8 	.word	0x200005f8
 8000d94:	200001f8 	.word	0x200001f8

08000d98 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	460a      	mov	r2, r1
 8000da2:	80fb      	strh	r3, [r7, #6]
 8000da4:	4613      	mov	r3, r2
 8000da6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000da8:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <SSD1306_GotoXY+0x28>)
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <SSD1306_GotoXY+0x28>)
 8000db0:	88bb      	ldrh	r3, [r7, #4]
 8000db2:	8053      	strh	r3, [r2, #2]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	200005f8 	.word	0x200005f8

08000dc4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000dd4:	4b3a      	ldr	r3, [pc, #232]	; (8000ec0 <SSD1306_Putc+0xfc>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
	if (
 8000de0:	2b7f      	cmp	r3, #127	; 0x7f
 8000de2:	dc07      	bgt.n	8000df4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000de4:	4b36      	ldr	r3, [pc, #216]	; (8000ec0 <SSD1306_Putc+0xfc>)
 8000de6:	885b      	ldrh	r3, [r3, #2]
 8000de8:	461a      	mov	r2, r3
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	785b      	ldrb	r3, [r3, #1]
 8000dee:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000df0:	2b3f      	cmp	r3, #63	; 0x3f
 8000df2:	dd01      	ble.n	8000df8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	e05e      	b.n	8000eb6 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	e04b      	b.n	8000e96 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	3b20      	subs	r3, #32
 8000e06:	6839      	ldr	r1, [r7, #0]
 8000e08:	7849      	ldrb	r1, [r1, #1]
 8000e0a:	fb01 f303 	mul.w	r3, r1, r3
 8000e0e:	4619      	mov	r1, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	440b      	add	r3, r1
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	e030      	b.n	8000e84 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d010      	beq.n	8000e54 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000e32:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <SSD1306_Putc+0xfc>)
 8000e34:	881a      	ldrh	r2, [r3, #0]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b298      	uxth	r0, r3
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <SSD1306_Putc+0xfc>)
 8000e40:	885a      	ldrh	r2, [r3, #2]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	4413      	add	r3, r2
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	79ba      	ldrb	r2, [r7, #6]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f7ff ff45 	bl	8000cdc <SSD1306_DrawPixel>
 8000e52:	e014      	b.n	8000e7e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <SSD1306_Putc+0xfc>)
 8000e56:	881a      	ldrh	r2, [r3, #0]
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b298      	uxth	r0, r3
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <SSD1306_Putc+0xfc>)
 8000e62:	885a      	ldrh	r2, [r3, #2]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	4413      	add	r3, r2
 8000e6a:	b299      	uxth	r1, r3
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	bf0c      	ite	eq
 8000e72:	2301      	moveq	r3, #1
 8000e74:	2300      	movne	r3, #0
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	f7ff ff2f 	bl	8000cdc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	3301      	adds	r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d3c8      	bcc.n	8000e22 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	785b      	ldrb	r3, [r3, #1]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d3ad      	bcc.n	8000dfe <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <SSD1306_Putc+0xfc>)
 8000ea4:	881a      	ldrh	r2, [r3, #0]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	4413      	add	r3, r2
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <SSD1306_Putc+0xfc>)
 8000eb2:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200005f8 	.word	0x200005f8

08000ec4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000ed2:	e012      	b.n	8000efa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	79fa      	ldrb	r2, [r7, #7]
 8000eda:	68b9      	ldr	r1, [r7, #8]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff71 	bl	8000dc4 <SSD1306_Putc>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d002      	beq.n	8000ef4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	e008      	b.n	8000f06 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1e8      	bne.n	8000ed4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	781b      	ldrb	r3, [r3, #0]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <SSD1306_Clear>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear (void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff feca 	bl	8000cac <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000f18:	f7ff fe9a 	bl	8000c50 <SSD1306_UpdateScreen>
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <SSD1306_Println>:
	SSD1306_Puts(currentTimeString, &Font_11x18, 1);
	SSD1306_UpdateScreen();
}

void SSD1306_Println(char* format, ...)
{
 8000f20:	b40f      	push	{r0, r1, r2, r3}
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
	char buffer[20];
	buffer[0] = '\0';
 8000f28:	2300      	movs	r3, #0
 8000f2a:	713b      	strb	r3, [r7, #4]

	va_list argList;
	va_start(argList, format);
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	603b      	str	r3, [r7, #0]
	vsprintf(buffer, format, argList);
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	6a39      	ldr	r1, [r7, #32]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f004 feb1 	bl	8005ca0 <vsiprintf>

	va_end(argList);

	if (actualYPosition > 40)
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <SSD1306_Println+0x68>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b28      	cmp	r3, #40	; 0x28
 8000f44:	d904      	bls.n	8000f50 <SSD1306_Println+0x30>
	{
		SSD1306_Clear();
 8000f46:	f7ff ffe2 	bl	8000f0e <SSD1306_Clear>
		actualYPosition = 0;
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <SSD1306_Println+0x68>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
	}
	SSD1306_GotoXY(0, actualYPosition);
 8000f50:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <SSD1306_Println+0x68>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	4619      	mov	r1, r3
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff ff1d 	bl	8000d98 <SSD1306_GotoXY>
	SSD1306_Puts (buffer, &Font_11x18, 1);
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2201      	movs	r2, #1
 8000f62:	490a      	ldr	r1, [pc, #40]	; (8000f8c <SSD1306_Println+0x6c>)
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ffad 	bl	8000ec4 <SSD1306_Puts>
	actualYPosition += 20;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <SSD1306_Println+0x68>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	3314      	adds	r3, #20
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <SSD1306_Println+0x68>)
 8000f74:	701a      	strb	r2, [r3, #0]

	SSD1306_UpdateScreen();
 8000f76:	f7ff fe6b 	bl	8000c50 <SSD1306_UpdateScreen>
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f84:	b004      	add	sp, #16
 8000f86:	4770      	bx	lr
 8000f88:	200005fe 	.word	0x200005fe
 8000f8c:	20000000 	.word	0x20000000

08000f90 <ssd1306_I2C_Init>:


/* I2C Functions */

void ssd1306_I2C_Init() {
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <ssd1306_I2C_Init+0x24>)
 8000f98:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f9a:	e002      	b.n	8000fa2 <ssd1306_I2C_Init+0x12>
		p--;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f9      	bne.n	8000f9c <ssd1306_I2C_Init+0xc>
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	0003d090 	.word	0x0003d090

08000fb8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b0c7      	sub	sp, #284	; 0x11c
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000fc6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000fca:	600a      	str	r2, [r1, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fd2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000fd6:	4622      	mov	r2, r4
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fde:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fee:	460a      	mov	r2, r1
 8000ff0:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8000ff2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ff6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ffa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ffe:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001002:	7812      	ldrb	r2, [r2, #0]
 8001004:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001006:	2300      	movs	r3, #0
 8001008:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800100c:	e015      	b.n	800103a <ssd1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 800100e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001012:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001016:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800101a:	6812      	ldr	r2, [r2, #0]
 800101c:	441a      	add	r2, r3
 800101e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001022:	3301      	adds	r3, #1
 8001024:	7811      	ldrb	r1, [r2, #0]
 8001026:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800102a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800102e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8001030:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001034:	3301      	adds	r3, #1
 8001036:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800103a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800103e:	b29b      	uxth	r3, r3
 8001040:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001044:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001048:	8812      	ldrh	r2, [r2, #0]
 800104a:	429a      	cmp	r2, r3
 800104c:	d8df      	bhi.n	800100e <ssd1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 100);
 800104e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001052:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b299      	uxth	r1, r3
 800105a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800105e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	3301      	adds	r3, #1
 8001066:	b29b      	uxth	r3, r3
 8001068:	f107 020c 	add.w	r2, r7, #12
 800106c:	2064      	movs	r0, #100	; 0x64
 800106e:	9000      	str	r0, [sp, #0]
 8001070:	4803      	ldr	r0, [pc, #12]	; (8001080 <ssd1306_I2C_WriteMulti+0xc8>)
 8001072:	f001 fc73 	bl	800295c <HAL_I2C_Master_Transmit>
}
 8001076:	bf00      	nop
 8001078:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800107c:	46bd      	mov	sp, r7
 800107e:	bd90      	pop	{r4, r7, pc}
 8001080:	20000600 	.word	0x20000600

08001084 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af02      	add	r7, sp, #8
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	460b      	mov	r3, r1
 8001090:	71bb      	strb	r3, [r7, #6]
 8001092:	4613      	mov	r3, r2
 8001094:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 100);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	b299      	uxth	r1, r3
 80010a2:	f107 020c 	add.w	r2, r7, #12
 80010a6:	2364      	movs	r3, #100	; 0x64
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2302      	movs	r3, #2
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <ssd1306_I2C_Write+0x38>)
 80010ae:	f001 fc55 	bl	800295c <HAL_I2C_Master_Transmit>
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000600 	.word	0x20000600

080010c0 <__io_putchar>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USER CODE BEGIN PV */
// printf() function
int __io_putchar(int ch)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint8_t temp = ch;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart1, &temp, 1, HAL_MAX_DELAY);
 80010ce:	f107 010f 	add.w	r1, r7, #15
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	2201      	movs	r2, #1
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <__io_putchar+0x28>)
 80010da:	f003 fdcb 	bl	8004c74 <HAL_UART_Transmit>
  return ch;
 80010de:	687b      	ldr	r3, [r7, #4]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000069c 	.word	0x2000069c

080010ec <max30102_plot>:


// Override plot function
void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
    // printf("ir:%u\n", ir_sample);                  // Print IR only
    // printf("r:%u\n", red_sample);                  // Print Red only
    printf("ir:%lu,r:%lu\n", ir_sample, red_sample);    // Print IR and Red
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4814      	ldr	r0, [pc, #80]	; (800114c <max30102_plot+0x60>)
 80010fc:	f004 fd64 	bl	8005bc8 <iprintf>

    if(ir_sample < 3000)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001106:	4293      	cmp	r3, r2
 8001108:	d814      	bhi.n	8001134 <max30102_plot+0x48>
    {
    	SSD1306_GotoXY (0,0);
 800110a:	2100      	movs	r1, #0
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fe43 	bl	8000d98 <SSD1306_GotoXY>
    	SSD1306_Puts ("Hay dat", &Font_11x18, 1);
 8001112:	2201      	movs	r2, #1
 8001114:	490e      	ldr	r1, [pc, #56]	; (8001150 <max30102_plot+0x64>)
 8001116:	480f      	ldr	r0, [pc, #60]	; (8001154 <max30102_plot+0x68>)
 8001118:	f7ff fed4 	bl	8000ec4 <SSD1306_Puts>
    	SSD1306_GotoXY (0, 30);
 800111c:	211e      	movs	r1, #30
 800111e:	2000      	movs	r0, #0
 8001120:	f7ff fe3a 	bl	8000d98 <SSD1306_GotoXY>
    	SSD1306_Puts ("ngon tay", &Font_11x18, 1);
 8001124:	2201      	movs	r2, #1
 8001126:	490a      	ldr	r1, [pc, #40]	; (8001150 <max30102_plot+0x64>)
 8001128:	480b      	ldr	r0, [pc, #44]	; (8001158 <max30102_plot+0x6c>)
 800112a:	f7ff fecb 	bl	8000ec4 <SSD1306_Puts>
    	SSD1306_UpdateScreen();
 800112e:	f7ff fd8f 	bl	8000c50 <SSD1306_UpdateScreen>
    {
        SSD1306_Clear();
        SSD1306_UpdateScreen();
    	SSD1306_Println("%lu", ir_sample);
    }
}
 8001132:	e007      	b.n	8001144 <max30102_plot+0x58>
        SSD1306_Clear();
 8001134:	f7ff feeb 	bl	8000f0e <SSD1306_Clear>
        SSD1306_UpdateScreen();
 8001138:	f7ff fd8a 	bl	8000c50 <SSD1306_UpdateScreen>
    	SSD1306_Println("%lu", ir_sample);
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	4807      	ldr	r0, [pc, #28]	; (800115c <max30102_plot+0x70>)
 8001140:	f7ff feee 	bl	8000f20 <SSD1306_Println>
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	08007d40 	.word	0x08007d40
 8001150:	20000000 	.word	0x20000000
 8001154:	08007d50 	.word	0x08007d50
 8001158:	08007d58 	.word	0x08007d58
 800115c:	08007d64 	.word	0x08007d64

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001166:	f000 ff53 	bl	8002010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116a:	f000 f863 	bl	8001234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116e:	f000 f98f 	bl	8001490 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001172:	f000 f8bb 	bl	80012ec <MX_I2C1_Init>
  MX_USB_PCD_Init();
 8001176:	f000 f969 	bl	800144c <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 800117a:	f000 f93d 	bl	80013f8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800117e:	f000 f8e3 	bl	8001348 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Initiation
  max30102_init(&max30102, &hi2c1);
 8001182:	4928      	ldr	r1, [pc, #160]	; (8001224 <main+0xc4>)
 8001184:	4828      	ldr	r0, [pc, #160]	; (8001228 <main+0xc8>)
 8001186:	f000 fa20 	bl	80015ca <max30102_init>
  max30102_reset(&max30102);
 800118a:	4827      	ldr	r0, [pc, #156]	; (8001228 <main+0xc8>)
 800118c:	f000 fa94 	bl	80016b8 <max30102_reset>
  max30102_clear_fifo(&max30102);
 8001190:	4825      	ldr	r0, [pc, #148]	; (8001228 <main+0xc8>)
 8001192:	f000 fc5b 	bl	8001a4c <max30102_clear_fifo>
  max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 0, 7);
 8001196:	2307      	movs	r3, #7
 8001198:	2200      	movs	r2, #0
 800119a:	2103      	movs	r1, #3
 800119c:	4822      	ldr	r0, [pc, #136]	; (8001228 <main+0xc8>)
 800119e:	f000 fc1b 	bl	80019d8 <max30102_set_fifo_config>

  // Sensor settings
  max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 80011a2:	2101      	movs	r1, #1
 80011a4:	4820      	ldr	r0, [pc, #128]	; (8001228 <main+0xc8>)
 80011a6:	f000 fb7f 	bl	80018a8 <max30102_set_led_pulse_width>
  max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 80011aa:	2100      	movs	r1, #0
 80011ac:	481e      	ldr	r0, [pc, #120]	; (8001228 <main+0xc8>)
 80011ae:	f000 fb9e 	bl	80018ee <max30102_set_adc_resolution>
  max30102_set_sampling_rate(&max30102, max30102_sr_800);
 80011b2:	2104      	movs	r1, #4
 80011b4:	481c      	ldr	r0, [pc, #112]	; (8001228 <main+0xc8>)
 80011b6:	f000 fb58 	bl	800186a <max30102_set_sampling_rate>
  max30102_set_led_current_1(&max30102, 10);
 80011ba:	491c      	ldr	r1, [pc, #112]	; (800122c <main+0xcc>)
 80011bc:	481a      	ldr	r0, [pc, #104]	; (8001228 <main+0xc8>)
 80011be:	f000 fbbb 	bl	8001938 <max30102_set_led_current_1>
  max30102_set_led_current_2(&max30102, 10);
 80011c2:	491a      	ldr	r1, [pc, #104]	; (800122c <main+0xcc>)
 80011c4:	4818      	ldr	r0, [pc, #96]	; (8001228 <main+0xc8>)
 80011c6:	f000 fbdf 	bl	8001988 <max30102_set_led_current_2>

  // Enter SpO2 mode
  max30102_set_mode(&max30102, max30102_spo2);
 80011ca:	2103      	movs	r1, #3
 80011cc:	4816      	ldr	r0, [pc, #88]	; (8001228 <main+0xc8>)
 80011ce:	f000 fb26 	bl	800181e <max30102_set_mode>
  //max30102_set_a_full(&max30102, 1);
  max30102_set_ppg_rdy(&max30102, 1);
 80011d2:	2101      	movs	r1, #1
 80011d4:	4814      	ldr	r0, [pc, #80]	; (8001228 <main+0xc8>)
 80011d6:	f000 fa80 	bl	80016da <max30102_set_ppg_rdy>

  // Initiate 1 temperature measurement
  max30102_set_die_temp_en(&max30102, 1);
 80011da:	2101      	movs	r1, #1
 80011dc:	4812      	ldr	r0, [pc, #72]	; (8001228 <main+0xc8>)
 80011de:	f000 fabf 	bl	8001760 <max30102_set_die_temp_en>
  max30102_set_die_temp_rdy(&max30102, 1);
 80011e2:	2101      	movs	r1, #1
 80011e4:	4810      	ldr	r0, [pc, #64]	; (8001228 <main+0xc8>)
 80011e6:	f000 faa3 	bl	8001730 <max30102_set_die_temp_rdy>

  uint8_t en_reg[2] = {0};
 80011ea:	2300      	movs	r3, #0
 80011ec:	80bb      	strh	r3, [r7, #4]
  max30102_read(&max30102, 0x00, en_reg, 1);
 80011ee:	1d3a      	adds	r2, r7, #4
 80011f0:	2301      	movs	r3, #1
 80011f2:	2100      	movs	r1, #0
 80011f4:	480c      	ldr	r0, [pc, #48]	; (8001228 <main+0xc8>)
 80011f6:	f000 fa3a 	bl	800166e <max30102_read>
  SSD1306_Init();
 80011fa:	f7ff fc65 	bl	8000ac8 <SSD1306_Init>
  HAL_Delay(1000);
 80011fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001202:	f000 ff67 	bl	80020d4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    if (max30102_has_interrupt(&max30102))
 8001206:	4808      	ldr	r0, [pc, #32]	; (8001228 <main+0xc8>)
 8001208:	f000 facf 	bl	80017aa <max30102_has_interrupt>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f9      	beq.n	8001206 <main+0xa6>
	    {
		      max30102_interrupt_handler(&max30102);
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <main+0xc8>)
 8001214:	f000 fad5 	bl	80017c2 <max30102_interrupt_handler>
		      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <main+0xd0>)
 800121e:	f001 fa27 	bl	8002670 <HAL_GPIO_TogglePin>
	    if (max30102_has_interrupt(&max30102))
 8001222:	e7f0      	b.n	8001206 <main+0xa6>
 8001224:	20000600 	.word	0x20000600
 8001228:	200009d4 	.word	0x200009d4
 800122c:	41200000 	.word	0x41200000
 8001230:	40011000 	.word	0x40011000

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	; 0x50
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123e:	2228      	movs	r2, #40	; 0x28
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f004 fd36 	bl	8005cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001264:	2301      	movs	r3, #1
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001272:	2301      	movs	r3, #1
 8001274:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001276:	2302      	movs	r3, #2
 8001278:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800127e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001280:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001284:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800128a:	4618      	mov	r0, r3
 800128c:	f002 fc82 	bl	8003b94 <HAL_RCC_OscConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001296:	f000 f993 	bl	80015c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129a:	230f      	movs	r3, #15
 800129c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129e:	2302      	movs	r3, #2
 80012a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012a6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2101      	movs	r1, #1
 80012b6:	4618      	mov	r0, r3
 80012b8:	f002 feee 	bl	8004098 <HAL_RCC_ClockConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012c2:	f000 f97d 	bl	80015c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012c6:	2310      	movs	r3, #16
 80012c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80012ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ce:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 f86e 	bl	80043b4 <HAL_RCCEx_PeriphCLKConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012de:	f000 f96f 	bl	80015c0 <Error_Handler>
  }
}
 80012e2:	bf00      	nop
 80012e4:	3750      	adds	r7, #80	; 0x50
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_I2C1_Init+0x50>)
 80012f2:	4a13      	ldr	r2, [pc, #76]	; (8001340 <MX_I2C1_Init+0x54>)
 80012f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_I2C1_Init+0x50>)
 80012f8:	4a12      	ldr	r2, [pc, #72]	; (8001344 <MX_I2C1_Init+0x58>)
 80012fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_I2C1_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_I2C1_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_I2C1_Init+0x50>)
 800130a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <MX_I2C1_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_I2C1_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <MX_I2C1_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_I2C1_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_I2C1_Init+0x50>)
 800132a:	f001 f9d3 	bl	80026d4 <HAL_I2C_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001334:	f000 f944 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000600 	.word	0x20000600
 8001340:	40005400 	.word	0x40005400
 8001344:	00061a80 	.word	0x00061a80

08001348 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134e:	f107 0320 	add.w	r3, r7, #32
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
 8001366:	615a      	str	r2, [r3, #20]
 8001368:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <MX_TIM2_Init+0xac>)
 800136c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001370:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <MX_TIM2_Init+0xac>)
 8001374:	2201      	movs	r2, #1
 8001376:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <MX_TIM2_Init+0xac>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <MX_TIM2_Init+0xac>)
 8001380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001384:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <MX_TIM2_Init+0xac>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <MX_TIM2_Init+0xac>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001392:	4818      	ldr	r0, [pc, #96]	; (80013f4 <MX_TIM2_Init+0xac>)
 8001394:	f003 f8c4 	bl	8004520 <HAL_TIM_PWM_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800139e:	f000 f90f 	bl	80015c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013aa:	f107 0320 	add.w	r3, r7, #32
 80013ae:	4619      	mov	r1, r3
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <MX_TIM2_Init+0xac>)
 80013b2:	f003 fbb1 	bl	8004b18 <HAL_TIMEx_MasterConfigSynchronization>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80013bc:	f000 f900 	bl	80015c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c0:	2360      	movs	r3, #96	; 0x60
 80013c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	220c      	movs	r2, #12
 80013d4:	4619      	mov	r1, r3
 80013d6:	4807      	ldr	r0, [pc, #28]	; (80013f4 <MX_TIM2_Init+0xac>)
 80013d8:	f003 f8f2 	bl	80045c0 <HAL_TIM_PWM_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80013e2:	f000 f8ed 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013e6:	4803      	ldr	r0, [pc, #12]	; (80013f4 <MX_TIM2_Init+0xac>)
 80013e8:	f000 fc58 	bl	8001c9c <HAL_TIM_MspPostInit>

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000654 	.word	0x20000654

080013f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <MX_USART1_UART_Init+0x50>)
 8001400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001430:	f003 fbd0 	bl	8004bd4 <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800143a:	f000 f8c1 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000069c 	.word	0x2000069c
 8001448:	40013800 	.word	0x40013800

0800144c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001450:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <MX_USB_PCD_Init+0x3c>)
 8001452:	4a0e      	ldr	r2, [pc, #56]	; (800148c <MX_USB_PCD_Init+0x40>)
 8001454:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_USB_PCD_Init+0x3c>)
 8001458:	2208      	movs	r2, #8
 800145a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <MX_USB_PCD_Init+0x3c>)
 800145e:	2202      	movs	r2, #2
 8001460:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_USB_PCD_Init+0x3c>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <MX_USB_PCD_Init+0x3c>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_USB_PCD_Init+0x3c>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <MX_USB_PCD_Init+0x3c>)
 8001476:	f002 fa8e 	bl	8003996 <HAL_PCD_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001480:	f000 f89e 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200006e4 	.word	0x200006e4
 800148c:	40005c00 	.word	0x40005c00

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a4:	4b34      	ldr	r3, [pc, #208]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a33      	ldr	r2, [pc, #204]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014aa:	f043 0310 	orr.w	r3, r3, #16
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b31      	ldr	r3, [pc, #196]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014bc:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a2d      	ldr	r2, [pc, #180]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014c2:	f043 0320 	orr.w	r3, r3, #32
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a27      	ldr	r2, [pc, #156]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b25      	ldr	r3, [pc, #148]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a21      	ldr	r2, [pc, #132]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014f2:	f043 0308 	orr.w	r3, r3, #8
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800150a:	481c      	ldr	r0, [pc, #112]	; (800157c <MX_GPIO_Init+0xec>)
 800150c:	f001 f898 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2302      	movs	r3, #2
 8001520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0310 	add.w	r3, r7, #16
 8001526:	4619      	mov	r1, r3
 8001528:	4814      	ldr	r0, [pc, #80]	; (800157c <MX_GPIO_Init+0xec>)
 800152a:	f000 ff05 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 800152e:	2304      	movs	r3, #4
 8001530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <MX_GPIO_Init+0xf0>)
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	4619      	mov	r1, r3
 8001540:	4810      	ldr	r0, [pc, #64]	; (8001584 <MX_GPIO_Init+0xf4>)
 8001542:	f000 fef9 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001546:	2330      	movs	r3, #48	; 0x30
 8001548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154e:	2301      	movs	r3, #1
 8001550:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4619      	mov	r1, r3
 8001558:	480a      	ldr	r0, [pc, #40]	; (8001584 <MX_GPIO_Init+0xf4>)
 800155a:	f000 feed 	bl	8002338 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	2008      	movs	r0, #8
 8001564:	f000 feb1 	bl	80022ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001568:	2008      	movs	r0, #8
 800156a:	f000 feca 	bl	8002302 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800156e:	bf00      	nop
 8001570:	3720      	adds	r7, #32
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000
 800157c:	40011000 	.word	0x40011000
 8001580:	10210000 	.word	0x10210000
 8001584:	40010800 	.word	0x40010800

08001588 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	2b04      	cmp	r3, #4
 8001596:	d10b      	bne.n	80015b0 <HAL_GPIO_EXTI_Callback+0x28>
	{
		max30102_on_interrupt(&max30102);
 8001598:	4807      	ldr	r0, [pc, #28]	; (80015b8 <HAL_GPIO_EXTI_Callback+0x30>)
 800159a:	f000 f8f9 	bl	8001790 <max30102_on_interrupt>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800159e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <HAL_GPIO_EXTI_Callback+0x34>)
 80015a4:	f001 f864 	bl	8002670 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80015a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015ac:	f000 fd92 	bl	80020d4 <HAL_Delay>
	}
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200009d4 	.word	0x200009d4
 80015bc:	40011000 	.word	0x40011000

080015c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c4:	b672      	cpsid	i
}
 80015c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <Error_Handler+0x8>

080015ca <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f004 fb62 	bl	8005cb4 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3384      	adds	r3, #132	; 0x84
 80015f4:	2280      	movs	r2, #128	; 0x80
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 fb5b 	bl	8005cb4 <memset>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b088      	sub	sp, #32
 800160a:	af02      	add	r7, sp, #8
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	461a      	mov	r2, r3
 8001612:	460b      	mov	r3, r1
 8001614:	72fb      	strb	r3, [r7, #11]
 8001616:	4613      	mov	r3, r2
 8001618:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 800161a:	893b      	ldrh	r3, [r7, #8]
 800161c:	3301      	adds	r3, #1
 800161e:	4618      	mov	r0, r3
 8001620:	f003 fd08 	bl	8005034 <malloc>
 8001624:	4603      	mov	r3, r0
 8001626:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	7afa      	ldrb	r2, [r7, #11]
 800162c:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d009      	beq.n	8001648 <max30102_write+0x42>
 8001634:	893b      	ldrh	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	893a      	ldrh	r2, [r7, #8]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	4618      	mov	r0, r3
 8001644:	f004 fbd2 	bl	8005dec <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	893b      	ldrh	r3, [r7, #8]
 800164e:	3301      	adds	r3, #1
 8001650:	b29b      	uxth	r3, r3
 8001652:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001656:	9200      	str	r2, [sp, #0]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	21ae      	movs	r1, #174	; 0xae
 800165c:	f001 f97e 	bl	800295c <HAL_I2C_Master_Transmit>
    free(payload);
 8001660:	6978      	ldr	r0, [r7, #20]
 8001662:	f003 fcef 	bl	8005044 <free>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b088      	sub	sp, #32
 8001672:	af02      	add	r7, sp, #8
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	461a      	mov	r2, r3
 800167a:	460b      	mov	r3, r1
 800167c:	72fb      	strb	r3, [r7, #11]
 800167e:	4613      	mov	r3, r2
 8001680:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8001682:	7afb      	ldrb	r3, [r7, #11]
 8001684:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	f107 0217 	add.w	r2, r7, #23
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2301      	movs	r3, #1
 8001696:	21ae      	movs	r1, #174	; 0xae
 8001698:	f001 f960 	bl	800295c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6818      	ldr	r0, [r3, #0]
 80016a0:	893b      	ldrh	r3, [r7, #8]
 80016a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016a6:	9200      	str	r2, [sp, #0]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	21ae      	movs	r1, #174	; 0xae
 80016ac:	f001 fa54 	bl	8002b58 <HAL_I2C_Master_Receive>
}
 80016b0:	bf00      	nop
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 80016c0:	2340      	movs	r3, #64	; 0x40
 80016c2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 80016c4:	f107 020f 	add.w	r2, r7, #15
 80016c8:	2301      	movs	r3, #1
 80016ca:	2109      	movs	r1, #9
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff9a 	bl	8001606 <max30102_write>
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <max30102_set_ppg_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_ppg_rdy(max30102_t *obj, uint8_t enable)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 80016ea:	f107 020f 	add.w	r2, r7, #15
 80016ee:	2301      	movs	r3, #1
 80016f0:	2102      	movs	r1, #2
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ffbb 	bl	800166e <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_PPG_RDY);
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_PPG_RDY);
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	019b      	lsls	r3, r3, #6
 8001706:	b25b      	sxtb	r3, r3
 8001708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800170c:	b25a      	sxtb	r2, r3
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	b25b      	sxtb	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	b25b      	sxtb	r3, r3
 8001716:	b2db      	uxtb	r3, r3
 8001718:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800171a:	f107 020f 	add.w	r2, r7, #15
 800171e:	2301      	movs	r3, #1
 8001720:	2102      	movs	r1, #2
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ff6f 	bl	8001606 <max30102_write>
}
 8001728:	bf00      	nop
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	b2db      	uxtb	r3, r3
 8001748:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 800174a:	f107 020f 	add.w	r2, r7, #15
 800174e:	2301      	movs	r3, #1
 8001750:	2103      	movs	r1, #3
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff57 	bl	8001606 <max30102_write>
}
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	b2db      	uxtb	r3, r3
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 800177a:	f107 020f 	add.w	r2, r7, #15
 800177e:	2301      	movs	r3, #1
 8001780:	2121      	movs	r1, #33	; 0x21
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff ff3f 	bl	8001606 <max30102_write>
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b084      	sub	sp, #16
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 80017ca:	2300      	movs	r3, #0
 80017cc:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 80017ce:	f107 020c 	add.w	r2, r7, #12
 80017d2:	2302      	movs	r3, #2
 80017d4:	2100      	movs	r1, #0
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ff49 	bl	800166e <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 80017dc:	7b3b      	ldrb	r3, [r7, #12]
 80017de:	09db      	lsrs	r3, r3, #7
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f94d 	bl	8001a8a <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 80017f0:	7b7b      	ldrb	r3, [r7, #13]
 80017f2:	085b      	lsrs	r3, r3, #1
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d007      	beq.n	800180e <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 80017fe:	f107 020a 	add.w	r2, r7, #10
 8001802:	f107 030b 	add.w	r3, r7, #11
 8001806:	4619      	mov	r1, r3
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f9a5 	bl	8001b58 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	460b      	mov	r3, r1
 8001828:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 800182a:	f107 020f 	add.w	r2, r7, #15
 800182e:	2301      	movs	r3, #1
 8001830:	2109      	movs	r1, #9
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ff1b 	bl	800166e <max30102_read>
    config = (config & 0xf8) | mode;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	b25b      	sxtb	r3, r3
 800183c:	f023 0307 	bic.w	r3, r3, #7
 8001840:	b25a      	sxtb	r2, r3
 8001842:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001846:	4313      	orrs	r3, r2
 8001848:	b25b      	sxtb	r3, r3
 800184a:	b2db      	uxtb	r3, r3
 800184c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 800184e:	f107 020f 	add.w	r2, r7, #15
 8001852:	2301      	movs	r3, #1
 8001854:	2109      	movs	r1, #9
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff fed5 	bl	8001606 <max30102_write>
    max30102_clear_fifo(obj);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f8f5 	bl	8001a4c <max30102_clear_fifo>
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	460b      	mov	r3, r1
 8001874:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001876:	f107 020f 	add.w	r2, r7, #15
 800187a:	2301      	movs	r3, #1
 800187c:	210a      	movs	r1, #10
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fef5 	bl	800166e <max30102_read>
    config = (config & 0x63) << MAX30102_SPO2_SR;
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800188e:	b2db      	uxtb	r3, r3
 8001890:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001892:	f107 020f 	add.w	r2, r7, #15
 8001896:	2301      	movs	r3, #1
 8001898:	210a      	movs	r1, #10
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff feb3 	bl	8001606 <max30102_write>
}
 80018a0:	bf00      	nop
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80018b4:	f107 020f 	add.w	r2, r7, #15
 80018b8:	2301      	movs	r3, #1
 80018ba:	210a      	movs	r1, #10
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fed6 	bl	800166e <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80018ca:	b25a      	sxtb	r2, r3
 80018cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80018d8:	f107 020f 	add.w	r2, r7, #15
 80018dc:	2301      	movs	r3, #1
 80018de:	210a      	movs	r1, #10
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff fe90 	bl	8001606 <max30102_write>
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80018fa:	f107 020f 	add.w	r2, r7, #15
 80018fe:	2301      	movs	r3, #1
 8001900:	210a      	movs	r1, #10
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff feb3 	bl	800166e <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	b25b      	sxtb	r3, r3
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	b25a      	sxtb	r2, r3
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	015b      	lsls	r3, r3, #5
 8001916:	b25b      	sxtb	r3, r3
 8001918:	4313      	orrs	r3, r2
 800191a:	b25b      	sxtb	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001920:	f107 020f 	add.w	r2, r7, #15
 8001924:	2301      	movs	r3, #1
 8001926:	210a      	movs	r1, #10
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff fe6c 	bl	8001606 <max30102_write>
}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8001942:	6838      	ldr	r0, [r7, #0]
 8001944:	f7fe fd70 	bl	8000428 <__aeabi_f2d>
 8001948:	a30d      	add	r3, pc, #52	; (adr r3, 8001980 <max30102_set_led_current_1+0x48>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe feed 	bl	800072c <__aeabi_ddiv>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff f895 	bl	8000a88 <__aeabi_d2uiz>
 800195e:	4603      	mov	r3, r0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8001964:	f107 020f 	add.w	r2, r7, #15
 8001968:	2301      	movs	r3, #1
 800196a:	210c      	movs	r1, #12
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff fe4a 	bl	8001606 <max30102_write>
}
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	f3af 8000 	nop.w
 8001980:	9999999a 	.word	0x9999999a
 8001984:	3fc99999 	.word	0x3fc99999

08001988 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8001992:	6838      	ldr	r0, [r7, #0]
 8001994:	f7fe fd48 	bl	8000428 <__aeabi_f2d>
 8001998:	a30d      	add	r3, pc, #52	; (adr r3, 80019d0 <max30102_set_led_current_2+0x48>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fec5 	bl	800072c <__aeabi_ddiv>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f7ff f86d 	bl	8000a88 <__aeabi_d2uiz>
 80019ae:	4603      	mov	r3, r0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 80019b4:	f107 020f 	add.w	r2, r7, #15
 80019b8:	2301      	movs	r3, #1
 80019ba:	210d      	movs	r1, #13
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff fe22 	bl	8001606 <max30102_write>
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	f3af 8000 	nop.w
 80019d0:	9999999a 	.word	0x9999999a
 80019d4:	3fc99999 	.word	0x3fc99999

080019d8 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	4608      	mov	r0, r1
 80019e2:	4611      	mov	r1, r2
 80019e4:	461a      	mov	r2, r3
 80019e6:	4603      	mov	r3, r0
 80019e8:	70fb      	strb	r3, [r7, #3]
 80019ea:	460b      	mov	r3, r1
 80019ec:	70bb      	strb	r3, [r7, #2]
 80019ee:	4613      	mov	r3, r2
 80019f0:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 80019f2:	2300      	movs	r3, #0
 80019f4:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	015b      	lsls	r3, r3, #5
 80019fa:	b25a      	sxtb	r2, r3
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	b25b      	sxtb	r3, r3
 8001a00:	4313      	orrs	r3, r2
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8001a08:	78bb      	ldrb	r3, [r7, #2]
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	b25b      	sxtb	r3, r3
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	b25a      	sxtb	r2, r3
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8001a20:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001a24:	f003 030f 	and.w	r3, r3, #15
 8001a28:	b25a      	sxtb	r2, r3
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	b25b      	sxtb	r3, r3
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	b25b      	sxtb	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 8001a36:	f107 020f 	add.w	r2, r7, #15
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	2108      	movs	r1, #8
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fde1 	bl	8001606 <max30102_write>
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8001a58:	f107 020f 	add.w	r2, r7, #15
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	2104      	movs	r1, #4
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff fdd0 	bl	8001606 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 8001a66:	f107 020f 	add.w	r2, r7, #15
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	2106      	movs	r1, #6
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff fdc9 	bl	8001606 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8001a74:	f107 020f 	add.w	r2, r7, #15
 8001a78:	2303      	movs	r3, #3
 8001a7a:	2105      	movs	r1, #5
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff fdc2 	bl	8001606 <max30102_write>
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b088      	sub	sp, #32
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	74fb      	strb	r3, [r7, #19]
 8001a96:	2300      	movs	r3, #0
 8001a98:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 8001a9a:	f107 0213 	add.w	r2, r7, #19
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fde3 	bl	800166e <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8001aa8:	f107 0212 	add.w	r2, r7, #18
 8001aac:	2301      	movs	r3, #1
 8001aae:	2106      	movs	r1, #6
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fddc 	bl	800166e <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8001ab6:	7cfa      	ldrb	r2, [r7, #19]
 8001ab8:	7cbb      	ldrb	r3, [r7, #18]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8001ac0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	dc03      	bgt.n	8001ad0 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8001ac8:	7ffb      	ldrb	r3, [r7, #31]
 8001aca:	3320      	adds	r3, #32
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	77bb      	strb	r3, [r7, #30]
 8001ad4:	e035      	b.n	8001b42 <max30102_read_fifo+0xb8>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 8001ad6:	f107 020c 	add.w	r2, r7, #12
 8001ada:	2306      	movs	r3, #6
 8001adc:	2107      	movs	r1, #7
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fdc5 	bl	800166e <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8001ae4:	7b3b      	ldrb	r3, [r7, #12]
 8001ae6:	041b      	lsls	r3, r3, #16
 8001ae8:	461a      	mov	r2, r3
 8001aea:	7b7b      	ldrb	r3, [r7, #13]
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	4313      	orrs	r3, r2
 8001af0:	7bba      	ldrb	r2, [r7, #14]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001af8:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	041b      	lsls	r3, r3, #16
 8001afe:	461a      	mov	r2, r3
 8001b00:	7c3b      	ldrb	r3, [r7, #16]
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	4313      	orrs	r3, r2
 8001b06:	7c7a      	ldrb	r2, [r7, #17]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001b0e:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 8001b10:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 8001b1e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	3320      	adds	r3, #32
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 8001b2e:	6979      	ldr	r1, [r7, #20]
 8001b30:	69b8      	ldr	r0, [r7, #24]
 8001b32:	f7ff fadb 	bl	80010ec <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 8001b36:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	77bb      	strb	r3, [r7, #30]
 8001b42:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8001b46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	dbc3      	blt.n	8001ad6 <max30102_read_fifo+0x4c>
    }
}
 8001b4e:	bf00      	nop
 8001b50:	bf00      	nop
 8001b52:	3720      	adds	r7, #32
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 8001b64:	2301      	movs	r3, #1
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	211f      	movs	r1, #31
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f7ff fd7f 	bl	800166e <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8001b70:	2301      	movs	r3, #1
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	2120      	movs	r1, #32
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f7ff fd79 	bl	800166e <max30102_read>
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_MspInit+0x5c>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <HAL_MspInit+0x5c>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6193      	str	r3, [r2, #24]
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_MspInit+0x5c>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_MspInit+0x5c>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <HAL_MspInit+0x5c>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bac:	61d3      	str	r3, [r2, #28]
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_MspInit+0x5c>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_MspInit+0x60>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_MspInit+0x60>)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010000 	.word	0x40010000

08001be8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a15      	ldr	r2, [pc, #84]	; (8001c58 <HAL_I2C_MspInit+0x70>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d123      	bne.n	8001c50 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_I2C_MspInit+0x74>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a13      	ldr	r2, [pc, #76]	; (8001c5c <HAL_I2C_MspInit+0x74>)
 8001c0e:	f043 0308 	orr.w	r3, r3, #8
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_I2C_MspInit+0x74>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c20:	23c0      	movs	r3, #192	; 0xc0
 8001c22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c24:	2312      	movs	r3, #18
 8001c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	4619      	mov	r1, r3
 8001c32:	480b      	ldr	r0, [pc, #44]	; (8001c60 <HAL_I2C_MspInit+0x78>)
 8001c34:	f000 fb80 	bl	8002338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_I2C_MspInit+0x74>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <HAL_I2C_MspInit+0x74>)
 8001c3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c42:	61d3      	str	r3, [r2, #28]
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_I2C_MspInit+0x74>)
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c50:	bf00      	nop
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40005400 	.word	0x40005400
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010c00 	.word	0x40010c00

08001c64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c74:	d10b      	bne.n	8001c8e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <HAL_TIM_PWM_MspInit+0x34>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <HAL_TIM_PWM_MspInit+0x34>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	61d3      	str	r3, [r2, #28]
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_TIM_PWM_MspInit+0x34>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	40021000 	.word	0x40021000

08001c9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cba:	d117      	bne.n	8001cec <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_TIM_MspPostInit+0x58>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a0c      	ldr	r2, [pc, #48]	; (8001cf4 <HAL_TIM_MspPostInit+0x58>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_TIM_MspPostInit+0x58>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4804      	ldr	r0, [pc, #16]	; (8001cf8 <HAL_TIM_MspPostInit+0x5c>)
 8001ce8:	f000 fb26 	bl	8002338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001cec:	bf00      	nop
 8001cee:	3720      	adds	r7, #32
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40010800 	.word	0x40010800

08001cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_UART_MspInit+0x8c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d131      	bne.n	8001d80 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4a1a      	ldr	r2, [pc, #104]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d26:	6193      	str	r3, [r2, #24]
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d34:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	f107 0310 	add.w	r3, r7, #16
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480b      	ldr	r0, [pc, #44]	; (8001d90 <HAL_UART_MspInit+0x94>)
 8001d62:	f000 fae9 	bl	8002338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f107 0310 	add.w	r3, r7, #16
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <HAL_UART_MspInit+0x94>)
 8001d7c:	f000 fadc 	bl	8002338 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d80:	bf00      	nop
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40013800 	.word	0x40013800
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40010800 	.word	0x40010800

08001d94 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_PCD_MspInit+0x34>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d10b      	bne.n	8001dbe <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_PCD_MspInit+0x38>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <HAL_PCD_MspInit+0x38>)
 8001dac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001db0:	61d3      	str	r3, [r2, #28]
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_PCD_MspInit+0x38>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	40005c00 	.word	0x40005c00
 8001dcc:	40021000 	.word	0x40021000

08001dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <NMI_Handler+0x4>

08001dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <HardFault_Handler+0x4>

08001ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <MemManage_Handler+0x4>

08001de2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <BusFault_Handler+0x4>

08001de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <UsageFault_Handler+0x4>

08001dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr

08001e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e16:	f000 f941 	bl	800209c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	max30102_on_interrupt(&max30102);
 8001e24:	4803      	ldr	r0, [pc, #12]	; (8001e34 <EXTI2_IRQHandler+0x14>)
 8001e26:	f7ff fcb3 	bl	8001790 <max30102_on_interrupt>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8001e2a:	2004      	movs	r0, #4
 8001e2c:	f000 fc3a 	bl	80026a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200009d4 	.word	0x200009d4

08001e38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return 1;
 8001e3c:	2301      	movs	r3, #1
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <_kill>:

int _kill(int pid, int sig)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e50:	f003 ff92 	bl	8005d78 <__errno>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2216      	movs	r2, #22
 8001e58:	601a      	str	r2, [r3, #0]
  return -1;
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <_exit>:

void _exit (int status)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffe7 	bl	8001e46 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e78:	e7fe      	b.n	8001e78 <_exit+0x12>

08001e7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	e00a      	b.n	8001ea2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e8c:	f3af 8000 	nop.w
 8001e90:	4601      	mov	r1, r0
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	60ba      	str	r2, [r7, #8]
 8001e98:	b2ca      	uxtb	r2, r1
 8001e9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	dbf0      	blt.n	8001e8c <_read+0x12>
  }

  return len;
 8001eaa:	687b      	ldr	r3, [r7, #4]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	e009      	b.n	8001eda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	60ba      	str	r2, [r7, #8]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f8f6 	bl	80010c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	dbf1      	blt.n	8001ec6 <_write+0x12>
  }
  return len;
 8001ee2:	687b      	ldr	r3, [r7, #4]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_close>:

int _close(int file)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f12:	605a      	str	r2, [r3, #4]
  return 0;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <_isatty>:

int _isatty(int file)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f28:	2301      	movs	r3, #1
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <_sbrk+0x5c>)
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <_sbrk+0x60>)
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f60:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <_sbrk+0x64>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <_sbrk+0x64>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <_sbrk+0x68>)
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d207      	bcs.n	8001f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f7c:	f003 fefc 	bl	8005d78 <__errno>
 8001f80:	4603      	mov	r3, r0
 8001f82:	220c      	movs	r2, #12
 8001f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	e009      	b.n	8001fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <_sbrk+0x64>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <_sbrk+0x64>)
 8001f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20005000 	.word	0x20005000
 8001fac:	00000400 	.word	0x00000400
 8001fb0:	20000adc 	.word	0x20000adc
 8001fb4:	20000c30 	.word	0x20000c30

08001fb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fc4:	f7ff fff8 	bl	8001fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fc8:	480b      	ldr	r0, [pc, #44]	; (8001ff8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fca:	490c      	ldr	r1, [pc, #48]	; (8001ffc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fcc:	4a0c      	ldr	r2, [pc, #48]	; (8002000 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd0:	e002      	b.n	8001fd8 <LoopCopyDataInit>

08001fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd6:	3304      	adds	r3, #4

08001fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fdc:	d3f9      	bcc.n	8001fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fde:	4a09      	ldr	r2, [pc, #36]	; (8002004 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fe0:	4c09      	ldr	r4, [pc, #36]	; (8002008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe4:	e001      	b.n	8001fea <LoopFillZerobss>

08001fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe8:	3204      	adds	r2, #4

08001fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fec:	d3fb      	bcc.n	8001fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fee:	f003 fec9 	bl	8005d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ff2:	f7ff f8b5 	bl	8001160 <main>
  bx lr
 8001ff6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ffc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002000:	08008e64 	.word	0x08008e64
  ldr r2, =_sbss
 8002004:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002008:	20000c30 	.word	0x20000c30

0800200c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC1_2_IRQHandler>
	...

08002010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_Init+0x28>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a07      	ldr	r2, [pc, #28]	; (8002038 <HAL_Init+0x28>)
 800201a:	f043 0310 	orr.w	r3, r3, #16
 800201e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002020:	2003      	movs	r0, #3
 8002022:	f000 f947 	bl	80022b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002026:	200f      	movs	r0, #15
 8002028:	f000 f808 	bl	800203c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800202c:	f7ff fdaa 	bl	8001b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40022000 	.word	0x40022000

0800203c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_InitTick+0x54>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_InitTick+0x58>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4619      	mov	r1, r3
 800204e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002052:	fbb3 f3f1 	udiv	r3, r3, r1
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f95f 	bl	800231e <HAL_SYSTICK_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e00e      	b.n	8002088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d80a      	bhi.n	8002086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002070:	2200      	movs	r2, #0
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f000 f927 	bl	80022ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800207c:	4a06      	ldr	r2, [pc, #24]	; (8002098 <HAL_InitTick+0x5c>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000008 	.word	0x20000008
 8002094:	20000010 	.word	0x20000010
 8002098:	2000000c 	.word	0x2000000c

0800209c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_IncTick+0x1c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_IncTick+0x20>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a03      	ldr	r2, [pc, #12]	; (80020bc <HAL_IncTick+0x20>)
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	20000010 	.word	0x20000010
 80020bc:	20000ae0 	.word	0x20000ae0

080020c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return uwTick;
 80020c4:	4b02      	ldr	r3, [pc, #8]	; (80020d0 <HAL_GetTick+0x10>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	20000ae0 	.word	0x20000ae0

080020d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff fff0 	bl	80020c0 <HAL_GetTick>
 80020e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d005      	beq.n	80020fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_Delay+0x44>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4413      	add	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020fa:	bf00      	nop
 80020fc:	f7ff ffe0 	bl	80020c0 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	429a      	cmp	r2, r3
 800210a:	d8f7      	bhi.n	80020fc <HAL_Delay+0x28>
  {
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000010 	.word	0x20000010

0800211c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002138:	4013      	ands	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800214c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214e:	4a04      	ldr	r2, [pc, #16]	; (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	60d3      	str	r3, [r2, #12]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <__NVIC_GetPriorityGrouping+0x18>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	f003 0307 	and.w	r3, r3, #7
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	2b00      	cmp	r3, #0
 8002190:	db0b      	blt.n	80021aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	4906      	ldr	r1, [pc, #24]	; (80021b4 <__NVIC_EnableIRQ+0x34>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	2001      	movs	r0, #1
 80021a2:	fa00 f202 	lsl.w	r2, r0, r2
 80021a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	; (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	; (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	f04f 32ff 	mov.w	r2, #4294967295
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4313      	orrs	r3, r2
         );
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	; 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002280:	d301      	bcc.n	8002286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002282:	2301      	movs	r3, #1
 8002284:	e00f      	b.n	80022a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <SysTick_Config+0x40>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228e:	210f      	movs	r1, #15
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	f7ff ff90 	bl	80021b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <SysTick_Config+0x40>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <SysTick_Config+0x40>)
 80022a0:	2207      	movs	r2, #7
 80022a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	e000e010 	.word	0xe000e010

080022b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff2d 	bl	800211c <__NVIC_SetPriorityGrouping>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022dc:	f7ff ff42 	bl	8002164 <__NVIC_GetPriorityGrouping>
 80022e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	6978      	ldr	r0, [r7, #20]
 80022e8:	f7ff ff90 	bl	800220c <NVIC_EncodePriority>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff5f 	bl	80021b8 <__NVIC_SetPriority>
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff35 	bl	8002180 <__NVIC_EnableIRQ>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ffa2 	bl	8002270 <SysTick_Config>
 800232c:	4603      	mov	r3, r0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002338:	b480      	push	{r7}
 800233a:	b08b      	sub	sp, #44	; 0x2c
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234a:	e169      	b.n	8002620 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800234c:	2201      	movs	r2, #1
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	429a      	cmp	r2, r3
 8002366:	f040 8158 	bne.w	800261a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4a9a      	ldr	r2, [pc, #616]	; (80025d8 <HAL_GPIO_Init+0x2a0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d05e      	beq.n	8002432 <HAL_GPIO_Init+0xfa>
 8002374:	4a98      	ldr	r2, [pc, #608]	; (80025d8 <HAL_GPIO_Init+0x2a0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d875      	bhi.n	8002466 <HAL_GPIO_Init+0x12e>
 800237a:	4a98      	ldr	r2, [pc, #608]	; (80025dc <HAL_GPIO_Init+0x2a4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d058      	beq.n	8002432 <HAL_GPIO_Init+0xfa>
 8002380:	4a96      	ldr	r2, [pc, #600]	; (80025dc <HAL_GPIO_Init+0x2a4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d86f      	bhi.n	8002466 <HAL_GPIO_Init+0x12e>
 8002386:	4a96      	ldr	r2, [pc, #600]	; (80025e0 <HAL_GPIO_Init+0x2a8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d052      	beq.n	8002432 <HAL_GPIO_Init+0xfa>
 800238c:	4a94      	ldr	r2, [pc, #592]	; (80025e0 <HAL_GPIO_Init+0x2a8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d869      	bhi.n	8002466 <HAL_GPIO_Init+0x12e>
 8002392:	4a94      	ldr	r2, [pc, #592]	; (80025e4 <HAL_GPIO_Init+0x2ac>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d04c      	beq.n	8002432 <HAL_GPIO_Init+0xfa>
 8002398:	4a92      	ldr	r2, [pc, #584]	; (80025e4 <HAL_GPIO_Init+0x2ac>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d863      	bhi.n	8002466 <HAL_GPIO_Init+0x12e>
 800239e:	4a92      	ldr	r2, [pc, #584]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d046      	beq.n	8002432 <HAL_GPIO_Init+0xfa>
 80023a4:	4a90      	ldr	r2, [pc, #576]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d85d      	bhi.n	8002466 <HAL_GPIO_Init+0x12e>
 80023aa:	2b12      	cmp	r3, #18
 80023ac:	d82a      	bhi.n	8002404 <HAL_GPIO_Init+0xcc>
 80023ae:	2b12      	cmp	r3, #18
 80023b0:	d859      	bhi.n	8002466 <HAL_GPIO_Init+0x12e>
 80023b2:	a201      	add	r2, pc, #4	; (adr r2, 80023b8 <HAL_GPIO_Init+0x80>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	08002433 	.word	0x08002433
 80023bc:	0800240d 	.word	0x0800240d
 80023c0:	0800241f 	.word	0x0800241f
 80023c4:	08002461 	.word	0x08002461
 80023c8:	08002467 	.word	0x08002467
 80023cc:	08002467 	.word	0x08002467
 80023d0:	08002467 	.word	0x08002467
 80023d4:	08002467 	.word	0x08002467
 80023d8:	08002467 	.word	0x08002467
 80023dc:	08002467 	.word	0x08002467
 80023e0:	08002467 	.word	0x08002467
 80023e4:	08002467 	.word	0x08002467
 80023e8:	08002467 	.word	0x08002467
 80023ec:	08002467 	.word	0x08002467
 80023f0:	08002467 	.word	0x08002467
 80023f4:	08002467 	.word	0x08002467
 80023f8:	08002467 	.word	0x08002467
 80023fc:	08002415 	.word	0x08002415
 8002400:	08002429 	.word	0x08002429
 8002404:	4a79      	ldr	r2, [pc, #484]	; (80025ec <HAL_GPIO_Init+0x2b4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800240a:	e02c      	b.n	8002466 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	623b      	str	r3, [r7, #32]
          break;
 8002412:	e029      	b.n	8002468 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	3304      	adds	r3, #4
 800241a:	623b      	str	r3, [r7, #32]
          break;
 800241c:	e024      	b.n	8002468 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	3308      	adds	r3, #8
 8002424:	623b      	str	r3, [r7, #32]
          break;
 8002426:	e01f      	b.n	8002468 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	330c      	adds	r3, #12
 800242e:	623b      	str	r3, [r7, #32]
          break;
 8002430:	e01a      	b.n	8002468 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d102      	bne.n	8002440 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800243a:	2304      	movs	r3, #4
 800243c:	623b      	str	r3, [r7, #32]
          break;
 800243e:	e013      	b.n	8002468 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d105      	bne.n	8002454 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002448:	2308      	movs	r3, #8
 800244a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	611a      	str	r2, [r3, #16]
          break;
 8002452:	e009      	b.n	8002468 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002454:	2308      	movs	r3, #8
 8002456:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	615a      	str	r2, [r3, #20]
          break;
 800245e:	e003      	b.n	8002468 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002460:	2300      	movs	r3, #0
 8002462:	623b      	str	r3, [r7, #32]
          break;
 8002464:	e000      	b.n	8002468 <HAL_GPIO_Init+0x130>
          break;
 8002466:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2bff      	cmp	r3, #255	; 0xff
 800246c:	d801      	bhi.n	8002472 <HAL_GPIO_Init+0x13a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	e001      	b.n	8002476 <HAL_GPIO_Init+0x13e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3304      	adds	r3, #4
 8002476:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2bff      	cmp	r3, #255	; 0xff
 800247c:	d802      	bhi.n	8002484 <HAL_GPIO_Init+0x14c>
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	e002      	b.n	800248a <HAL_GPIO_Init+0x152>
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	3b08      	subs	r3, #8
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	210f      	movs	r1, #15
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	401a      	ands	r2, r3
 800249c:	6a39      	ldr	r1, [r7, #32]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	431a      	orrs	r2, r3
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 80b1 	beq.w	800261a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024b8:	4b4d      	ldr	r3, [pc, #308]	; (80025f0 <HAL_GPIO_Init+0x2b8>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	4a4c      	ldr	r2, [pc, #304]	; (80025f0 <HAL_GPIO_Init+0x2b8>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6193      	str	r3, [r2, #24]
 80024c4:	4b4a      	ldr	r3, [pc, #296]	; (80025f0 <HAL_GPIO_Init+0x2b8>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024d0:	4a48      	ldr	r2, [pc, #288]	; (80025f4 <HAL_GPIO_Init+0x2bc>)
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	089b      	lsrs	r3, r3, #2
 80024d6:	3302      	adds	r3, #2
 80024d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	220f      	movs	r2, #15
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4013      	ands	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a40      	ldr	r2, [pc, #256]	; (80025f8 <HAL_GPIO_Init+0x2c0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d013      	beq.n	8002524 <HAL_GPIO_Init+0x1ec>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a3f      	ldr	r2, [pc, #252]	; (80025fc <HAL_GPIO_Init+0x2c4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00d      	beq.n	8002520 <HAL_GPIO_Init+0x1e8>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a3e      	ldr	r2, [pc, #248]	; (8002600 <HAL_GPIO_Init+0x2c8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d007      	beq.n	800251c <HAL_GPIO_Init+0x1e4>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a3d      	ldr	r2, [pc, #244]	; (8002604 <HAL_GPIO_Init+0x2cc>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d101      	bne.n	8002518 <HAL_GPIO_Init+0x1e0>
 8002514:	2303      	movs	r3, #3
 8002516:	e006      	b.n	8002526 <HAL_GPIO_Init+0x1ee>
 8002518:	2304      	movs	r3, #4
 800251a:	e004      	b.n	8002526 <HAL_GPIO_Init+0x1ee>
 800251c:	2302      	movs	r3, #2
 800251e:	e002      	b.n	8002526 <HAL_GPIO_Init+0x1ee>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <HAL_GPIO_Init+0x1ee>
 8002524:	2300      	movs	r3, #0
 8002526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002528:	f002 0203 	and.w	r2, r2, #3
 800252c:	0092      	lsls	r2, r2, #2
 800252e:	4093      	lsls	r3, r2
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002536:	492f      	ldr	r1, [pc, #188]	; (80025f4 <HAL_GPIO_Init+0x2bc>)
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	3302      	adds	r3, #2
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d006      	beq.n	800255e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002550:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	492c      	ldr	r1, [pc, #176]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	608b      	str	r3, [r1, #8]
 800255c:	e006      	b.n	800256c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800255e:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	43db      	mvns	r3, r3
 8002566:	4928      	ldr	r1, [pc, #160]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 8002568:	4013      	ands	r3, r2
 800256a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d006      	beq.n	8002586 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002578:	4b23      	ldr	r3, [pc, #140]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	4922      	ldr	r1, [pc, #136]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	60cb      	str	r3, [r1, #12]
 8002584:	e006      	b.n	8002594 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	43db      	mvns	r3, r3
 800258e:	491e      	ldr	r1, [pc, #120]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 8002590:	4013      	ands	r3, r2
 8002592:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d006      	beq.n	80025ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4918      	ldr	r1, [pc, #96]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
 80025ac:	e006      	b.n	80025bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	4914      	ldr	r1, [pc, #80]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d021      	beq.n	800260c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	490e      	ldr	r1, [pc, #56]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
 80025d4:	e021      	b.n	800261a <HAL_GPIO_Init+0x2e2>
 80025d6:	bf00      	nop
 80025d8:	10320000 	.word	0x10320000
 80025dc:	10310000 	.word	0x10310000
 80025e0:	10220000 	.word	0x10220000
 80025e4:	10210000 	.word	0x10210000
 80025e8:	10120000 	.word	0x10120000
 80025ec:	10110000 	.word	0x10110000
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40010000 	.word	0x40010000
 80025f8:	40010800 	.word	0x40010800
 80025fc:	40010c00 	.word	0x40010c00
 8002600:	40011000 	.word	0x40011000
 8002604:	40011400 	.word	0x40011400
 8002608:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_GPIO_Init+0x304>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	43db      	mvns	r3, r3
 8002614:	4909      	ldr	r1, [pc, #36]	; (800263c <HAL_GPIO_Init+0x304>)
 8002616:	4013      	ands	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	3301      	adds	r3, #1
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	fa22 f303 	lsr.w	r3, r2, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	f47f ae8e 	bne.w	800234c <HAL_GPIO_Init+0x14>
  }
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	372c      	adds	r7, #44	; 0x2c
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	40010400 	.word	0x40010400

08002640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
 800264c:	4613      	mov	r3, r2
 800264e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002650:	787b      	ldrb	r3, [r7, #1]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800265c:	e003      	b.n	8002666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800265e:	887b      	ldrh	r3, [r7, #2]
 8002660:	041a      	lsls	r2, r3, #16
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	611a      	str	r2, [r3, #16]
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4013      	ands	r3, r2
 8002688:	041a      	lsls	r2, r3, #16
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	43d9      	mvns	r1, r3
 800268e:	887b      	ldrh	r3, [r7, #2]
 8002690:	400b      	ands	r3, r1
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	611a      	str	r2, [r3, #16]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ba:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe ff60 	bl	8001588 <HAL_GPIO_EXTI_Callback>
  }
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40010400 	.word	0x40010400

080026d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e12b      	b.n	800293e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff fa74 	bl	8001be8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2224      	movs	r2, #36	; 0x24
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0201 	bic.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002726:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002736:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002738:	f001 fdf6 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
 800273c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4a81      	ldr	r2, [pc, #516]	; (8002948 <HAL_I2C_Init+0x274>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d807      	bhi.n	8002758 <HAL_I2C_Init+0x84>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4a80      	ldr	r2, [pc, #512]	; (800294c <HAL_I2C_Init+0x278>)
 800274c:	4293      	cmp	r3, r2
 800274e:	bf94      	ite	ls
 8002750:	2301      	movls	r3, #1
 8002752:	2300      	movhi	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	e006      	b.n	8002766 <HAL_I2C_Init+0x92>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4a7d      	ldr	r2, [pc, #500]	; (8002950 <HAL_I2C_Init+0x27c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	bf94      	ite	ls
 8002760:	2301      	movls	r3, #1
 8002762:	2300      	movhi	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0e7      	b.n	800293e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4a78      	ldr	r2, [pc, #480]	; (8002954 <HAL_I2C_Init+0x280>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0c9b      	lsrs	r3, r3, #18
 8002778:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	430a      	orrs	r2, r1
 800278c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4a6a      	ldr	r2, [pc, #424]	; (8002948 <HAL_I2C_Init+0x274>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d802      	bhi.n	80027a8 <HAL_I2C_Init+0xd4>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	3301      	adds	r3, #1
 80027a6:	e009      	b.n	80027bc <HAL_I2C_Init+0xe8>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	4a69      	ldr	r2, [pc, #420]	; (8002958 <HAL_I2C_Init+0x284>)
 80027b4:	fba2 2303 	umull	r2, r3, r2, r3
 80027b8:	099b      	lsrs	r3, r3, #6
 80027ba:	3301      	adds	r3, #1
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	495c      	ldr	r1, [pc, #368]	; (8002948 <HAL_I2C_Init+0x274>)
 80027d8:	428b      	cmp	r3, r1
 80027da:	d819      	bhi.n	8002810 <HAL_I2C_Init+0x13c>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1e59      	subs	r1, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ea:	1c59      	adds	r1, r3, #1
 80027ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027f0:	400b      	ands	r3, r1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_I2C_Init+0x138>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1e59      	subs	r1, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fbb1 f3f3 	udiv	r3, r1, r3
 8002804:	3301      	adds	r3, #1
 8002806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280a:	e051      	b.n	80028b0 <HAL_I2C_Init+0x1dc>
 800280c:	2304      	movs	r3, #4
 800280e:	e04f      	b.n	80028b0 <HAL_I2C_Init+0x1dc>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d111      	bne.n	800283c <HAL_I2C_Init+0x168>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1e58      	subs	r0, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6859      	ldr	r1, [r3, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	440b      	add	r3, r1
 8002826:	fbb0 f3f3 	udiv	r3, r0, r3
 800282a:	3301      	adds	r3, #1
 800282c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e012      	b.n	8002862 <HAL_I2C_Init+0x18e>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1e58      	subs	r0, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	0099      	lsls	r1, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002852:	3301      	adds	r3, #1
 8002854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002858:	2b00      	cmp	r3, #0
 800285a:	bf0c      	ite	eq
 800285c:	2301      	moveq	r3, #1
 800285e:	2300      	movne	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_Init+0x196>
 8002866:	2301      	movs	r3, #1
 8002868:	e022      	b.n	80028b0 <HAL_I2C_Init+0x1dc>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10e      	bne.n	8002890 <HAL_I2C_Init+0x1bc>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1e58      	subs	r0, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6859      	ldr	r1, [r3, #4]
 800287a:	460b      	mov	r3, r1
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	440b      	add	r3, r1
 8002880:	fbb0 f3f3 	udiv	r3, r0, r3
 8002884:	3301      	adds	r3, #1
 8002886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800288e:	e00f      	b.n	80028b0 <HAL_I2C_Init+0x1dc>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1e58      	subs	r0, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	0099      	lsls	r1, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a6:	3301      	adds	r3, #1
 80028a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	6809      	ldr	r1, [r1, #0]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69da      	ldr	r2, [r3, #28]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6911      	ldr	r1, [r2, #16]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68d2      	ldr	r2, [r2, #12]
 80028ea:	4311      	orrs	r1, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	000186a0 	.word	0x000186a0
 800294c:	001e847f 	.word	0x001e847f
 8002950:	003d08ff 	.word	0x003d08ff
 8002954:	431bde83 	.word	0x431bde83
 8002958:	10624dd3 	.word	0x10624dd3

0800295c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	461a      	mov	r2, r3
 8002968:	460b      	mov	r3, r1
 800296a:	817b      	strh	r3, [r7, #10]
 800296c:	4613      	mov	r3, r2
 800296e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002970:	f7ff fba6 	bl	80020c0 <HAL_GetTick>
 8002974:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b20      	cmp	r3, #32
 8002980:	f040 80e0 	bne.w	8002b44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2319      	movs	r3, #25
 800298a:	2201      	movs	r2, #1
 800298c:	4970      	ldr	r1, [pc, #448]	; (8002b50 <HAL_I2C_Master_Transmit+0x1f4>)
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fdcc 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800299a:	2302      	movs	r3, #2
 800299c:	e0d3      	b.n	8002b46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_I2C_Master_Transmit+0x50>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e0cc      	b.n	8002b46 <HAL_I2C_Master_Transmit+0x1ea>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d007      	beq.n	80029d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0201 	orr.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2221      	movs	r2, #33	; 0x21
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2210      	movs	r2, #16
 80029ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	893a      	ldrh	r2, [r7, #8]
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4a50      	ldr	r2, [pc, #320]	; (8002b54 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a14:	8979      	ldrh	r1, [r7, #10]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	6a3a      	ldr	r2, [r7, #32]
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 fc36 	bl	800328c <I2C_MasterRequestWrite>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e08d      	b.n	8002b46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a40:	e066      	b.n	8002b10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	6a39      	ldr	r1, [r7, #32]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fe8a 	bl	8003760 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00d      	beq.n	8002a6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d107      	bne.n	8002a6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e06b      	b.n	8002b46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	781a      	ldrb	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_I2C_Master_Transmit+0x188>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d017      	beq.n	8002ae4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	6a39      	ldr	r1, [r7, #32]
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fe81 	bl	80037f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00d      	beq.n	8002b10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d107      	bne.n	8002b0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e01a      	b.n	8002b46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d194      	bne.n	8002a42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e000      	b.n	8002b46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
  }
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	00100002 	.word	0x00100002
 8002b54:	ffff0000 	.word	0xffff0000

08002b58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08c      	sub	sp, #48	; 0x30
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	461a      	mov	r2, r3
 8002b64:	460b      	mov	r3, r1
 8002b66:	817b      	strh	r3, [r7, #10]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b70:	f7ff faa6 	bl	80020c0 <HAL_GetTick>
 8002b74:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	f040 824b 	bne.w	800301a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	2319      	movs	r3, #25
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	497f      	ldr	r1, [pc, #508]	; (8002d8c <HAL_I2C_Master_Receive+0x234>)
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fccc 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e23e      	b.n	800301c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_I2C_Master_Receive+0x54>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e237      	b.n	800301c <HAL_I2C_Master_Receive+0x4c4>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d007      	beq.n	8002bd2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2222      	movs	r2, #34	; 0x22
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2210      	movs	r2, #16
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	893a      	ldrh	r2, [r7, #8]
 8002c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4a5f      	ldr	r2, [pc, #380]	; (8002d90 <HAL_I2C_Master_Receive+0x238>)
 8002c12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c14:	8979      	ldrh	r1, [r7, #10]
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fbb8 	bl	8003390 <I2C_MasterRequestRead>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e1f8      	b.n	800301c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d113      	bne.n	8002c5a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	61fb      	str	r3, [r7, #28]
 8002c46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e1cc      	b.n	8002ff4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d11e      	bne.n	8002ca0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c72:	b672      	cpsid	i
}
 8002c74:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c9c:	b662      	cpsie	i
}
 8002c9e:	e035      	b.n	8002d0c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d11e      	bne.n	8002ce6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb8:	b672      	cpsid	i
}
 8002cba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ce2:	b662      	cpsie	i
}
 8002ce4:	e012      	b.n	8002d0c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002d0c:	e172      	b.n	8002ff4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	f200 811f 	bhi.w	8002f56 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d123      	bne.n	8002d68 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 fdab 	bl	8003880 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e173      	b.n	800301c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d66:	e145      	b.n	8002ff4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d152      	bne.n	8002e16 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	2200      	movs	r2, #0
 8002d78:	4906      	ldr	r1, [pc, #24]	; (8002d94 <HAL_I2C_Master_Receive+0x23c>)
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fbd6 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d008      	beq.n	8002d98 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e148      	b.n	800301c <HAL_I2C_Master_Receive+0x4c4>
 8002d8a:	bf00      	nop
 8002d8c:	00100002 	.word	0x00100002
 8002d90:	ffff0000 	.word	0xffff0000
 8002d94:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002d98:	b672      	cpsid	i
}
 8002d9a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002dde:	b662      	cpsie	i
}
 8002de0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e14:	e0ee      	b.n	8002ff4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	4981      	ldr	r1, [pc, #516]	; (8003024 <HAL_I2C_Master_Receive+0x4cc>)
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fb83 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0f5      	b.n	800301c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e40:	b672      	cpsid	i
}
 8002e42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e76:	4b6c      	ldr	r3, [pc, #432]	; (8003028 <HAL_I2C_Master_Receive+0x4d0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	08db      	lsrs	r3, r3, #3
 8002e7c:	4a6b      	ldr	r2, [pc, #428]	; (800302c <HAL_I2C_Master_Receive+0x4d4>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	0a1a      	lsrs	r2, r3, #8
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00da      	lsls	r2, r3, #3
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d118      	bne.n	8002ece <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f043 0220 	orr.w	r2, r3, #32
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002ebe:	b662      	cpsie	i
}
 8002ec0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e0a6      	b.n	800301c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d1d9      	bne.n	8002e90 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f1e:	b662      	cpsie	i
}
 8002f20:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f54:	e04e      	b.n	8002ff4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 fc90 	bl	8003880 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e058      	b.n	800301c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d124      	bne.n	8002ff4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d107      	bne.n	8002fc2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f47f ae88 	bne.w	8002d0e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	e000      	b.n	800301c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800301a:	2302      	movs	r3, #2
  }
}
 800301c:	4618      	mov	r0, r3
 800301e:	3728      	adds	r7, #40	; 0x28
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	00010004 	.word	0x00010004
 8003028:	20000008 	.word	0x20000008
 800302c:	14f8b589 	.word	0x14f8b589

08003030 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	; 0x28
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	460b      	mov	r3, r1
 800303e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff f83e 	bl	80020c0 <HAL_GetTick>
 8003044:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b20      	cmp	r3, #32
 8003054:	f040 8111 	bne.w	800327a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	2319      	movs	r3, #25
 800305e:	2201      	movs	r2, #1
 8003060:	4988      	ldr	r1, [pc, #544]	; (8003284 <HAL_I2C_IsDeviceReady+0x254>)
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 fa62 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800306e:	2302      	movs	r3, #2
 8003070:	e104      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_I2C_IsDeviceReady+0x50>
 800307c:	2302      	movs	r3, #2
 800307e:	e0fd      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d007      	beq.n	80030a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2224      	movs	r2, #36	; 0x24
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a70      	ldr	r2, [pc, #448]	; (8003288 <HAL_I2C_IsDeviceReady+0x258>)
 80030c8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 fa20 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00d      	beq.n	800310e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003100:	d103      	bne.n	800310a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e0b6      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800310e:	897b      	ldrh	r3, [r7, #10]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800311c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800311e:	f7fe ffcf 	bl	80020c0 <HAL_GetTick>
 8003122:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b02      	cmp	r3, #2
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003148:	bf0c      	ite	eq
 800314a:	2301      	moveq	r3, #1
 800314c:	2300      	movne	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003152:	e025      	b.n	80031a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003154:	f7fe ffb4 	bl	80020c0 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d302      	bcc.n	800316a <HAL_I2C_IsDeviceReady+0x13a>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	22a0      	movs	r2, #160	; 0xa0
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b02      	cmp	r3, #2
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2ba0      	cmp	r3, #160	; 0xa0
 80031aa:	d005      	beq.n	80031b8 <HAL_I2C_IsDeviceReady+0x188>
 80031ac:	7dfb      	ldrb	r3, [r7, #23]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d102      	bne.n	80031b8 <HAL_I2C_IsDeviceReady+0x188>
 80031b2:	7dbb      	ldrb	r3, [r7, #22]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0cd      	beq.n	8003154 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d129      	bne.n	8003222 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	2319      	movs	r3, #25
 80031fa:	2201      	movs	r2, #1
 80031fc:	4921      	ldr	r1, [pc, #132]	; (8003284 <HAL_I2C_IsDeviceReady+0x254>)
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f994 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e036      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e02c      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003230:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800323a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	2319      	movs	r3, #25
 8003242:	2201      	movs	r2, #1
 8003244:	490f      	ldr	r1, [pc, #60]	; (8003284 <HAL_I2C_IsDeviceReady+0x254>)
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f970 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e012      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	3301      	adds	r3, #1
 800325a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	429a      	cmp	r2, r3
 8003262:	f4ff af32 	bcc.w	80030ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800327a:	2302      	movs	r3, #2
  }
}
 800327c:	4618      	mov	r0, r3
 800327e:	3720      	adds	r7, #32
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	00100002 	.word	0x00100002
 8003288:	ffff0000 	.word	0xffff0000

0800328c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af02      	add	r7, sp, #8
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	460b      	mov	r3, r1
 800329a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d006      	beq.n	80032b6 <I2C_MasterRequestWrite+0x2a>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d003      	beq.n	80032b6 <I2C_MasterRequestWrite+0x2a>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032b4:	d108      	bne.n	80032c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	e00b      	b.n	80032e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	2b12      	cmp	r3, #18
 80032ce:	d107      	bne.n	80032e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f91d 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00d      	beq.n	8003314 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003306:	d103      	bne.n	8003310 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800330e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e035      	b.n	8003380 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800331c:	d108      	bne.n	8003330 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800331e:	897b      	ldrh	r3, [r7, #10]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800332c:	611a      	str	r2, [r3, #16]
 800332e:	e01b      	b.n	8003368 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003330:	897b      	ldrh	r3, [r7, #10]
 8003332:	11db      	asrs	r3, r3, #7
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f003 0306 	and.w	r3, r3, #6
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f063 030f 	orn	r3, r3, #15
 8003340:	b2da      	uxtb	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	490e      	ldr	r1, [pc, #56]	; (8003388 <I2C_MasterRequestWrite+0xfc>)
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f966 	bl	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e010      	b.n	8003380 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800335e:	897b      	ldrh	r3, [r7, #10]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4907      	ldr	r1, [pc, #28]	; (800338c <I2C_MasterRequestWrite+0x100>)
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f956 	bl	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	00010008 	.word	0x00010008
 800338c:	00010002 	.word	0x00010002

08003390 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	460b      	mov	r3, r1
 800339e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d006      	beq.n	80033ca <I2C_MasterRequestRead+0x3a>
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d003      	beq.n	80033ca <I2C_MasterRequestRead+0x3a>
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033c8:	d108      	bne.n	80033dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	e00b      	b.n	80033f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	2b11      	cmp	r3, #17
 80033e2:	d107      	bne.n	80033f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f893 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00d      	beq.n	8003428 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341a:	d103      	bne.n	8003424 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003422:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e079      	b.n	800351c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003430:	d108      	bne.n	8003444 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003432:	897b      	ldrh	r3, [r7, #10]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	611a      	str	r2, [r3, #16]
 8003442:	e05f      	b.n	8003504 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003444:	897b      	ldrh	r3, [r7, #10]
 8003446:	11db      	asrs	r3, r3, #7
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f003 0306 	and.w	r3, r3, #6
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f063 030f 	orn	r3, r3, #15
 8003454:	b2da      	uxtb	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4930      	ldr	r1, [pc, #192]	; (8003524 <I2C_MasterRequestRead+0x194>)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f8dc 	bl	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e054      	b.n	800351c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003472:	897b      	ldrh	r3, [r7, #10]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4929      	ldr	r1, [pc, #164]	; (8003528 <I2C_MasterRequestRead+0x198>)
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f8cc 	bl	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e044      	b.n	800351c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f831 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00d      	beq.n	80034ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034de:	d103      	bne.n	80034e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e017      	b.n	800351c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80034ec:	897b      	ldrh	r3, [r7, #10]
 80034ee:	11db      	asrs	r3, r3, #7
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	f003 0306 	and.w	r3, r3, #6
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	f063 030e 	orn	r3, r3, #14
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	4907      	ldr	r1, [pc, #28]	; (8003528 <I2C_MasterRequestRead+0x198>)
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f888 	bl	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	00010008 	.word	0x00010008
 8003528:	00010002 	.word	0x00010002

0800352c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800353c:	e048      	b.n	80035d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003544:	d044      	beq.n	80035d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003546:	f7fe fdbb 	bl	80020c0 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d302      	bcc.n	800355c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d139      	bne.n	80035d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	0c1b      	lsrs	r3, r3, #16
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b01      	cmp	r3, #1
 8003564:	d10d      	bne.n	8003582 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	43da      	mvns	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4013      	ands	r3, r2
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	e00c      	b.n	800359c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	43da      	mvns	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4013      	ands	r3, r2
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d116      	bne.n	80035d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e023      	b.n	8003618 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	0c1b      	lsrs	r3, r3, #16
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d10d      	bne.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	43da      	mvns	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	4013      	ands	r3, r2
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	e00c      	b.n	8003610 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	43da      	mvns	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4013      	ands	r3, r2
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf0c      	ite	eq
 8003608:	2301      	moveq	r3, #1
 800360a:	2300      	movne	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	461a      	mov	r2, r3
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	429a      	cmp	r2, r3
 8003614:	d093      	beq.n	800353e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800362e:	e071      	b.n	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363e:	d123      	bne.n	8003688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003658:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f043 0204 	orr.w	r2, r3, #4
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e067      	b.n	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368e:	d041      	beq.n	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003690:	f7fe fd16 	bl	80020c0 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	429a      	cmp	r2, r3
 800369e:	d302      	bcc.n	80036a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d136      	bne.n	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d10c      	bne.n	80036ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	43da      	mvns	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4013      	ands	r3, r2
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bf14      	ite	ne
 80036c2:	2301      	movne	r3, #1
 80036c4:	2300      	moveq	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	e00b      	b.n	80036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	43da      	mvns	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	4013      	ands	r3, r2
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	bf14      	ite	ne
 80036dc:	2301      	movne	r3, #1
 80036de:	2300      	moveq	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d016      	beq.n	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	f043 0220 	orr.w	r2, r3, #32
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e021      	b.n	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	0c1b      	lsrs	r3, r3, #16
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b01      	cmp	r3, #1
 800371c:	d10c      	bne.n	8003738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	43da      	mvns	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4013      	ands	r3, r2
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e00b      	b.n	8003750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	43da      	mvns	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4013      	ands	r3, r2
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	bf14      	ite	ne
 800374a:	2301      	movne	r3, #1
 800374c:	2300      	moveq	r3, #0
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	f47f af6d 	bne.w	8003630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800376c:	e034      	b.n	80037d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f8e3 	bl	800393a <I2C_IsAcknowledgeFailed>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e034      	b.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003784:	d028      	beq.n	80037d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003786:	f7fe fc9b 	bl	80020c0 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d11d      	bne.n	80037d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a6:	2b80      	cmp	r3, #128	; 0x80
 80037a8:	d016      	beq.n	80037d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	f043 0220 	orr.w	r2, r3, #32
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e007      	b.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e2:	2b80      	cmp	r3, #128	; 0x80
 80037e4:	d1c3      	bne.n	800376e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037fc:	e034      	b.n	8003868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f89b 	bl	800393a <I2C_IsAcknowledgeFailed>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e034      	b.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003814:	d028      	beq.n	8003868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003816:	f7fe fc53 	bl	80020c0 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	429a      	cmp	r2, r3
 8003824:	d302      	bcc.n	800382c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d11d      	bne.n	8003868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b04      	cmp	r3, #4
 8003838:	d016      	beq.n	8003868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f043 0220 	orr.w	r2, r3, #32
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e007      	b.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b04      	cmp	r3, #4
 8003874:	d1c3      	bne.n	80037fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800388c:	e049      	b.n	8003922 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b10      	cmp	r3, #16
 800389a:	d119      	bne.n	80038d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0210 	mvn.w	r2, #16
 80038a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e030      	b.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d0:	f7fe fbf6 	bl	80020c0 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d302      	bcc.n	80038e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d11d      	bne.n	8003922 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d016      	beq.n	8003922 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f043 0220 	orr.w	r2, r3, #32
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e007      	b.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392c:	2b40      	cmp	r3, #64	; 0x40
 800392e:	d1ae      	bne.n	800388e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003950:	d11b      	bne.n	800398a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800395a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f043 0204 	orr.w	r2, r3, #4
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr

08003996 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003996:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003998:	b08b      	sub	sp, #44	; 0x2c
 800399a:	af06      	add	r7, sp, #24
 800399c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0f1      	b.n	8003b8c <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7fe f9e9 	bl	8001d94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2203      	movs	r2, #3
 80039c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 fae0 	bl	8004f94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	603b      	str	r3, [r7, #0]
 80039da:	687e      	ldr	r6, [r7, #4]
 80039dc:	466d      	mov	r5, sp
 80039de:	f106 0410 	add.w	r4, r6, #16
 80039e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	602b      	str	r3, [r5, #0]
 80039ea:	1d33      	adds	r3, r6, #4
 80039ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ee:	6838      	ldr	r0, [r7, #0]
 80039f0:	f001 fac0 	bl	8004f74 <USB_CoreInit>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2202      	movs	r2, #2
 80039fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e0c2      	b.n	8003b8c <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f001 fadb 	bl	8004fc8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a12:	2300      	movs	r3, #0
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	e040      	b.n	8003a9a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	440b      	add	r3, r1
 8003a28:	3301      	adds	r3, #1
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	440b      	add	r3, r1
 8003a3e:	7bfa      	ldrb	r2, [r7, #15]
 8003a40:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	440b      	add	r3, r1
 8003a52:	3303      	adds	r3, #3
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a58:	7bfa      	ldrb	r2, [r7, #15]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	440b      	add	r3, r1
 8003a66:	3338      	adds	r3, #56	; 0x38
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	440b      	add	r3, r1
 8003a7a:	333c      	adds	r3, #60	; 0x3c
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a80:	7bfa      	ldrb	r2, [r7, #15]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	440b      	add	r3, r1
 8003a8e:	3340      	adds	r3, #64	; 0x40
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	3301      	adds	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
 8003a9a:	7bfa      	ldrb	r2, [r7, #15]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3b9      	bcc.n	8003a18 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]
 8003aa8:	e044      	b.n	8003b34 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	440b      	add	r3, r1
 8003ab8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ac0:	7bfa      	ldrb	r2, [r7, #15]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	440b      	add	r3, r1
 8003ace:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ad2:	7bfa      	ldrb	r2, [r7, #15]
 8003ad4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ad6:	7bfa      	ldrb	r2, [r7, #15]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	440b      	add	r3, r1
 8003ae4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003aec:	7bfa      	ldrb	r2, [r7, #15]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	440b      	add	r3, r1
 8003afa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	440b      	add	r3, r1
 8003b10:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b18:	7bfa      	ldrb	r2, [r7, #15]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	440b      	add	r3, r1
 8003b26:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	3301      	adds	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
 8003b34:	7bfa      	ldrb	r2, [r7, #15]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d3b5      	bcc.n	8003aaa <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	687e      	ldr	r6, [r7, #4]
 8003b46:	466d      	mov	r5, sp
 8003b48:	f106 0410 	add.w	r4, r6, #16
 8003b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	602b      	str	r3, [r5, #0]
 8003b54:	1d33      	adds	r3, r6, #4
 8003b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b58:	6838      	ldr	r0, [r7, #0]
 8003b5a:	f001 fa41 	bl	8004fe0 <USB_DevInit>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e00d      	b.n	8003b8c <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f001 fa4b 	bl	8005020 <USB_DevDisconnect>

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e272      	b.n	800408c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 8087 	beq.w	8003cc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bb4:	4b92      	ldr	r3, [pc, #584]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d00c      	beq.n	8003bda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bc0:	4b8f      	ldr	r3, [pc, #572]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d112      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x5e>
 8003bcc:	4b8c      	ldr	r3, [pc, #560]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd8:	d10b      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bda:	4b89      	ldr	r3, [pc, #548]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d06c      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x12c>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d168      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e24c      	b.n	800408c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bfa:	d106      	bne.n	8003c0a <HAL_RCC_OscConfig+0x76>
 8003bfc:	4b80      	ldr	r3, [pc, #512]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a7f      	ldr	r2, [pc, #508]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	e02e      	b.n	8003c68 <HAL_RCC_OscConfig+0xd4>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x98>
 8003c12:	4b7b      	ldr	r3, [pc, #492]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a7a      	ldr	r2, [pc, #488]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b78      	ldr	r3, [pc, #480]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a77      	ldr	r2, [pc, #476]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e01d      	b.n	8003c68 <HAL_RCC_OscConfig+0xd4>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCC_OscConfig+0xbc>
 8003c36:	4b72      	ldr	r3, [pc, #456]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a71      	ldr	r2, [pc, #452]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	4b6f      	ldr	r3, [pc, #444]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a6e      	ldr	r2, [pc, #440]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e00b      	b.n	8003c68 <HAL_RCC_OscConfig+0xd4>
 8003c50:	4b6b      	ldr	r3, [pc, #428]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a6a      	ldr	r2, [pc, #424]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	4b68      	ldr	r3, [pc, #416]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a67      	ldr	r2, [pc, #412]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d013      	beq.n	8003c98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fe fa26 	bl	80020c0 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c78:	f7fe fa22 	bl	80020c0 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b64      	cmp	r3, #100	; 0x64
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e200      	b.n	800408c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	4b5d      	ldr	r3, [pc, #372]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0xe4>
 8003c96:	e014      	b.n	8003cc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c98:	f7fe fa12 	bl	80020c0 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca0:	f7fe fa0e 	bl	80020c0 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b64      	cmp	r3, #100	; 0x64
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e1ec      	b.n	800408c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb2:	4b53      	ldr	r3, [pc, #332]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x10c>
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d063      	beq.n	8003d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cce:	4b4c      	ldr	r3, [pc, #304]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00b      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cda:	4b49      	ldr	r3, [pc, #292]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d11c      	bne.n	8003d20 <HAL_RCC_OscConfig+0x18c>
 8003ce6:	4b46      	ldr	r3, [pc, #280]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d116      	bne.n	8003d20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf2:	4b43      	ldr	r3, [pc, #268]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d005      	beq.n	8003d0a <HAL_RCC_OscConfig+0x176>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d001      	beq.n	8003d0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e1c0      	b.n	800408c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0a:	4b3d      	ldr	r3, [pc, #244]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4939      	ldr	r1, [pc, #228]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1e:	e03a      	b.n	8003d96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d020      	beq.n	8003d6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d28:	4b36      	ldr	r3, [pc, #216]	; (8003e04 <HAL_RCC_OscConfig+0x270>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2e:	f7fe f9c7 	bl	80020c0 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d36:	f7fe f9c3 	bl	80020c0 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e1a1      	b.n	800408c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d48:	4b2d      	ldr	r3, [pc, #180]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d54:	4b2a      	ldr	r3, [pc, #168]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4927      	ldr	r1, [pc, #156]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	600b      	str	r3, [r1, #0]
 8003d68:	e015      	b.n	8003d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d6a:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <HAL_RCC_OscConfig+0x270>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fe f9a6 	bl	80020c0 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d78:	f7fe f9a2 	bl	80020c0 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e180      	b.n	800408c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d03a      	beq.n	8003e18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d019      	beq.n	8003dde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003daa:	4b17      	ldr	r3, [pc, #92]	; (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db0:	f7fe f986 	bl	80020c0 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db8:	f7fe f982 	bl	80020c0 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e160      	b.n	800408c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dca:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <HAL_RCC_OscConfig+0x26c>)
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	f000 face 	bl	8004378 <RCC_Delay>
 8003ddc:	e01c      	b.n	8003e18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dde:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <HAL_RCC_OscConfig+0x274>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de4:	f7fe f96c 	bl	80020c0 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dea:	e00f      	b.n	8003e0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dec:	f7fe f968 	bl	80020c0 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d908      	bls.n	8003e0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e146      	b.n	800408c <HAL_RCC_OscConfig+0x4f8>
 8003dfe:	bf00      	nop
 8003e00:	40021000 	.word	0x40021000
 8003e04:	42420000 	.word	0x42420000
 8003e08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e0c:	4b92      	ldr	r3, [pc, #584]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e9      	bne.n	8003dec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 80a6 	beq.w	8003f72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e26:	2300      	movs	r3, #0
 8003e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e2a:	4b8b      	ldr	r3, [pc, #556]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10d      	bne.n	8003e52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e36:	4b88      	ldr	r3, [pc, #544]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	4a87      	ldr	r2, [pc, #540]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e40:	61d3      	str	r3, [r2, #28]
 8003e42:	4b85      	ldr	r3, [pc, #532]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e52:	4b82      	ldr	r3, [pc, #520]	; (800405c <HAL_RCC_OscConfig+0x4c8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d118      	bne.n	8003e90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e5e:	4b7f      	ldr	r3, [pc, #508]	; (800405c <HAL_RCC_OscConfig+0x4c8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a7e      	ldr	r2, [pc, #504]	; (800405c <HAL_RCC_OscConfig+0x4c8>)
 8003e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6a:	f7fe f929 	bl	80020c0 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e72:	f7fe f925 	bl	80020c0 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b64      	cmp	r3, #100	; 0x64
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e103      	b.n	800408c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e84:	4b75      	ldr	r3, [pc, #468]	; (800405c <HAL_RCC_OscConfig+0x4c8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d106      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x312>
 8003e98:	4b6f      	ldr	r3, [pc, #444]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	4a6e      	ldr	r2, [pc, #440]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6213      	str	r3, [r2, #32]
 8003ea4:	e02d      	b.n	8003f02 <HAL_RCC_OscConfig+0x36e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x334>
 8003eae:	4b6a      	ldr	r3, [pc, #424]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	4a69      	ldr	r2, [pc, #420]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	6213      	str	r3, [r2, #32]
 8003eba:	4b67      	ldr	r3, [pc, #412]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4a66      	ldr	r2, [pc, #408]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003ec0:	f023 0304 	bic.w	r3, r3, #4
 8003ec4:	6213      	str	r3, [r2, #32]
 8003ec6:	e01c      	b.n	8003f02 <HAL_RCC_OscConfig+0x36e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b05      	cmp	r3, #5
 8003ece:	d10c      	bne.n	8003eea <HAL_RCC_OscConfig+0x356>
 8003ed0:	4b61      	ldr	r3, [pc, #388]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	4a60      	ldr	r2, [pc, #384]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003ed6:	f043 0304 	orr.w	r3, r3, #4
 8003eda:	6213      	str	r3, [r2, #32]
 8003edc:	4b5e      	ldr	r3, [pc, #376]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	4a5d      	ldr	r2, [pc, #372]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003ee2:	f043 0301 	orr.w	r3, r3, #1
 8003ee6:	6213      	str	r3, [r2, #32]
 8003ee8:	e00b      	b.n	8003f02 <HAL_RCC_OscConfig+0x36e>
 8003eea:	4b5b      	ldr	r3, [pc, #364]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	4a5a      	ldr	r2, [pc, #360]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003ef0:	f023 0301 	bic.w	r3, r3, #1
 8003ef4:	6213      	str	r3, [r2, #32]
 8003ef6:	4b58      	ldr	r3, [pc, #352]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	4a57      	ldr	r2, [pc, #348]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003efc:	f023 0304 	bic.w	r3, r3, #4
 8003f00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d015      	beq.n	8003f36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0a:	f7fe f8d9 	bl	80020c0 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f10:	e00a      	b.n	8003f28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f12:	f7fe f8d5 	bl	80020c0 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e0b1      	b.n	800408c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f28:	4b4b      	ldr	r3, [pc, #300]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0ee      	beq.n	8003f12 <HAL_RCC_OscConfig+0x37e>
 8003f34:	e014      	b.n	8003f60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f36:	f7fe f8c3 	bl	80020c0 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3c:	e00a      	b.n	8003f54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3e:	f7fe f8bf 	bl	80020c0 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e09b      	b.n	800408c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f54:	4b40      	ldr	r3, [pc, #256]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1ee      	bne.n	8003f3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d105      	bne.n	8003f72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f66:	4b3c      	ldr	r3, [pc, #240]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	4a3b      	ldr	r2, [pc, #236]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 8087 	beq.w	800408a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f7c:	4b36      	ldr	r3, [pc, #216]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 030c 	and.w	r3, r3, #12
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d061      	beq.n	800404c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d146      	bne.n	800401e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f90:	4b33      	ldr	r3, [pc, #204]	; (8004060 <HAL_RCC_OscConfig+0x4cc>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f96:	f7fe f893 	bl	80020c0 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9e:	f7fe f88f 	bl	80020c0 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e06d      	b.n	800408c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb0:	4b29      	ldr	r3, [pc, #164]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f0      	bne.n	8003f9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc4:	d108      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fc6:	4b24      	ldr	r3, [pc, #144]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	4921      	ldr	r1, [pc, #132]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fd8:	4b1f      	ldr	r3, [pc, #124]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a19      	ldr	r1, [r3, #32]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	491b      	ldr	r1, [pc, #108]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <HAL_RCC_OscConfig+0x4cc>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff6:	f7fe f863 	bl	80020c0 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffe:	f7fe f85f 	bl	80020c0 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e03d      	b.n	800408c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004010:	4b11      	ldr	r3, [pc, #68]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0f0      	beq.n	8003ffe <HAL_RCC_OscConfig+0x46a>
 800401c:	e035      	b.n	800408a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401e:	4b10      	ldr	r3, [pc, #64]	; (8004060 <HAL_RCC_OscConfig+0x4cc>)
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004024:	f7fe f84c 	bl	80020c0 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402c:	f7fe f848 	bl	80020c0 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e026      	b.n	800408c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_RCC_OscConfig+0x4c4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0x498>
 800404a:	e01e      	b.n	800408a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d107      	bne.n	8004064 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e019      	b.n	800408c <HAL_RCC_OscConfig+0x4f8>
 8004058:	40021000 	.word	0x40021000
 800405c:	40007000 	.word	0x40007000
 8004060:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	429a      	cmp	r2, r3
 8004076:	d106      	bne.n	8004086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004082:	429a      	cmp	r2, r3
 8004084:	d001      	beq.n	800408a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40021000 	.word	0x40021000

08004098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0d0      	b.n	800424e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040ac:	4b6a      	ldr	r3, [pc, #424]	; (8004258 <HAL_RCC_ClockConfig+0x1c0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d910      	bls.n	80040dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ba:	4b67      	ldr	r3, [pc, #412]	; (8004258 <HAL_RCC_ClockConfig+0x1c0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 0207 	bic.w	r2, r3, #7
 80040c2:	4965      	ldr	r1, [pc, #404]	; (8004258 <HAL_RCC_ClockConfig+0x1c0>)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b63      	ldr	r3, [pc, #396]	; (8004258 <HAL_RCC_ClockConfig+0x1c0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0b8      	b.n	800424e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d020      	beq.n	800412a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f4:	4b59      	ldr	r3, [pc, #356]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	4a58      	ldr	r2, [pc, #352]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 80040fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800410c:	4b53      	ldr	r3, [pc, #332]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	4a52      	ldr	r2, [pc, #328]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004118:	4b50      	ldr	r3, [pc, #320]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	494d      	ldr	r1, [pc, #308]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d040      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d107      	bne.n	800414e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	4b47      	ldr	r3, [pc, #284]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d115      	bne.n	8004176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e07f      	b.n	800424e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d107      	bne.n	8004166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004156:	4b41      	ldr	r3, [pc, #260]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d109      	bne.n	8004176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e073      	b.n	800424e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004166:	4b3d      	ldr	r3, [pc, #244]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e06b      	b.n	800424e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004176:	4b39      	ldr	r3, [pc, #228]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f023 0203 	bic.w	r2, r3, #3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	4936      	ldr	r1, [pc, #216]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004184:	4313      	orrs	r3, r2
 8004186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004188:	f7fd ff9a 	bl	80020c0 <HAL_GetTick>
 800418c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418e:	e00a      	b.n	80041a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004190:	f7fd ff96 	bl	80020c0 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f241 3288 	movw	r2, #5000	; 0x1388
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e053      	b.n	800424e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a6:	4b2d      	ldr	r3, [pc, #180]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f003 020c 	and.w	r2, r3, #12
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d1eb      	bne.n	8004190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041b8:	4b27      	ldr	r3, [pc, #156]	; (8004258 <HAL_RCC_ClockConfig+0x1c0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d210      	bcs.n	80041e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <HAL_RCC_ClockConfig+0x1c0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 0207 	bic.w	r2, r3, #7
 80041ce:	4922      	ldr	r1, [pc, #136]	; (8004258 <HAL_RCC_ClockConfig+0x1c0>)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d6:	4b20      	ldr	r3, [pc, #128]	; (8004258 <HAL_RCC_ClockConfig+0x1c0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e032      	b.n	800424e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f4:	4b19      	ldr	r3, [pc, #100]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4916      	ldr	r1, [pc, #88]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004202:	4313      	orrs	r3, r2
 8004204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004212:	4b12      	ldr	r3, [pc, #72]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	490e      	ldr	r1, [pc, #56]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004222:	4313      	orrs	r3, r2
 8004224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004226:	f000 f821 	bl	800426c <HAL_RCC_GetSysClockFreq>
 800422a:	4602      	mov	r2, r0
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	490a      	ldr	r1, [pc, #40]	; (8004260 <HAL_RCC_ClockConfig+0x1c8>)
 8004238:	5ccb      	ldrb	r3, [r1, r3]
 800423a:	fa22 f303 	lsr.w	r3, r2, r3
 800423e:	4a09      	ldr	r2, [pc, #36]	; (8004264 <HAL_RCC_ClockConfig+0x1cc>)
 8004240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004242:	4b09      	ldr	r3, [pc, #36]	; (8004268 <HAL_RCC_ClockConfig+0x1d0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f7fd fef8 	bl	800203c <HAL_InitTick>

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40022000 	.word	0x40022000
 800425c:	40021000 	.word	0x40021000
 8004260:	08008ac4 	.word	0x08008ac4
 8004264:	20000008 	.word	0x20000008
 8004268:	2000000c 	.word	0x2000000c

0800426c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	2300      	movs	r3, #0
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	2300      	movs	r3, #0
 8004280:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004286:	4b1e      	ldr	r3, [pc, #120]	; (8004300 <HAL_RCC_GetSysClockFreq+0x94>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	2b04      	cmp	r3, #4
 8004294:	d002      	beq.n	800429c <HAL_RCC_GetSysClockFreq+0x30>
 8004296:	2b08      	cmp	r3, #8
 8004298:	d003      	beq.n	80042a2 <HAL_RCC_GetSysClockFreq+0x36>
 800429a:	e027      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800429c:	4b19      	ldr	r3, [pc, #100]	; (8004304 <HAL_RCC_GetSysClockFreq+0x98>)
 800429e:	613b      	str	r3, [r7, #16]
      break;
 80042a0:	e027      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	0c9b      	lsrs	r3, r3, #18
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	4a17      	ldr	r2, [pc, #92]	; (8004308 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042ac:	5cd3      	ldrb	r3, [r2, r3]
 80042ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d010      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042ba:	4b11      	ldr	r3, [pc, #68]	; (8004300 <HAL_RCC_GetSysClockFreq+0x94>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	0c5b      	lsrs	r3, r3, #17
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	4a11      	ldr	r2, [pc, #68]	; (800430c <HAL_RCC_GetSysClockFreq+0xa0>)
 80042c6:	5cd3      	ldrb	r3, [r2, r3]
 80042c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a0d      	ldr	r2, [pc, #52]	; (8004304 <HAL_RCC_GetSysClockFreq+0x98>)
 80042ce:	fb03 f202 	mul.w	r2, r3, r2
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	e004      	b.n	80042e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a0c      	ldr	r2, [pc, #48]	; (8004310 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042e0:	fb02 f303 	mul.w	r3, r2, r3
 80042e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	613b      	str	r3, [r7, #16]
      break;
 80042ea:	e002      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <HAL_RCC_GetSysClockFreq+0x98>)
 80042ee:	613b      	str	r3, [r7, #16]
      break;
 80042f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042f2:	693b      	ldr	r3, [r7, #16]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	371c      	adds	r7, #28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40021000 	.word	0x40021000
 8004304:	007a1200 	.word	0x007a1200
 8004308:	08008adc 	.word	0x08008adc
 800430c:	08008aec 	.word	0x08008aec
 8004310:	003d0900 	.word	0x003d0900

08004314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004318:	4b02      	ldr	r3, [pc, #8]	; (8004324 <HAL_RCC_GetHCLKFreq+0x10>)
 800431a:	681b      	ldr	r3, [r3, #0]
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	20000008 	.word	0x20000008

08004328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800432c:	f7ff fff2 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 8004330:	4602      	mov	r2, r0
 8004332:	4b05      	ldr	r3, [pc, #20]	; (8004348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	4903      	ldr	r1, [pc, #12]	; (800434c <HAL_RCC_GetPCLK1Freq+0x24>)
 800433e:	5ccb      	ldrb	r3, [r1, r3]
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40021000 	.word	0x40021000
 800434c:	08008ad4 	.word	0x08008ad4

08004350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004354:	f7ff ffde 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	0adb      	lsrs	r3, r3, #11
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	4903      	ldr	r1, [pc, #12]	; (8004374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800436c:	4618      	mov	r0, r3
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40021000 	.word	0x40021000
 8004374:	08008ad4 	.word	0x08008ad4

08004378 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004380:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <RCC_Delay+0x34>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <RCC_Delay+0x38>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	0a5b      	lsrs	r3, r3, #9
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004394:	bf00      	nop
  }
  while (Delay --);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1e5a      	subs	r2, r3, #1
 800439a:	60fa      	str	r2, [r7, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1f9      	bne.n	8004394 <RCC_Delay+0x1c>
}
 80043a0:	bf00      	nop
 80043a2:	bf00      	nop
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr
 80043ac:	20000008 	.word	0x20000008
 80043b0:	10624dd3 	.word	0x10624dd3

080043b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d07d      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80043d0:	2300      	movs	r3, #0
 80043d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d4:	4b4f      	ldr	r3, [pc, #316]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10d      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e0:	4b4c      	ldr	r3, [pc, #304]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	4a4b      	ldr	r2, [pc, #300]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ea:	61d3      	str	r3, [r2, #28]
 80043ec:	4b49      	ldr	r3, [pc, #292]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043f8:	2301      	movs	r3, #1
 80043fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fc:	4b46      	ldr	r3, [pc, #280]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d118      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004408:	4b43      	ldr	r3, [pc, #268]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a42      	ldr	r2, [pc, #264]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800440e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004412:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004414:	f7fd fe54 	bl	80020c0 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441a:	e008      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441c:	f7fd fe50 	bl	80020c0 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e06d      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442e:	4b3a      	ldr	r3, [pc, #232]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800443a:	4b36      	ldr	r3, [pc, #216]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004442:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d02e      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	429a      	cmp	r2, r3
 8004456:	d027      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004458:	4b2e      	ldr	r3, [pc, #184]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004460:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004462:	4b2e      	ldr	r3, [pc, #184]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004464:	2201      	movs	r2, #1
 8004466:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004468:	4b2c      	ldr	r3, [pc, #176]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800446e:	4a29      	ldr	r2, [pc, #164]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d014      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447e:	f7fd fe1f 	bl	80020c0 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004484:	e00a      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004486:	f7fd fe1b 	bl	80020c0 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	f241 3288 	movw	r2, #5000	; 0x1388
 8004494:	4293      	cmp	r3, r2
 8004496:	d901      	bls.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e036      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449c:	4b1d      	ldr	r3, [pc, #116]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0ee      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044a8:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	4917      	ldr	r1, [pc, #92]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d105      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c0:	4b14      	ldr	r3, [pc, #80]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	4a13      	ldr	r2, [pc, #76]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044d8:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	490b      	ldr	r1, [pc, #44]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d008      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044f6:	4b07      	ldr	r3, [pc, #28]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	4904      	ldr	r1, [pc, #16]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40021000 	.word	0x40021000
 8004518:	40007000 	.word	0x40007000
 800451c:	42420440 	.word	0x42420440

08004520 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e041      	b.n	80045b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fd fb8c 	bl	8001c64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3304      	adds	r3, #4
 800455c:	4619      	mov	r1, r3
 800455e:	4610      	mov	r0, r2
 8004560:	f000 f8f0 	bl	8004744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045da:	2302      	movs	r3, #2
 80045dc:	e0ae      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b0c      	cmp	r3, #12
 80045ea:	f200 809f 	bhi.w	800472c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045ee:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f4:	08004629 	.word	0x08004629
 80045f8:	0800472d 	.word	0x0800472d
 80045fc:	0800472d 	.word	0x0800472d
 8004600:	0800472d 	.word	0x0800472d
 8004604:	08004669 	.word	0x08004669
 8004608:	0800472d 	.word	0x0800472d
 800460c:	0800472d 	.word	0x0800472d
 8004610:	0800472d 	.word	0x0800472d
 8004614:	080046ab 	.word	0x080046ab
 8004618:	0800472d 	.word	0x0800472d
 800461c:	0800472d 	.word	0x0800472d
 8004620:	0800472d 	.word	0x0800472d
 8004624:	080046eb 	.word	0x080046eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	4618      	mov	r0, r3
 8004630:	f000 f8ea 	bl	8004808 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0208 	orr.w	r2, r2, #8
 8004642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0204 	bic.w	r2, r2, #4
 8004652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6999      	ldr	r1, [r3, #24]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	619a      	str	r2, [r3, #24]
      break;
 8004666:	e064      	b.n	8004732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f930 	bl	80048d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6999      	ldr	r1, [r3, #24]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	021a      	lsls	r2, r3, #8
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	619a      	str	r2, [r3, #24]
      break;
 80046a8:	e043      	b.n	8004732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 f979 	bl	80049a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0208 	orr.w	r2, r2, #8
 80046c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69da      	ldr	r2, [r3, #28]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0204 	bic.w	r2, r2, #4
 80046d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69d9      	ldr	r1, [r3, #28]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	61da      	str	r2, [r3, #28]
      break;
 80046e8:	e023      	b.n	8004732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 f9c3 	bl	8004a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69d9      	ldr	r1, [r3, #28]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	021a      	lsls	r2, r3, #8
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	61da      	str	r2, [r3, #28]
      break;
 800472a:	e002      	b.n	8004732 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	75fb      	strb	r3, [r7, #23]
      break;
 8004730:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800473a:	7dfb      	ldrb	r3, [r7, #23]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a29      	ldr	r2, [pc, #164]	; (80047fc <TIM_Base_SetConfig+0xb8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00b      	beq.n	8004774 <TIM_Base_SetConfig+0x30>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004762:	d007      	beq.n	8004774 <TIM_Base_SetConfig+0x30>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a26      	ldr	r2, [pc, #152]	; (8004800 <TIM_Base_SetConfig+0xbc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d003      	beq.n	8004774 <TIM_Base_SetConfig+0x30>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a25      	ldr	r2, [pc, #148]	; (8004804 <TIM_Base_SetConfig+0xc0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d108      	bne.n	8004786 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a1c      	ldr	r2, [pc, #112]	; (80047fc <TIM_Base_SetConfig+0xb8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00b      	beq.n	80047a6 <TIM_Base_SetConfig+0x62>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004794:	d007      	beq.n	80047a6 <TIM_Base_SetConfig+0x62>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a19      	ldr	r2, [pc, #100]	; (8004800 <TIM_Base_SetConfig+0xbc>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d003      	beq.n	80047a6 <TIM_Base_SetConfig+0x62>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a18      	ldr	r2, [pc, #96]	; (8004804 <TIM_Base_SetConfig+0xc0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d108      	bne.n	80047b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a07      	ldr	r2, [pc, #28]	; (80047fc <TIM_Base_SetConfig+0xb8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d103      	bne.n	80047ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	615a      	str	r2, [r3, #20]
}
 80047f2:	bf00      	nop
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800

08004808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f023 0201 	bic.w	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0303 	bic.w	r3, r3, #3
 800483e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f023 0302 	bic.w	r3, r3, #2
 8004850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a1c      	ldr	r2, [pc, #112]	; (80048d0 <TIM_OC1_SetConfig+0xc8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d10c      	bne.n	800487e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f023 0308 	bic.w	r3, r3, #8
 800486a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f023 0304 	bic.w	r3, r3, #4
 800487c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a13      	ldr	r2, [pc, #76]	; (80048d0 <TIM_OC1_SetConfig+0xc8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d111      	bne.n	80048aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800488c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	621a      	str	r2, [r3, #32]
}
 80048c4:	bf00      	nop
 80048c6:	371c      	adds	r7, #28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc80      	pop	{r7}
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40012c00 	.word	0x40012c00

080048d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	f023 0210 	bic.w	r2, r3, #16
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f023 0320 	bic.w	r3, r3, #32
 800491e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a1d      	ldr	r2, [pc, #116]	; (80049a4 <TIM_OC2_SetConfig+0xd0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d10d      	bne.n	8004950 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800493a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	4313      	orrs	r3, r2
 8004946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800494e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a14      	ldr	r2, [pc, #80]	; (80049a4 <TIM_OC2_SetConfig+0xd0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d113      	bne.n	8004980 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800495e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004966:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	621a      	str	r2, [r3, #32]
}
 800499a:	bf00      	nop
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr
 80049a4:	40012c00 	.word	0x40012c00

080049a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	021b      	lsls	r3, r3, #8
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a1d      	ldr	r2, [pc, #116]	; (8004a78 <TIM_OC3_SetConfig+0xd0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d10d      	bne.n	8004a22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	021b      	lsls	r3, r3, #8
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a14      	ldr	r2, [pc, #80]	; (8004a78 <TIM_OC3_SetConfig+0xd0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d113      	bne.n	8004a52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	621a      	str	r2, [r3, #32]
}
 8004a6c:	bf00      	nop
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bc80      	pop	{r7}
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40012c00 	.word	0x40012c00

08004a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	031b      	lsls	r3, r3, #12
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a0f      	ldr	r2, [pc, #60]	; (8004b14 <TIM_OC4_SetConfig+0x98>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d109      	bne.n	8004af0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ae2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	019b      	lsls	r3, r3, #6
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	621a      	str	r2, [r3, #32]
}
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr
 8004b14:	40012c00 	.word	0x40012c00

08004b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e046      	b.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a16      	ldr	r2, [pc, #88]	; (8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00e      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7c:	d009      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a12      	ldr	r2, [pc, #72]	; (8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d004      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a10      	ldr	r2, [pc, #64]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d10c      	bne.n	8004bac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr
 8004bc8:	40012c00 	.word	0x40012c00
 8004bcc:	40000400 	.word	0x40000400
 8004bd0:	40000800 	.word	0x40000800

08004bd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e042      	b.n	8004c6c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fd f87e 	bl	8001cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2224      	movs	r2, #36	; 0x24
 8004c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f91d 	bl	8004e58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695a      	ldr	r2, [r3, #20]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	; 0x28
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	4613      	mov	r3, r2
 8004c82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d16d      	bne.n	8004d70 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_UART_Transmit+0x2c>
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e066      	b.n	8004d72 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2221      	movs	r2, #33	; 0x21
 8004cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cb2:	f7fd fa05 	bl	80020c0 <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	88fa      	ldrh	r2, [r7, #6]
 8004cbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	88fa      	ldrh	r2, [r7, #6]
 8004cc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ccc:	d108      	bne.n	8004ce0 <HAL_UART_Transmit+0x6c>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d104      	bne.n	8004ce0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	61bb      	str	r3, [r7, #24]
 8004cde:	e003      	b.n	8004ce8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ce8:	e02a      	b.n	8004d40 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2180      	movs	r1, #128	; 0x80
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 f840 	bl	8004d7a <UART_WaitOnFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e036      	b.n	8004d72 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10b      	bne.n	8004d22 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	3302      	adds	r3, #2
 8004d1e:	61bb      	str	r3, [r7, #24]
 8004d20:	e007      	b.n	8004d32 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	781a      	ldrb	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1cf      	bne.n	8004cea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2200      	movs	r2, #0
 8004d52:	2140      	movs	r1, #64	; 0x40
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f810 	bl	8004d7a <UART_WaitOnFlagUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e006      	b.n	8004d72 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e000      	b.n	8004d72 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004d70:	2302      	movs	r3, #2
  }
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b090      	sub	sp, #64	; 0x40
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	603b      	str	r3, [r7, #0]
 8004d86:	4613      	mov	r3, r2
 8004d88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d8a:	e050      	b.n	8004e2e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d04c      	beq.n	8004e2e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d007      	beq.n	8004daa <UART_WaitOnFlagUntilTimeout+0x30>
 8004d9a:	f7fd f991 	bl	80020c0 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d241      	bcs.n	8004e2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330c      	adds	r3, #12
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	e853 3f00 	ldrex	r3, [r3]
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dca:	637a      	str	r2, [r7, #52]	; 0x34
 8004dcc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e5      	bne.n	8004daa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3314      	adds	r3, #20
 8004de4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	613b      	str	r3, [r7, #16]
   return(result);
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f023 0301 	bic.w	r3, r3, #1
 8004df4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3314      	adds	r3, #20
 8004dfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dfe:	623a      	str	r2, [r7, #32]
 8004e00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	69f9      	ldr	r1, [r7, #28]
 8004e04:	6a3a      	ldr	r2, [r7, #32]
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e5      	bne.n	8004dde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e00f      	b.n	8004e4e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4013      	ands	r3, r2
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	bf0c      	ite	eq
 8004e3e:	2301      	moveq	r3, #1
 8004e40:	2300      	movne	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d09f      	beq.n	8004d8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3740      	adds	r7, #64	; 0x40
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e92:	f023 030c 	bic.w	r3, r3, #12
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6812      	ldr	r2, [r2, #0]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a2c      	ldr	r2, [pc, #176]	; (8004f6c <UART_SetConfig+0x114>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d103      	bne.n	8004ec8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ec0:	f7ff fa46 	bl	8004350 <HAL_RCC_GetPCLK2Freq>
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	e002      	b.n	8004ece <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ec8:	f7ff fa2e 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
 8004ecc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009a      	lsls	r2, r3, #2
 8004ed8:	441a      	add	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	4a22      	ldr	r2, [pc, #136]	; (8004f70 <UART_SetConfig+0x118>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	0119      	lsls	r1, r3, #4
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009a      	lsls	r2, r3, #2
 8004ef8:	441a      	add	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f04:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <UART_SetConfig+0x118>)
 8004f06:	fba3 0302 	umull	r0, r3, r3, r2
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	2064      	movs	r0, #100	; 0x64
 8004f0e:	fb00 f303 	mul.w	r3, r0, r3
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	3332      	adds	r3, #50	; 0x32
 8004f18:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <UART_SetConfig+0x118>)
 8004f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f24:	4419      	add	r1, r3
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009a      	lsls	r2, r3, #2
 8004f30:	441a      	add	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <UART_SetConfig+0x118>)
 8004f3e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	2064      	movs	r0, #100	; 0x64
 8004f46:	fb00 f303 	mul.w	r3, r0, r3
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	3332      	adds	r3, #50	; 0x32
 8004f50:	4a07      	ldr	r2, [pc, #28]	; (8004f70 <UART_SetConfig+0x118>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	f003 020f 	and.w	r2, r3, #15
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	440a      	add	r2, r1
 8004f62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40013800 	.word	0x40013800
 8004f70:	51eb851f 	.word	0x51eb851f

08004f74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f74:	b084      	sub	sp, #16
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	f107 0014 	add.w	r0, r7, #20
 8004f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	b004      	add	sp, #16
 8004f92:	4770      	bx	lr

08004f94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f9c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004fa0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bc80      	pop	{r7}
 8004fc6:	4770      	bx	lr

08004fc8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	f107 0014 	add.w	r0, r7, #20
 8004fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	b004      	add	sp, #16
 800501e:	4770      	bx	lr

08005020 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr

08005034 <malloc>:
 8005034:	4b02      	ldr	r3, [pc, #8]	; (8005040 <malloc+0xc>)
 8005036:	4601      	mov	r1, r0
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	f000 b82b 	b.w	8005094 <_malloc_r>
 800503e:	bf00      	nop
 8005040:	2000006c 	.word	0x2000006c

08005044 <free>:
 8005044:	4b02      	ldr	r3, [pc, #8]	; (8005050 <free+0xc>)
 8005046:	4601      	mov	r1, r0
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	f001 bd4d 	b.w	8006ae8 <_free_r>
 800504e:	bf00      	nop
 8005050:	2000006c 	.word	0x2000006c

08005054 <sbrk_aligned>:
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	4e0e      	ldr	r6, [pc, #56]	; (8005090 <sbrk_aligned+0x3c>)
 8005058:	460c      	mov	r4, r1
 800505a:	6831      	ldr	r1, [r6, #0]
 800505c:	4605      	mov	r5, r0
 800505e:	b911      	cbnz	r1, 8005066 <sbrk_aligned+0x12>
 8005060:	f000 fe68 	bl	8005d34 <_sbrk_r>
 8005064:	6030      	str	r0, [r6, #0]
 8005066:	4621      	mov	r1, r4
 8005068:	4628      	mov	r0, r5
 800506a:	f000 fe63 	bl	8005d34 <_sbrk_r>
 800506e:	1c43      	adds	r3, r0, #1
 8005070:	d00a      	beq.n	8005088 <sbrk_aligned+0x34>
 8005072:	1cc4      	adds	r4, r0, #3
 8005074:	f024 0403 	bic.w	r4, r4, #3
 8005078:	42a0      	cmp	r0, r4
 800507a:	d007      	beq.n	800508c <sbrk_aligned+0x38>
 800507c:	1a21      	subs	r1, r4, r0
 800507e:	4628      	mov	r0, r5
 8005080:	f000 fe58 	bl	8005d34 <_sbrk_r>
 8005084:	3001      	adds	r0, #1
 8005086:	d101      	bne.n	800508c <sbrk_aligned+0x38>
 8005088:	f04f 34ff 	mov.w	r4, #4294967295
 800508c:	4620      	mov	r0, r4
 800508e:	bd70      	pop	{r4, r5, r6, pc}
 8005090:	20000ae8 	.word	0x20000ae8

08005094 <_malloc_r>:
 8005094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005098:	1ccd      	adds	r5, r1, #3
 800509a:	f025 0503 	bic.w	r5, r5, #3
 800509e:	3508      	adds	r5, #8
 80050a0:	2d0c      	cmp	r5, #12
 80050a2:	bf38      	it	cc
 80050a4:	250c      	movcc	r5, #12
 80050a6:	2d00      	cmp	r5, #0
 80050a8:	4607      	mov	r7, r0
 80050aa:	db01      	blt.n	80050b0 <_malloc_r+0x1c>
 80050ac:	42a9      	cmp	r1, r5
 80050ae:	d905      	bls.n	80050bc <_malloc_r+0x28>
 80050b0:	230c      	movs	r3, #12
 80050b2:	2600      	movs	r6, #0
 80050b4:	603b      	str	r3, [r7, #0]
 80050b6:	4630      	mov	r0, r6
 80050b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005190 <_malloc_r+0xfc>
 80050c0:	f000 f868 	bl	8005194 <__malloc_lock>
 80050c4:	f8d8 3000 	ldr.w	r3, [r8]
 80050c8:	461c      	mov	r4, r3
 80050ca:	bb5c      	cbnz	r4, 8005124 <_malloc_r+0x90>
 80050cc:	4629      	mov	r1, r5
 80050ce:	4638      	mov	r0, r7
 80050d0:	f7ff ffc0 	bl	8005054 <sbrk_aligned>
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	4604      	mov	r4, r0
 80050d8:	d155      	bne.n	8005186 <_malloc_r+0xf2>
 80050da:	f8d8 4000 	ldr.w	r4, [r8]
 80050de:	4626      	mov	r6, r4
 80050e0:	2e00      	cmp	r6, #0
 80050e2:	d145      	bne.n	8005170 <_malloc_r+0xdc>
 80050e4:	2c00      	cmp	r4, #0
 80050e6:	d048      	beq.n	800517a <_malloc_r+0xe6>
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	4631      	mov	r1, r6
 80050ec:	4638      	mov	r0, r7
 80050ee:	eb04 0903 	add.w	r9, r4, r3
 80050f2:	f000 fe1f 	bl	8005d34 <_sbrk_r>
 80050f6:	4581      	cmp	r9, r0
 80050f8:	d13f      	bne.n	800517a <_malloc_r+0xe6>
 80050fa:	6821      	ldr	r1, [r4, #0]
 80050fc:	4638      	mov	r0, r7
 80050fe:	1a6d      	subs	r5, r5, r1
 8005100:	4629      	mov	r1, r5
 8005102:	f7ff ffa7 	bl	8005054 <sbrk_aligned>
 8005106:	3001      	adds	r0, #1
 8005108:	d037      	beq.n	800517a <_malloc_r+0xe6>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	442b      	add	r3, r5
 800510e:	6023      	str	r3, [r4, #0]
 8005110:	f8d8 3000 	ldr.w	r3, [r8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d038      	beq.n	800518a <_malloc_r+0xf6>
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	42a2      	cmp	r2, r4
 800511c:	d12b      	bne.n	8005176 <_malloc_r+0xe2>
 800511e:	2200      	movs	r2, #0
 8005120:	605a      	str	r2, [r3, #4]
 8005122:	e00f      	b.n	8005144 <_malloc_r+0xb0>
 8005124:	6822      	ldr	r2, [r4, #0]
 8005126:	1b52      	subs	r2, r2, r5
 8005128:	d41f      	bmi.n	800516a <_malloc_r+0xd6>
 800512a:	2a0b      	cmp	r2, #11
 800512c:	d917      	bls.n	800515e <_malloc_r+0xca>
 800512e:	1961      	adds	r1, r4, r5
 8005130:	42a3      	cmp	r3, r4
 8005132:	6025      	str	r5, [r4, #0]
 8005134:	bf18      	it	ne
 8005136:	6059      	strne	r1, [r3, #4]
 8005138:	6863      	ldr	r3, [r4, #4]
 800513a:	bf08      	it	eq
 800513c:	f8c8 1000 	streq.w	r1, [r8]
 8005140:	5162      	str	r2, [r4, r5]
 8005142:	604b      	str	r3, [r1, #4]
 8005144:	4638      	mov	r0, r7
 8005146:	f104 060b 	add.w	r6, r4, #11
 800514a:	f000 f829 	bl	80051a0 <__malloc_unlock>
 800514e:	f026 0607 	bic.w	r6, r6, #7
 8005152:	1d23      	adds	r3, r4, #4
 8005154:	1af2      	subs	r2, r6, r3
 8005156:	d0ae      	beq.n	80050b6 <_malloc_r+0x22>
 8005158:	1b9b      	subs	r3, r3, r6
 800515a:	50a3      	str	r3, [r4, r2]
 800515c:	e7ab      	b.n	80050b6 <_malloc_r+0x22>
 800515e:	42a3      	cmp	r3, r4
 8005160:	6862      	ldr	r2, [r4, #4]
 8005162:	d1dd      	bne.n	8005120 <_malloc_r+0x8c>
 8005164:	f8c8 2000 	str.w	r2, [r8]
 8005168:	e7ec      	b.n	8005144 <_malloc_r+0xb0>
 800516a:	4623      	mov	r3, r4
 800516c:	6864      	ldr	r4, [r4, #4]
 800516e:	e7ac      	b.n	80050ca <_malloc_r+0x36>
 8005170:	4634      	mov	r4, r6
 8005172:	6876      	ldr	r6, [r6, #4]
 8005174:	e7b4      	b.n	80050e0 <_malloc_r+0x4c>
 8005176:	4613      	mov	r3, r2
 8005178:	e7cc      	b.n	8005114 <_malloc_r+0x80>
 800517a:	230c      	movs	r3, #12
 800517c:	4638      	mov	r0, r7
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	f000 f80e 	bl	80051a0 <__malloc_unlock>
 8005184:	e797      	b.n	80050b6 <_malloc_r+0x22>
 8005186:	6025      	str	r5, [r4, #0]
 8005188:	e7dc      	b.n	8005144 <_malloc_r+0xb0>
 800518a:	605b      	str	r3, [r3, #4]
 800518c:	deff      	udf	#255	; 0xff
 800518e:	bf00      	nop
 8005190:	20000ae4 	.word	0x20000ae4

08005194 <__malloc_lock>:
 8005194:	4801      	ldr	r0, [pc, #4]	; (800519c <__malloc_lock+0x8>)
 8005196:	f000 be19 	b.w	8005dcc <__retarget_lock_acquire_recursive>
 800519a:	bf00      	nop
 800519c:	20000c2c 	.word	0x20000c2c

080051a0 <__malloc_unlock>:
 80051a0:	4801      	ldr	r0, [pc, #4]	; (80051a8 <__malloc_unlock+0x8>)
 80051a2:	f000 be14 	b.w	8005dce <__retarget_lock_release_recursive>
 80051a6:	bf00      	nop
 80051a8:	20000c2c 	.word	0x20000c2c

080051ac <__cvt>:
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b2:	461f      	mov	r7, r3
 80051b4:	bfbb      	ittet	lt
 80051b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80051ba:	461f      	movlt	r7, r3
 80051bc:	2300      	movge	r3, #0
 80051be:	232d      	movlt	r3, #45	; 0x2d
 80051c0:	b088      	sub	sp, #32
 80051c2:	4614      	mov	r4, r2
 80051c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80051c8:	7013      	strb	r3, [r2, #0]
 80051ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80051cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80051d0:	f023 0820 	bic.w	r8, r3, #32
 80051d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051d8:	d005      	beq.n	80051e6 <__cvt+0x3a>
 80051da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80051de:	d100      	bne.n	80051e2 <__cvt+0x36>
 80051e0:	3501      	adds	r5, #1
 80051e2:	2302      	movs	r3, #2
 80051e4:	e000      	b.n	80051e8 <__cvt+0x3c>
 80051e6:	2303      	movs	r3, #3
 80051e8:	aa07      	add	r2, sp, #28
 80051ea:	9204      	str	r2, [sp, #16]
 80051ec:	aa06      	add	r2, sp, #24
 80051ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 80051f2:	e9cd 3500 	strd	r3, r5, [sp]
 80051f6:	4622      	mov	r2, r4
 80051f8:	463b      	mov	r3, r7
 80051fa:	f000 fe91 	bl	8005f20 <_dtoa_r>
 80051fe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005202:	4606      	mov	r6, r0
 8005204:	d102      	bne.n	800520c <__cvt+0x60>
 8005206:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005208:	07db      	lsls	r3, r3, #31
 800520a:	d522      	bpl.n	8005252 <__cvt+0xa6>
 800520c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005210:	eb06 0905 	add.w	r9, r6, r5
 8005214:	d110      	bne.n	8005238 <__cvt+0x8c>
 8005216:	7833      	ldrb	r3, [r6, #0]
 8005218:	2b30      	cmp	r3, #48	; 0x30
 800521a:	d10a      	bne.n	8005232 <__cvt+0x86>
 800521c:	2200      	movs	r2, #0
 800521e:	2300      	movs	r3, #0
 8005220:	4620      	mov	r0, r4
 8005222:	4639      	mov	r1, r7
 8005224:	f7fb fbc0 	bl	80009a8 <__aeabi_dcmpeq>
 8005228:	b918      	cbnz	r0, 8005232 <__cvt+0x86>
 800522a:	f1c5 0501 	rsb	r5, r5, #1
 800522e:	f8ca 5000 	str.w	r5, [sl]
 8005232:	f8da 3000 	ldr.w	r3, [sl]
 8005236:	4499      	add	r9, r3
 8005238:	2200      	movs	r2, #0
 800523a:	2300      	movs	r3, #0
 800523c:	4620      	mov	r0, r4
 800523e:	4639      	mov	r1, r7
 8005240:	f7fb fbb2 	bl	80009a8 <__aeabi_dcmpeq>
 8005244:	b108      	cbz	r0, 800524a <__cvt+0x9e>
 8005246:	f8cd 901c 	str.w	r9, [sp, #28]
 800524a:	2230      	movs	r2, #48	; 0x30
 800524c:	9b07      	ldr	r3, [sp, #28]
 800524e:	454b      	cmp	r3, r9
 8005250:	d307      	bcc.n	8005262 <__cvt+0xb6>
 8005252:	4630      	mov	r0, r6
 8005254:	9b07      	ldr	r3, [sp, #28]
 8005256:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005258:	1b9b      	subs	r3, r3, r6
 800525a:	6013      	str	r3, [r2, #0]
 800525c:	b008      	add	sp, #32
 800525e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005262:	1c59      	adds	r1, r3, #1
 8005264:	9107      	str	r1, [sp, #28]
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	e7f0      	b.n	800524c <__cvt+0xa0>

0800526a <__exponent>:
 800526a:	4603      	mov	r3, r0
 800526c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800526e:	2900      	cmp	r1, #0
 8005270:	f803 2b02 	strb.w	r2, [r3], #2
 8005274:	bfb6      	itet	lt
 8005276:	222d      	movlt	r2, #45	; 0x2d
 8005278:	222b      	movge	r2, #43	; 0x2b
 800527a:	4249      	neglt	r1, r1
 800527c:	2909      	cmp	r1, #9
 800527e:	7042      	strb	r2, [r0, #1]
 8005280:	dd2a      	ble.n	80052d8 <__exponent+0x6e>
 8005282:	f10d 0207 	add.w	r2, sp, #7
 8005286:	4617      	mov	r7, r2
 8005288:	260a      	movs	r6, #10
 800528a:	fb91 f5f6 	sdiv	r5, r1, r6
 800528e:	4694      	mov	ip, r2
 8005290:	fb06 1415 	mls	r4, r6, r5, r1
 8005294:	3430      	adds	r4, #48	; 0x30
 8005296:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800529a:	460c      	mov	r4, r1
 800529c:	2c63      	cmp	r4, #99	; 0x63
 800529e:	4629      	mov	r1, r5
 80052a0:	f102 32ff 	add.w	r2, r2, #4294967295
 80052a4:	dcf1      	bgt.n	800528a <__exponent+0x20>
 80052a6:	3130      	adds	r1, #48	; 0x30
 80052a8:	f1ac 0402 	sub.w	r4, ip, #2
 80052ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 80052b0:	4622      	mov	r2, r4
 80052b2:	1c41      	adds	r1, r0, #1
 80052b4:	42ba      	cmp	r2, r7
 80052b6:	d30a      	bcc.n	80052ce <__exponent+0x64>
 80052b8:	f10d 0209 	add.w	r2, sp, #9
 80052bc:	eba2 020c 	sub.w	r2, r2, ip
 80052c0:	42bc      	cmp	r4, r7
 80052c2:	bf88      	it	hi
 80052c4:	2200      	movhi	r2, #0
 80052c6:	4413      	add	r3, r2
 80052c8:	1a18      	subs	r0, r3, r0
 80052ca:	b003      	add	sp, #12
 80052cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ce:	f812 5b01 	ldrb.w	r5, [r2], #1
 80052d2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80052d6:	e7ed      	b.n	80052b4 <__exponent+0x4a>
 80052d8:	2330      	movs	r3, #48	; 0x30
 80052da:	3130      	adds	r1, #48	; 0x30
 80052dc:	7083      	strb	r3, [r0, #2]
 80052de:	70c1      	strb	r1, [r0, #3]
 80052e0:	1d03      	adds	r3, r0, #4
 80052e2:	e7f1      	b.n	80052c8 <__exponent+0x5e>

080052e4 <_printf_float>:
 80052e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e8:	b091      	sub	sp, #68	; 0x44
 80052ea:	460c      	mov	r4, r1
 80052ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80052f0:	4616      	mov	r6, r2
 80052f2:	461f      	mov	r7, r3
 80052f4:	4605      	mov	r5, r0
 80052f6:	f000 fce5 	bl	8005cc4 <_localeconv_r>
 80052fa:	6803      	ldr	r3, [r0, #0]
 80052fc:	4618      	mov	r0, r3
 80052fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005300:	f7fa ff26 	bl	8000150 <strlen>
 8005304:	2300      	movs	r3, #0
 8005306:	930e      	str	r3, [sp, #56]	; 0x38
 8005308:	f8d8 3000 	ldr.w	r3, [r8]
 800530c:	900a      	str	r0, [sp, #40]	; 0x28
 800530e:	3307      	adds	r3, #7
 8005310:	f023 0307 	bic.w	r3, r3, #7
 8005314:	f103 0208 	add.w	r2, r3, #8
 8005318:	f894 9018 	ldrb.w	r9, [r4, #24]
 800531c:	f8d4 b000 	ldr.w	fp, [r4]
 8005320:	f8c8 2000 	str.w	r2, [r8]
 8005324:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005328:	4652      	mov	r2, sl
 800532a:	4643      	mov	r3, r8
 800532c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005330:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005334:	930b      	str	r3, [sp, #44]	; 0x2c
 8005336:	f04f 32ff 	mov.w	r2, #4294967295
 800533a:	4650      	mov	r0, sl
 800533c:	4b9c      	ldr	r3, [pc, #624]	; (80055b0 <_printf_float+0x2cc>)
 800533e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005340:	f7fb fb64 	bl	8000a0c <__aeabi_dcmpun>
 8005344:	bb70      	cbnz	r0, 80053a4 <_printf_float+0xc0>
 8005346:	f04f 32ff 	mov.w	r2, #4294967295
 800534a:	4650      	mov	r0, sl
 800534c:	4b98      	ldr	r3, [pc, #608]	; (80055b0 <_printf_float+0x2cc>)
 800534e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005350:	f7fb fb3e 	bl	80009d0 <__aeabi_dcmple>
 8005354:	bb30      	cbnz	r0, 80053a4 <_printf_float+0xc0>
 8005356:	2200      	movs	r2, #0
 8005358:	2300      	movs	r3, #0
 800535a:	4650      	mov	r0, sl
 800535c:	4641      	mov	r1, r8
 800535e:	f7fb fb2d 	bl	80009bc <__aeabi_dcmplt>
 8005362:	b110      	cbz	r0, 800536a <_printf_float+0x86>
 8005364:	232d      	movs	r3, #45	; 0x2d
 8005366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800536a:	4a92      	ldr	r2, [pc, #584]	; (80055b4 <_printf_float+0x2d0>)
 800536c:	4b92      	ldr	r3, [pc, #584]	; (80055b8 <_printf_float+0x2d4>)
 800536e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005372:	bf94      	ite	ls
 8005374:	4690      	movls	r8, r2
 8005376:	4698      	movhi	r8, r3
 8005378:	2303      	movs	r3, #3
 800537a:	f04f 0a00 	mov.w	sl, #0
 800537e:	6123      	str	r3, [r4, #16]
 8005380:	f02b 0304 	bic.w	r3, fp, #4
 8005384:	6023      	str	r3, [r4, #0]
 8005386:	4633      	mov	r3, r6
 8005388:	4621      	mov	r1, r4
 800538a:	4628      	mov	r0, r5
 800538c:	9700      	str	r7, [sp, #0]
 800538e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005390:	f000 f9d6 	bl	8005740 <_printf_common>
 8005394:	3001      	adds	r0, #1
 8005396:	f040 8090 	bne.w	80054ba <_printf_float+0x1d6>
 800539a:	f04f 30ff 	mov.w	r0, #4294967295
 800539e:	b011      	add	sp, #68	; 0x44
 80053a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a4:	4652      	mov	r2, sl
 80053a6:	4643      	mov	r3, r8
 80053a8:	4650      	mov	r0, sl
 80053aa:	4641      	mov	r1, r8
 80053ac:	f7fb fb2e 	bl	8000a0c <__aeabi_dcmpun>
 80053b0:	b148      	cbz	r0, 80053c6 <_printf_float+0xe2>
 80053b2:	f1b8 0f00 	cmp.w	r8, #0
 80053b6:	bfb8      	it	lt
 80053b8:	232d      	movlt	r3, #45	; 0x2d
 80053ba:	4a80      	ldr	r2, [pc, #512]	; (80055bc <_printf_float+0x2d8>)
 80053bc:	bfb8      	it	lt
 80053be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80053c2:	4b7f      	ldr	r3, [pc, #508]	; (80055c0 <_printf_float+0x2dc>)
 80053c4:	e7d3      	b.n	800536e <_printf_float+0x8a>
 80053c6:	6863      	ldr	r3, [r4, #4]
 80053c8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	d142      	bne.n	8005456 <_printf_float+0x172>
 80053d0:	2306      	movs	r3, #6
 80053d2:	6063      	str	r3, [r4, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	9206      	str	r2, [sp, #24]
 80053d8:	aa0e      	add	r2, sp, #56	; 0x38
 80053da:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80053de:	aa0d      	add	r2, sp, #52	; 0x34
 80053e0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80053e4:	9203      	str	r2, [sp, #12]
 80053e6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80053ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80053ee:	6023      	str	r3, [r4, #0]
 80053f0:	6863      	ldr	r3, [r4, #4]
 80053f2:	4652      	mov	r2, sl
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	4628      	mov	r0, r5
 80053f8:	4643      	mov	r3, r8
 80053fa:	910b      	str	r1, [sp, #44]	; 0x2c
 80053fc:	f7ff fed6 	bl	80051ac <__cvt>
 8005400:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005402:	4680      	mov	r8, r0
 8005404:	2947      	cmp	r1, #71	; 0x47
 8005406:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005408:	d108      	bne.n	800541c <_printf_float+0x138>
 800540a:	1cc8      	adds	r0, r1, #3
 800540c:	db02      	blt.n	8005414 <_printf_float+0x130>
 800540e:	6863      	ldr	r3, [r4, #4]
 8005410:	4299      	cmp	r1, r3
 8005412:	dd40      	ble.n	8005496 <_printf_float+0x1b2>
 8005414:	f1a9 0902 	sub.w	r9, r9, #2
 8005418:	fa5f f989 	uxtb.w	r9, r9
 800541c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005420:	d81f      	bhi.n	8005462 <_printf_float+0x17e>
 8005422:	464a      	mov	r2, r9
 8005424:	3901      	subs	r1, #1
 8005426:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800542a:	910d      	str	r1, [sp, #52]	; 0x34
 800542c:	f7ff ff1d 	bl	800526a <__exponent>
 8005430:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005432:	4682      	mov	sl, r0
 8005434:	1813      	adds	r3, r2, r0
 8005436:	2a01      	cmp	r2, #1
 8005438:	6123      	str	r3, [r4, #16]
 800543a:	dc02      	bgt.n	8005442 <_printf_float+0x15e>
 800543c:	6822      	ldr	r2, [r4, #0]
 800543e:	07d2      	lsls	r2, r2, #31
 8005440:	d501      	bpl.n	8005446 <_printf_float+0x162>
 8005442:	3301      	adds	r3, #1
 8005444:	6123      	str	r3, [r4, #16]
 8005446:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800544a:	2b00      	cmp	r3, #0
 800544c:	d09b      	beq.n	8005386 <_printf_float+0xa2>
 800544e:	232d      	movs	r3, #45	; 0x2d
 8005450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005454:	e797      	b.n	8005386 <_printf_float+0xa2>
 8005456:	2947      	cmp	r1, #71	; 0x47
 8005458:	d1bc      	bne.n	80053d4 <_printf_float+0xf0>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1ba      	bne.n	80053d4 <_printf_float+0xf0>
 800545e:	2301      	movs	r3, #1
 8005460:	e7b7      	b.n	80053d2 <_printf_float+0xee>
 8005462:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005466:	d118      	bne.n	800549a <_printf_float+0x1b6>
 8005468:	2900      	cmp	r1, #0
 800546a:	6863      	ldr	r3, [r4, #4]
 800546c:	dd0b      	ble.n	8005486 <_printf_float+0x1a2>
 800546e:	6121      	str	r1, [r4, #16]
 8005470:	b913      	cbnz	r3, 8005478 <_printf_float+0x194>
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	07d0      	lsls	r0, r2, #31
 8005476:	d502      	bpl.n	800547e <_printf_float+0x19a>
 8005478:	3301      	adds	r3, #1
 800547a:	440b      	add	r3, r1
 800547c:	6123      	str	r3, [r4, #16]
 800547e:	f04f 0a00 	mov.w	sl, #0
 8005482:	65a1      	str	r1, [r4, #88]	; 0x58
 8005484:	e7df      	b.n	8005446 <_printf_float+0x162>
 8005486:	b913      	cbnz	r3, 800548e <_printf_float+0x1aa>
 8005488:	6822      	ldr	r2, [r4, #0]
 800548a:	07d2      	lsls	r2, r2, #31
 800548c:	d501      	bpl.n	8005492 <_printf_float+0x1ae>
 800548e:	3302      	adds	r3, #2
 8005490:	e7f4      	b.n	800547c <_printf_float+0x198>
 8005492:	2301      	movs	r3, #1
 8005494:	e7f2      	b.n	800547c <_printf_float+0x198>
 8005496:	f04f 0967 	mov.w	r9, #103	; 0x67
 800549a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800549c:	4299      	cmp	r1, r3
 800549e:	db05      	blt.n	80054ac <_printf_float+0x1c8>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	6121      	str	r1, [r4, #16]
 80054a4:	07d8      	lsls	r0, r3, #31
 80054a6:	d5ea      	bpl.n	800547e <_printf_float+0x19a>
 80054a8:	1c4b      	adds	r3, r1, #1
 80054aa:	e7e7      	b.n	800547c <_printf_float+0x198>
 80054ac:	2900      	cmp	r1, #0
 80054ae:	bfcc      	ite	gt
 80054b0:	2201      	movgt	r2, #1
 80054b2:	f1c1 0202 	rsble	r2, r1, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	e7e0      	b.n	800547c <_printf_float+0x198>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	055a      	lsls	r2, r3, #21
 80054be:	d407      	bmi.n	80054d0 <_printf_float+0x1ec>
 80054c0:	6923      	ldr	r3, [r4, #16]
 80054c2:	4642      	mov	r2, r8
 80054c4:	4631      	mov	r1, r6
 80054c6:	4628      	mov	r0, r5
 80054c8:	47b8      	blx	r7
 80054ca:	3001      	adds	r0, #1
 80054cc:	d12b      	bne.n	8005526 <_printf_float+0x242>
 80054ce:	e764      	b.n	800539a <_printf_float+0xb6>
 80054d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80054d4:	f240 80dd 	bls.w	8005692 <_printf_float+0x3ae>
 80054d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054dc:	2200      	movs	r2, #0
 80054de:	2300      	movs	r3, #0
 80054e0:	f7fb fa62 	bl	80009a8 <__aeabi_dcmpeq>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d033      	beq.n	8005550 <_printf_float+0x26c>
 80054e8:	2301      	movs	r3, #1
 80054ea:	4631      	mov	r1, r6
 80054ec:	4628      	mov	r0, r5
 80054ee:	4a35      	ldr	r2, [pc, #212]	; (80055c4 <_printf_float+0x2e0>)
 80054f0:	47b8      	blx	r7
 80054f2:	3001      	adds	r0, #1
 80054f4:	f43f af51 	beq.w	800539a <_printf_float+0xb6>
 80054f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054fc:	429a      	cmp	r2, r3
 80054fe:	db02      	blt.n	8005506 <_printf_float+0x222>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	07d8      	lsls	r0, r3, #31
 8005504:	d50f      	bpl.n	8005526 <_printf_float+0x242>
 8005506:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800550a:	4631      	mov	r1, r6
 800550c:	4628      	mov	r0, r5
 800550e:	47b8      	blx	r7
 8005510:	3001      	adds	r0, #1
 8005512:	f43f af42 	beq.w	800539a <_printf_float+0xb6>
 8005516:	f04f 0800 	mov.w	r8, #0
 800551a:	f104 091a 	add.w	r9, r4, #26
 800551e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005520:	3b01      	subs	r3, #1
 8005522:	4543      	cmp	r3, r8
 8005524:	dc09      	bgt.n	800553a <_printf_float+0x256>
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	079b      	lsls	r3, r3, #30
 800552a:	f100 8104 	bmi.w	8005736 <_printf_float+0x452>
 800552e:	68e0      	ldr	r0, [r4, #12]
 8005530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005532:	4298      	cmp	r0, r3
 8005534:	bfb8      	it	lt
 8005536:	4618      	movlt	r0, r3
 8005538:	e731      	b.n	800539e <_printf_float+0xba>
 800553a:	2301      	movs	r3, #1
 800553c:	464a      	mov	r2, r9
 800553e:	4631      	mov	r1, r6
 8005540:	4628      	mov	r0, r5
 8005542:	47b8      	blx	r7
 8005544:	3001      	adds	r0, #1
 8005546:	f43f af28 	beq.w	800539a <_printf_float+0xb6>
 800554a:	f108 0801 	add.w	r8, r8, #1
 800554e:	e7e6      	b.n	800551e <_printf_float+0x23a>
 8005550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005552:	2b00      	cmp	r3, #0
 8005554:	dc38      	bgt.n	80055c8 <_printf_float+0x2e4>
 8005556:	2301      	movs	r3, #1
 8005558:	4631      	mov	r1, r6
 800555a:	4628      	mov	r0, r5
 800555c:	4a19      	ldr	r2, [pc, #100]	; (80055c4 <_printf_float+0x2e0>)
 800555e:	47b8      	blx	r7
 8005560:	3001      	adds	r0, #1
 8005562:	f43f af1a 	beq.w	800539a <_printf_float+0xb6>
 8005566:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800556a:	4313      	orrs	r3, r2
 800556c:	d102      	bne.n	8005574 <_printf_float+0x290>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	07d9      	lsls	r1, r3, #31
 8005572:	d5d8      	bpl.n	8005526 <_printf_float+0x242>
 8005574:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005578:	4631      	mov	r1, r6
 800557a:	4628      	mov	r0, r5
 800557c:	47b8      	blx	r7
 800557e:	3001      	adds	r0, #1
 8005580:	f43f af0b 	beq.w	800539a <_printf_float+0xb6>
 8005584:	f04f 0900 	mov.w	r9, #0
 8005588:	f104 0a1a 	add.w	sl, r4, #26
 800558c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800558e:	425b      	negs	r3, r3
 8005590:	454b      	cmp	r3, r9
 8005592:	dc01      	bgt.n	8005598 <_printf_float+0x2b4>
 8005594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005596:	e794      	b.n	80054c2 <_printf_float+0x1de>
 8005598:	2301      	movs	r3, #1
 800559a:	4652      	mov	r2, sl
 800559c:	4631      	mov	r1, r6
 800559e:	4628      	mov	r0, r5
 80055a0:	47b8      	blx	r7
 80055a2:	3001      	adds	r0, #1
 80055a4:	f43f aef9 	beq.w	800539a <_printf_float+0xb6>
 80055a8:	f109 0901 	add.w	r9, r9, #1
 80055ac:	e7ee      	b.n	800558c <_printf_float+0x2a8>
 80055ae:	bf00      	nop
 80055b0:	7fefffff 	.word	0x7fefffff
 80055b4:	08008aee 	.word	0x08008aee
 80055b8:	08008af2 	.word	0x08008af2
 80055bc:	08008af6 	.word	0x08008af6
 80055c0:	08008afa 	.word	0x08008afa
 80055c4:	08008afe 	.word	0x08008afe
 80055c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055cc:	429a      	cmp	r2, r3
 80055ce:	bfa8      	it	ge
 80055d0:	461a      	movge	r2, r3
 80055d2:	2a00      	cmp	r2, #0
 80055d4:	4691      	mov	r9, r2
 80055d6:	dc37      	bgt.n	8005648 <_printf_float+0x364>
 80055d8:	f04f 0b00 	mov.w	fp, #0
 80055dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055e0:	f104 021a 	add.w	r2, r4, #26
 80055e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80055e8:	ebaa 0309 	sub.w	r3, sl, r9
 80055ec:	455b      	cmp	r3, fp
 80055ee:	dc33      	bgt.n	8005658 <_printf_float+0x374>
 80055f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055f4:	429a      	cmp	r2, r3
 80055f6:	db3b      	blt.n	8005670 <_printf_float+0x38c>
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	07da      	lsls	r2, r3, #31
 80055fc:	d438      	bmi.n	8005670 <_printf_float+0x38c>
 80055fe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005602:	eba2 0903 	sub.w	r9, r2, r3
 8005606:	eba2 020a 	sub.w	r2, r2, sl
 800560a:	4591      	cmp	r9, r2
 800560c:	bfa8      	it	ge
 800560e:	4691      	movge	r9, r2
 8005610:	f1b9 0f00 	cmp.w	r9, #0
 8005614:	dc34      	bgt.n	8005680 <_printf_float+0x39c>
 8005616:	f04f 0800 	mov.w	r8, #0
 800561a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800561e:	f104 0a1a 	add.w	sl, r4, #26
 8005622:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	eba3 0309 	sub.w	r3, r3, r9
 800562c:	4543      	cmp	r3, r8
 800562e:	f77f af7a 	ble.w	8005526 <_printf_float+0x242>
 8005632:	2301      	movs	r3, #1
 8005634:	4652      	mov	r2, sl
 8005636:	4631      	mov	r1, r6
 8005638:	4628      	mov	r0, r5
 800563a:	47b8      	blx	r7
 800563c:	3001      	adds	r0, #1
 800563e:	f43f aeac 	beq.w	800539a <_printf_float+0xb6>
 8005642:	f108 0801 	add.w	r8, r8, #1
 8005646:	e7ec      	b.n	8005622 <_printf_float+0x33e>
 8005648:	4613      	mov	r3, r2
 800564a:	4631      	mov	r1, r6
 800564c:	4642      	mov	r2, r8
 800564e:	4628      	mov	r0, r5
 8005650:	47b8      	blx	r7
 8005652:	3001      	adds	r0, #1
 8005654:	d1c0      	bne.n	80055d8 <_printf_float+0x2f4>
 8005656:	e6a0      	b.n	800539a <_printf_float+0xb6>
 8005658:	2301      	movs	r3, #1
 800565a:	4631      	mov	r1, r6
 800565c:	4628      	mov	r0, r5
 800565e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005660:	47b8      	blx	r7
 8005662:	3001      	adds	r0, #1
 8005664:	f43f ae99 	beq.w	800539a <_printf_float+0xb6>
 8005668:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800566a:	f10b 0b01 	add.w	fp, fp, #1
 800566e:	e7b9      	b.n	80055e4 <_printf_float+0x300>
 8005670:	4631      	mov	r1, r6
 8005672:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005676:	4628      	mov	r0, r5
 8005678:	47b8      	blx	r7
 800567a:	3001      	adds	r0, #1
 800567c:	d1bf      	bne.n	80055fe <_printf_float+0x31a>
 800567e:	e68c      	b.n	800539a <_printf_float+0xb6>
 8005680:	464b      	mov	r3, r9
 8005682:	4631      	mov	r1, r6
 8005684:	4628      	mov	r0, r5
 8005686:	eb08 020a 	add.w	r2, r8, sl
 800568a:	47b8      	blx	r7
 800568c:	3001      	adds	r0, #1
 800568e:	d1c2      	bne.n	8005616 <_printf_float+0x332>
 8005690:	e683      	b.n	800539a <_printf_float+0xb6>
 8005692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005694:	2a01      	cmp	r2, #1
 8005696:	dc01      	bgt.n	800569c <_printf_float+0x3b8>
 8005698:	07db      	lsls	r3, r3, #31
 800569a:	d539      	bpl.n	8005710 <_printf_float+0x42c>
 800569c:	2301      	movs	r3, #1
 800569e:	4642      	mov	r2, r8
 80056a0:	4631      	mov	r1, r6
 80056a2:	4628      	mov	r0, r5
 80056a4:	47b8      	blx	r7
 80056a6:	3001      	adds	r0, #1
 80056a8:	f43f ae77 	beq.w	800539a <_printf_float+0xb6>
 80056ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056b0:	4631      	mov	r1, r6
 80056b2:	4628      	mov	r0, r5
 80056b4:	47b8      	blx	r7
 80056b6:	3001      	adds	r0, #1
 80056b8:	f43f ae6f 	beq.w	800539a <_printf_float+0xb6>
 80056bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056c0:	2200      	movs	r2, #0
 80056c2:	2300      	movs	r3, #0
 80056c4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80056c8:	f7fb f96e 	bl	80009a8 <__aeabi_dcmpeq>
 80056cc:	b9d8      	cbnz	r0, 8005706 <_printf_float+0x422>
 80056ce:	f109 33ff 	add.w	r3, r9, #4294967295
 80056d2:	f108 0201 	add.w	r2, r8, #1
 80056d6:	4631      	mov	r1, r6
 80056d8:	4628      	mov	r0, r5
 80056da:	47b8      	blx	r7
 80056dc:	3001      	adds	r0, #1
 80056de:	d10e      	bne.n	80056fe <_printf_float+0x41a>
 80056e0:	e65b      	b.n	800539a <_printf_float+0xb6>
 80056e2:	2301      	movs	r3, #1
 80056e4:	464a      	mov	r2, r9
 80056e6:	4631      	mov	r1, r6
 80056e8:	4628      	mov	r0, r5
 80056ea:	47b8      	blx	r7
 80056ec:	3001      	adds	r0, #1
 80056ee:	f43f ae54 	beq.w	800539a <_printf_float+0xb6>
 80056f2:	f108 0801 	add.w	r8, r8, #1
 80056f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056f8:	3b01      	subs	r3, #1
 80056fa:	4543      	cmp	r3, r8
 80056fc:	dcf1      	bgt.n	80056e2 <_printf_float+0x3fe>
 80056fe:	4653      	mov	r3, sl
 8005700:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005704:	e6de      	b.n	80054c4 <_printf_float+0x1e0>
 8005706:	f04f 0800 	mov.w	r8, #0
 800570a:	f104 091a 	add.w	r9, r4, #26
 800570e:	e7f2      	b.n	80056f6 <_printf_float+0x412>
 8005710:	2301      	movs	r3, #1
 8005712:	4642      	mov	r2, r8
 8005714:	e7df      	b.n	80056d6 <_printf_float+0x3f2>
 8005716:	2301      	movs	r3, #1
 8005718:	464a      	mov	r2, r9
 800571a:	4631      	mov	r1, r6
 800571c:	4628      	mov	r0, r5
 800571e:	47b8      	blx	r7
 8005720:	3001      	adds	r0, #1
 8005722:	f43f ae3a 	beq.w	800539a <_printf_float+0xb6>
 8005726:	f108 0801 	add.w	r8, r8, #1
 800572a:	68e3      	ldr	r3, [r4, #12]
 800572c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800572e:	1a5b      	subs	r3, r3, r1
 8005730:	4543      	cmp	r3, r8
 8005732:	dcf0      	bgt.n	8005716 <_printf_float+0x432>
 8005734:	e6fb      	b.n	800552e <_printf_float+0x24a>
 8005736:	f04f 0800 	mov.w	r8, #0
 800573a:	f104 0919 	add.w	r9, r4, #25
 800573e:	e7f4      	b.n	800572a <_printf_float+0x446>

08005740 <_printf_common>:
 8005740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005744:	4616      	mov	r6, r2
 8005746:	4699      	mov	r9, r3
 8005748:	688a      	ldr	r2, [r1, #8]
 800574a:	690b      	ldr	r3, [r1, #16]
 800574c:	4607      	mov	r7, r0
 800574e:	4293      	cmp	r3, r2
 8005750:	bfb8      	it	lt
 8005752:	4613      	movlt	r3, r2
 8005754:	6033      	str	r3, [r6, #0]
 8005756:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800575a:	460c      	mov	r4, r1
 800575c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005760:	b10a      	cbz	r2, 8005766 <_printf_common+0x26>
 8005762:	3301      	adds	r3, #1
 8005764:	6033      	str	r3, [r6, #0]
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	0699      	lsls	r1, r3, #26
 800576a:	bf42      	ittt	mi
 800576c:	6833      	ldrmi	r3, [r6, #0]
 800576e:	3302      	addmi	r3, #2
 8005770:	6033      	strmi	r3, [r6, #0]
 8005772:	6825      	ldr	r5, [r4, #0]
 8005774:	f015 0506 	ands.w	r5, r5, #6
 8005778:	d106      	bne.n	8005788 <_printf_common+0x48>
 800577a:	f104 0a19 	add.w	sl, r4, #25
 800577e:	68e3      	ldr	r3, [r4, #12]
 8005780:	6832      	ldr	r2, [r6, #0]
 8005782:	1a9b      	subs	r3, r3, r2
 8005784:	42ab      	cmp	r3, r5
 8005786:	dc2b      	bgt.n	80057e0 <_printf_common+0xa0>
 8005788:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800578c:	1e13      	subs	r3, r2, #0
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	bf18      	it	ne
 8005792:	2301      	movne	r3, #1
 8005794:	0692      	lsls	r2, r2, #26
 8005796:	d430      	bmi.n	80057fa <_printf_common+0xba>
 8005798:	4649      	mov	r1, r9
 800579a:	4638      	mov	r0, r7
 800579c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057a0:	47c0      	blx	r8
 80057a2:	3001      	adds	r0, #1
 80057a4:	d023      	beq.n	80057ee <_printf_common+0xae>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	6922      	ldr	r2, [r4, #16]
 80057aa:	f003 0306 	and.w	r3, r3, #6
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	bf14      	ite	ne
 80057b2:	2500      	movne	r5, #0
 80057b4:	6833      	ldreq	r3, [r6, #0]
 80057b6:	f04f 0600 	mov.w	r6, #0
 80057ba:	bf08      	it	eq
 80057bc:	68e5      	ldreq	r5, [r4, #12]
 80057be:	f104 041a 	add.w	r4, r4, #26
 80057c2:	bf08      	it	eq
 80057c4:	1aed      	subeq	r5, r5, r3
 80057c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80057ca:	bf08      	it	eq
 80057cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057d0:	4293      	cmp	r3, r2
 80057d2:	bfc4      	itt	gt
 80057d4:	1a9b      	subgt	r3, r3, r2
 80057d6:	18ed      	addgt	r5, r5, r3
 80057d8:	42b5      	cmp	r5, r6
 80057da:	d11a      	bne.n	8005812 <_printf_common+0xd2>
 80057dc:	2000      	movs	r0, #0
 80057de:	e008      	b.n	80057f2 <_printf_common+0xb2>
 80057e0:	2301      	movs	r3, #1
 80057e2:	4652      	mov	r2, sl
 80057e4:	4649      	mov	r1, r9
 80057e6:	4638      	mov	r0, r7
 80057e8:	47c0      	blx	r8
 80057ea:	3001      	adds	r0, #1
 80057ec:	d103      	bne.n	80057f6 <_printf_common+0xb6>
 80057ee:	f04f 30ff 	mov.w	r0, #4294967295
 80057f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f6:	3501      	adds	r5, #1
 80057f8:	e7c1      	b.n	800577e <_printf_common+0x3e>
 80057fa:	2030      	movs	r0, #48	; 0x30
 80057fc:	18e1      	adds	r1, r4, r3
 80057fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005808:	4422      	add	r2, r4
 800580a:	3302      	adds	r3, #2
 800580c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005810:	e7c2      	b.n	8005798 <_printf_common+0x58>
 8005812:	2301      	movs	r3, #1
 8005814:	4622      	mov	r2, r4
 8005816:	4649      	mov	r1, r9
 8005818:	4638      	mov	r0, r7
 800581a:	47c0      	blx	r8
 800581c:	3001      	adds	r0, #1
 800581e:	d0e6      	beq.n	80057ee <_printf_common+0xae>
 8005820:	3601      	adds	r6, #1
 8005822:	e7d9      	b.n	80057d8 <_printf_common+0x98>

08005824 <_printf_i>:
 8005824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005828:	7e0f      	ldrb	r7, [r1, #24]
 800582a:	4691      	mov	r9, r2
 800582c:	2f78      	cmp	r7, #120	; 0x78
 800582e:	4680      	mov	r8, r0
 8005830:	460c      	mov	r4, r1
 8005832:	469a      	mov	sl, r3
 8005834:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005836:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800583a:	d807      	bhi.n	800584c <_printf_i+0x28>
 800583c:	2f62      	cmp	r7, #98	; 0x62
 800583e:	d80a      	bhi.n	8005856 <_printf_i+0x32>
 8005840:	2f00      	cmp	r7, #0
 8005842:	f000 80d5 	beq.w	80059f0 <_printf_i+0x1cc>
 8005846:	2f58      	cmp	r7, #88	; 0x58
 8005848:	f000 80c1 	beq.w	80059ce <_printf_i+0x1aa>
 800584c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005850:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005854:	e03a      	b.n	80058cc <_printf_i+0xa8>
 8005856:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800585a:	2b15      	cmp	r3, #21
 800585c:	d8f6      	bhi.n	800584c <_printf_i+0x28>
 800585e:	a101      	add	r1, pc, #4	; (adr r1, 8005864 <_printf_i+0x40>)
 8005860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005864:	080058bd 	.word	0x080058bd
 8005868:	080058d1 	.word	0x080058d1
 800586c:	0800584d 	.word	0x0800584d
 8005870:	0800584d 	.word	0x0800584d
 8005874:	0800584d 	.word	0x0800584d
 8005878:	0800584d 	.word	0x0800584d
 800587c:	080058d1 	.word	0x080058d1
 8005880:	0800584d 	.word	0x0800584d
 8005884:	0800584d 	.word	0x0800584d
 8005888:	0800584d 	.word	0x0800584d
 800588c:	0800584d 	.word	0x0800584d
 8005890:	080059d7 	.word	0x080059d7
 8005894:	080058fd 	.word	0x080058fd
 8005898:	08005991 	.word	0x08005991
 800589c:	0800584d 	.word	0x0800584d
 80058a0:	0800584d 	.word	0x0800584d
 80058a4:	080059f9 	.word	0x080059f9
 80058a8:	0800584d 	.word	0x0800584d
 80058ac:	080058fd 	.word	0x080058fd
 80058b0:	0800584d 	.word	0x0800584d
 80058b4:	0800584d 	.word	0x0800584d
 80058b8:	08005999 	.word	0x08005999
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	1d1a      	adds	r2, r3, #4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	602a      	str	r2, [r5, #0]
 80058c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0a0      	b.n	8005a12 <_printf_i+0x1ee>
 80058d0:	6820      	ldr	r0, [r4, #0]
 80058d2:	682b      	ldr	r3, [r5, #0]
 80058d4:	0607      	lsls	r7, r0, #24
 80058d6:	f103 0104 	add.w	r1, r3, #4
 80058da:	6029      	str	r1, [r5, #0]
 80058dc:	d501      	bpl.n	80058e2 <_printf_i+0xbe>
 80058de:	681e      	ldr	r6, [r3, #0]
 80058e0:	e003      	b.n	80058ea <_printf_i+0xc6>
 80058e2:	0646      	lsls	r6, r0, #25
 80058e4:	d5fb      	bpl.n	80058de <_printf_i+0xba>
 80058e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058ea:	2e00      	cmp	r6, #0
 80058ec:	da03      	bge.n	80058f6 <_printf_i+0xd2>
 80058ee:	232d      	movs	r3, #45	; 0x2d
 80058f0:	4276      	negs	r6, r6
 80058f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f6:	230a      	movs	r3, #10
 80058f8:	4859      	ldr	r0, [pc, #356]	; (8005a60 <_printf_i+0x23c>)
 80058fa:	e012      	b.n	8005922 <_printf_i+0xfe>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	6820      	ldr	r0, [r4, #0]
 8005900:	1d19      	adds	r1, r3, #4
 8005902:	6029      	str	r1, [r5, #0]
 8005904:	0605      	lsls	r5, r0, #24
 8005906:	d501      	bpl.n	800590c <_printf_i+0xe8>
 8005908:	681e      	ldr	r6, [r3, #0]
 800590a:	e002      	b.n	8005912 <_printf_i+0xee>
 800590c:	0641      	lsls	r1, r0, #25
 800590e:	d5fb      	bpl.n	8005908 <_printf_i+0xe4>
 8005910:	881e      	ldrh	r6, [r3, #0]
 8005912:	2f6f      	cmp	r7, #111	; 0x6f
 8005914:	bf0c      	ite	eq
 8005916:	2308      	moveq	r3, #8
 8005918:	230a      	movne	r3, #10
 800591a:	4851      	ldr	r0, [pc, #324]	; (8005a60 <_printf_i+0x23c>)
 800591c:	2100      	movs	r1, #0
 800591e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005922:	6865      	ldr	r5, [r4, #4]
 8005924:	2d00      	cmp	r5, #0
 8005926:	bfa8      	it	ge
 8005928:	6821      	ldrge	r1, [r4, #0]
 800592a:	60a5      	str	r5, [r4, #8]
 800592c:	bfa4      	itt	ge
 800592e:	f021 0104 	bicge.w	r1, r1, #4
 8005932:	6021      	strge	r1, [r4, #0]
 8005934:	b90e      	cbnz	r6, 800593a <_printf_i+0x116>
 8005936:	2d00      	cmp	r5, #0
 8005938:	d04b      	beq.n	80059d2 <_printf_i+0x1ae>
 800593a:	4615      	mov	r5, r2
 800593c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005940:	fb03 6711 	mls	r7, r3, r1, r6
 8005944:	5dc7      	ldrb	r7, [r0, r7]
 8005946:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800594a:	4637      	mov	r7, r6
 800594c:	42bb      	cmp	r3, r7
 800594e:	460e      	mov	r6, r1
 8005950:	d9f4      	bls.n	800593c <_printf_i+0x118>
 8005952:	2b08      	cmp	r3, #8
 8005954:	d10b      	bne.n	800596e <_printf_i+0x14a>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	07de      	lsls	r6, r3, #31
 800595a:	d508      	bpl.n	800596e <_printf_i+0x14a>
 800595c:	6923      	ldr	r3, [r4, #16]
 800595e:	6861      	ldr	r1, [r4, #4]
 8005960:	4299      	cmp	r1, r3
 8005962:	bfde      	ittt	le
 8005964:	2330      	movle	r3, #48	; 0x30
 8005966:	f805 3c01 	strble.w	r3, [r5, #-1]
 800596a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800596e:	1b52      	subs	r2, r2, r5
 8005970:	6122      	str	r2, [r4, #16]
 8005972:	464b      	mov	r3, r9
 8005974:	4621      	mov	r1, r4
 8005976:	4640      	mov	r0, r8
 8005978:	f8cd a000 	str.w	sl, [sp]
 800597c:	aa03      	add	r2, sp, #12
 800597e:	f7ff fedf 	bl	8005740 <_printf_common>
 8005982:	3001      	adds	r0, #1
 8005984:	d14a      	bne.n	8005a1c <_printf_i+0x1f8>
 8005986:	f04f 30ff 	mov.w	r0, #4294967295
 800598a:	b004      	add	sp, #16
 800598c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	f043 0320 	orr.w	r3, r3, #32
 8005996:	6023      	str	r3, [r4, #0]
 8005998:	2778      	movs	r7, #120	; 0x78
 800599a:	4832      	ldr	r0, [pc, #200]	; (8005a64 <_printf_i+0x240>)
 800599c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	6829      	ldr	r1, [r5, #0]
 80059a4:	061f      	lsls	r7, r3, #24
 80059a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80059aa:	d402      	bmi.n	80059b2 <_printf_i+0x18e>
 80059ac:	065f      	lsls	r7, r3, #25
 80059ae:	bf48      	it	mi
 80059b0:	b2b6      	uxthmi	r6, r6
 80059b2:	07df      	lsls	r7, r3, #31
 80059b4:	bf48      	it	mi
 80059b6:	f043 0320 	orrmi.w	r3, r3, #32
 80059ba:	6029      	str	r1, [r5, #0]
 80059bc:	bf48      	it	mi
 80059be:	6023      	strmi	r3, [r4, #0]
 80059c0:	b91e      	cbnz	r6, 80059ca <_printf_i+0x1a6>
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	f023 0320 	bic.w	r3, r3, #32
 80059c8:	6023      	str	r3, [r4, #0]
 80059ca:	2310      	movs	r3, #16
 80059cc:	e7a6      	b.n	800591c <_printf_i+0xf8>
 80059ce:	4824      	ldr	r0, [pc, #144]	; (8005a60 <_printf_i+0x23c>)
 80059d0:	e7e4      	b.n	800599c <_printf_i+0x178>
 80059d2:	4615      	mov	r5, r2
 80059d4:	e7bd      	b.n	8005952 <_printf_i+0x12e>
 80059d6:	682b      	ldr	r3, [r5, #0]
 80059d8:	6826      	ldr	r6, [r4, #0]
 80059da:	1d18      	adds	r0, r3, #4
 80059dc:	6961      	ldr	r1, [r4, #20]
 80059de:	6028      	str	r0, [r5, #0]
 80059e0:	0635      	lsls	r5, r6, #24
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	d501      	bpl.n	80059ea <_printf_i+0x1c6>
 80059e6:	6019      	str	r1, [r3, #0]
 80059e8:	e002      	b.n	80059f0 <_printf_i+0x1cc>
 80059ea:	0670      	lsls	r0, r6, #25
 80059ec:	d5fb      	bpl.n	80059e6 <_printf_i+0x1c2>
 80059ee:	8019      	strh	r1, [r3, #0]
 80059f0:	2300      	movs	r3, #0
 80059f2:	4615      	mov	r5, r2
 80059f4:	6123      	str	r3, [r4, #16]
 80059f6:	e7bc      	b.n	8005972 <_printf_i+0x14e>
 80059f8:	682b      	ldr	r3, [r5, #0]
 80059fa:	2100      	movs	r1, #0
 80059fc:	1d1a      	adds	r2, r3, #4
 80059fe:	602a      	str	r2, [r5, #0]
 8005a00:	681d      	ldr	r5, [r3, #0]
 8005a02:	6862      	ldr	r2, [r4, #4]
 8005a04:	4628      	mov	r0, r5
 8005a06:	f000 f9e3 	bl	8005dd0 <memchr>
 8005a0a:	b108      	cbz	r0, 8005a10 <_printf_i+0x1ec>
 8005a0c:	1b40      	subs	r0, r0, r5
 8005a0e:	6060      	str	r0, [r4, #4]
 8005a10:	6863      	ldr	r3, [r4, #4]
 8005a12:	6123      	str	r3, [r4, #16]
 8005a14:	2300      	movs	r3, #0
 8005a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a1a:	e7aa      	b.n	8005972 <_printf_i+0x14e>
 8005a1c:	462a      	mov	r2, r5
 8005a1e:	4649      	mov	r1, r9
 8005a20:	4640      	mov	r0, r8
 8005a22:	6923      	ldr	r3, [r4, #16]
 8005a24:	47d0      	blx	sl
 8005a26:	3001      	adds	r0, #1
 8005a28:	d0ad      	beq.n	8005986 <_printf_i+0x162>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	079b      	lsls	r3, r3, #30
 8005a2e:	d413      	bmi.n	8005a58 <_printf_i+0x234>
 8005a30:	68e0      	ldr	r0, [r4, #12]
 8005a32:	9b03      	ldr	r3, [sp, #12]
 8005a34:	4298      	cmp	r0, r3
 8005a36:	bfb8      	it	lt
 8005a38:	4618      	movlt	r0, r3
 8005a3a:	e7a6      	b.n	800598a <_printf_i+0x166>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	4632      	mov	r2, r6
 8005a40:	4649      	mov	r1, r9
 8005a42:	4640      	mov	r0, r8
 8005a44:	47d0      	blx	sl
 8005a46:	3001      	adds	r0, #1
 8005a48:	d09d      	beq.n	8005986 <_printf_i+0x162>
 8005a4a:	3501      	adds	r5, #1
 8005a4c:	68e3      	ldr	r3, [r4, #12]
 8005a4e:	9903      	ldr	r1, [sp, #12]
 8005a50:	1a5b      	subs	r3, r3, r1
 8005a52:	42ab      	cmp	r3, r5
 8005a54:	dcf2      	bgt.n	8005a3c <_printf_i+0x218>
 8005a56:	e7eb      	b.n	8005a30 <_printf_i+0x20c>
 8005a58:	2500      	movs	r5, #0
 8005a5a:	f104 0619 	add.w	r6, r4, #25
 8005a5e:	e7f5      	b.n	8005a4c <_printf_i+0x228>
 8005a60:	08008b00 	.word	0x08008b00
 8005a64:	08008b11 	.word	0x08008b11

08005a68 <std>:
 8005a68:	2300      	movs	r3, #0
 8005a6a:	b510      	push	{r4, lr}
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a76:	6083      	str	r3, [r0, #8]
 8005a78:	8181      	strh	r1, [r0, #12]
 8005a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8005a7c:	81c2      	strh	r2, [r0, #14]
 8005a7e:	6183      	str	r3, [r0, #24]
 8005a80:	4619      	mov	r1, r3
 8005a82:	2208      	movs	r2, #8
 8005a84:	305c      	adds	r0, #92	; 0x5c
 8005a86:	f000 f915 	bl	8005cb4 <memset>
 8005a8a:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <std+0x38>)
 8005a8c:	6224      	str	r4, [r4, #32]
 8005a8e:	6263      	str	r3, [r4, #36]	; 0x24
 8005a90:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <std+0x3c>)
 8005a92:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a94:	4b04      	ldr	r3, [pc, #16]	; (8005aa8 <std+0x40>)
 8005a96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a98:	4b04      	ldr	r3, [pc, #16]	; (8005aac <std+0x44>)
 8005a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8005a9c:	bd10      	pop	{r4, pc}
 8005a9e:	bf00      	nop
 8005aa0:	08005bed 	.word	0x08005bed
 8005aa4:	08005c0f 	.word	0x08005c0f
 8005aa8:	08005c47 	.word	0x08005c47
 8005aac:	08005c6b 	.word	0x08005c6b

08005ab0 <stdio_exit_handler>:
 8005ab0:	4a02      	ldr	r2, [pc, #8]	; (8005abc <stdio_exit_handler+0xc>)
 8005ab2:	4903      	ldr	r1, [pc, #12]	; (8005ac0 <stdio_exit_handler+0x10>)
 8005ab4:	4803      	ldr	r0, [pc, #12]	; (8005ac4 <stdio_exit_handler+0x14>)
 8005ab6:	f000 b869 	b.w	8005b8c <_fwalk_sglue>
 8005aba:	bf00      	nop
 8005abc:	20000014 	.word	0x20000014
 8005ac0:	080078a1 	.word	0x080078a1
 8005ac4:	20000020 	.word	0x20000020

08005ac8 <cleanup_stdio>:
 8005ac8:	6841      	ldr	r1, [r0, #4]
 8005aca:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <cleanup_stdio+0x34>)
 8005acc:	b510      	push	{r4, lr}
 8005ace:	4299      	cmp	r1, r3
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	d001      	beq.n	8005ad8 <cleanup_stdio+0x10>
 8005ad4:	f001 fee4 	bl	80078a0 <_fflush_r>
 8005ad8:	68a1      	ldr	r1, [r4, #8]
 8005ada:	4b09      	ldr	r3, [pc, #36]	; (8005b00 <cleanup_stdio+0x38>)
 8005adc:	4299      	cmp	r1, r3
 8005ade:	d002      	beq.n	8005ae6 <cleanup_stdio+0x1e>
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f001 fedd 	bl	80078a0 <_fflush_r>
 8005ae6:	68e1      	ldr	r1, [r4, #12]
 8005ae8:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <cleanup_stdio+0x3c>)
 8005aea:	4299      	cmp	r1, r3
 8005aec:	d004      	beq.n	8005af8 <cleanup_stdio+0x30>
 8005aee:	4620      	mov	r0, r4
 8005af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005af4:	f001 bed4 	b.w	80078a0 <_fflush_r>
 8005af8:	bd10      	pop	{r4, pc}
 8005afa:	bf00      	nop
 8005afc:	20000aec 	.word	0x20000aec
 8005b00:	20000b54 	.word	0x20000b54
 8005b04:	20000bbc 	.word	0x20000bbc

08005b08 <global_stdio_init.part.0>:
 8005b08:	b510      	push	{r4, lr}
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <global_stdio_init.part.0+0x30>)
 8005b0c:	4c0b      	ldr	r4, [pc, #44]	; (8005b3c <global_stdio_init.part.0+0x34>)
 8005b0e:	4a0c      	ldr	r2, [pc, #48]	; (8005b40 <global_stdio_init.part.0+0x38>)
 8005b10:	4620      	mov	r0, r4
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	2104      	movs	r1, #4
 8005b16:	2200      	movs	r2, #0
 8005b18:	f7ff ffa6 	bl	8005a68 <std>
 8005b1c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b20:	2201      	movs	r2, #1
 8005b22:	2109      	movs	r1, #9
 8005b24:	f7ff ffa0 	bl	8005a68 <std>
 8005b28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b32:	2112      	movs	r1, #18
 8005b34:	f7ff bf98 	b.w	8005a68 <std>
 8005b38:	20000c24 	.word	0x20000c24
 8005b3c:	20000aec 	.word	0x20000aec
 8005b40:	08005ab1 	.word	0x08005ab1

08005b44 <__sfp_lock_acquire>:
 8005b44:	4801      	ldr	r0, [pc, #4]	; (8005b4c <__sfp_lock_acquire+0x8>)
 8005b46:	f000 b941 	b.w	8005dcc <__retarget_lock_acquire_recursive>
 8005b4a:	bf00      	nop
 8005b4c:	20000c2d 	.word	0x20000c2d

08005b50 <__sfp_lock_release>:
 8005b50:	4801      	ldr	r0, [pc, #4]	; (8005b58 <__sfp_lock_release+0x8>)
 8005b52:	f000 b93c 	b.w	8005dce <__retarget_lock_release_recursive>
 8005b56:	bf00      	nop
 8005b58:	20000c2d 	.word	0x20000c2d

08005b5c <__sinit>:
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	4604      	mov	r4, r0
 8005b60:	f7ff fff0 	bl	8005b44 <__sfp_lock_acquire>
 8005b64:	6a23      	ldr	r3, [r4, #32]
 8005b66:	b11b      	cbz	r3, 8005b70 <__sinit+0x14>
 8005b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b6c:	f7ff bff0 	b.w	8005b50 <__sfp_lock_release>
 8005b70:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <__sinit+0x28>)
 8005b72:	6223      	str	r3, [r4, #32]
 8005b74:	4b04      	ldr	r3, [pc, #16]	; (8005b88 <__sinit+0x2c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f5      	bne.n	8005b68 <__sinit+0xc>
 8005b7c:	f7ff ffc4 	bl	8005b08 <global_stdio_init.part.0>
 8005b80:	e7f2      	b.n	8005b68 <__sinit+0xc>
 8005b82:	bf00      	nop
 8005b84:	08005ac9 	.word	0x08005ac9
 8005b88:	20000c24 	.word	0x20000c24

08005b8c <_fwalk_sglue>:
 8005b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b90:	4607      	mov	r7, r0
 8005b92:	4688      	mov	r8, r1
 8005b94:	4614      	mov	r4, r2
 8005b96:	2600      	movs	r6, #0
 8005b98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b9c:	f1b9 0901 	subs.w	r9, r9, #1
 8005ba0:	d505      	bpl.n	8005bae <_fwalk_sglue+0x22>
 8005ba2:	6824      	ldr	r4, [r4, #0]
 8005ba4:	2c00      	cmp	r4, #0
 8005ba6:	d1f7      	bne.n	8005b98 <_fwalk_sglue+0xc>
 8005ba8:	4630      	mov	r0, r6
 8005baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bae:	89ab      	ldrh	r3, [r5, #12]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d907      	bls.n	8005bc4 <_fwalk_sglue+0x38>
 8005bb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	d003      	beq.n	8005bc4 <_fwalk_sglue+0x38>
 8005bbc:	4629      	mov	r1, r5
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	47c0      	blx	r8
 8005bc2:	4306      	orrs	r6, r0
 8005bc4:	3568      	adds	r5, #104	; 0x68
 8005bc6:	e7e9      	b.n	8005b9c <_fwalk_sglue+0x10>

08005bc8 <iprintf>:
 8005bc8:	b40f      	push	{r0, r1, r2, r3}
 8005bca:	b507      	push	{r0, r1, r2, lr}
 8005bcc:	4906      	ldr	r1, [pc, #24]	; (8005be8 <iprintf+0x20>)
 8005bce:	ab04      	add	r3, sp, #16
 8005bd0:	6808      	ldr	r0, [r1, #0]
 8005bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bd6:	6881      	ldr	r1, [r0, #8]
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	f001 fcc5 	bl	8007568 <_vfiprintf_r>
 8005bde:	b003      	add	sp, #12
 8005be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005be4:	b004      	add	sp, #16
 8005be6:	4770      	bx	lr
 8005be8:	2000006c 	.word	0x2000006c

08005bec <__sread>:
 8005bec:	b510      	push	{r4, lr}
 8005bee:	460c      	mov	r4, r1
 8005bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf4:	f000 f88c 	bl	8005d10 <_read_r>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	bfab      	itete	ge
 8005bfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bfe:	89a3      	ldrhlt	r3, [r4, #12]
 8005c00:	181b      	addge	r3, r3, r0
 8005c02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c06:	bfac      	ite	ge
 8005c08:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c0a:	81a3      	strhlt	r3, [r4, #12]
 8005c0c:	bd10      	pop	{r4, pc}

08005c0e <__swrite>:
 8005c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c12:	461f      	mov	r7, r3
 8005c14:	898b      	ldrh	r3, [r1, #12]
 8005c16:	4605      	mov	r5, r0
 8005c18:	05db      	lsls	r3, r3, #23
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	4616      	mov	r6, r2
 8005c1e:	d505      	bpl.n	8005c2c <__swrite+0x1e>
 8005c20:	2302      	movs	r3, #2
 8005c22:	2200      	movs	r2, #0
 8005c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c28:	f000 f860 	bl	8005cec <_lseek_r>
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	4632      	mov	r2, r6
 8005c30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c34:	81a3      	strh	r3, [r4, #12]
 8005c36:	4628      	mov	r0, r5
 8005c38:	463b      	mov	r3, r7
 8005c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c42:	f000 b887 	b.w	8005d54 <_write_r>

08005c46 <__sseek>:
 8005c46:	b510      	push	{r4, lr}
 8005c48:	460c      	mov	r4, r1
 8005c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c4e:	f000 f84d 	bl	8005cec <_lseek_r>
 8005c52:	1c43      	adds	r3, r0, #1
 8005c54:	89a3      	ldrh	r3, [r4, #12]
 8005c56:	bf15      	itete	ne
 8005c58:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c62:	81a3      	strheq	r3, [r4, #12]
 8005c64:	bf18      	it	ne
 8005c66:	81a3      	strhne	r3, [r4, #12]
 8005c68:	bd10      	pop	{r4, pc}

08005c6a <__sclose>:
 8005c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c6e:	f000 b82d 	b.w	8005ccc <_close_r>
	...

08005c74 <_vsiprintf_r>:
 8005c74:	b500      	push	{lr}
 8005c76:	b09b      	sub	sp, #108	; 0x6c
 8005c78:	9100      	str	r1, [sp, #0]
 8005c7a:	9104      	str	r1, [sp, #16]
 8005c7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c80:	9105      	str	r1, [sp, #20]
 8005c82:	9102      	str	r1, [sp, #8]
 8005c84:	4905      	ldr	r1, [pc, #20]	; (8005c9c <_vsiprintf_r+0x28>)
 8005c86:	9103      	str	r1, [sp, #12]
 8005c88:	4669      	mov	r1, sp
 8005c8a:	f001 fb47 	bl	800731c <_svfiprintf_r>
 8005c8e:	2200      	movs	r2, #0
 8005c90:	9b00      	ldr	r3, [sp, #0]
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	b01b      	add	sp, #108	; 0x6c
 8005c96:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c9a:	bf00      	nop
 8005c9c:	ffff0208 	.word	0xffff0208

08005ca0 <vsiprintf>:
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	460a      	mov	r2, r1
 8005ca4:	4601      	mov	r1, r0
 8005ca6:	4802      	ldr	r0, [pc, #8]	; (8005cb0 <vsiprintf+0x10>)
 8005ca8:	6800      	ldr	r0, [r0, #0]
 8005caa:	f7ff bfe3 	b.w	8005c74 <_vsiprintf_r>
 8005cae:	bf00      	nop
 8005cb0:	2000006c 	.word	0x2000006c

08005cb4 <memset>:
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	4402      	add	r2, r0
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d100      	bne.n	8005cbe <memset+0xa>
 8005cbc:	4770      	bx	lr
 8005cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005cc2:	e7f9      	b.n	8005cb8 <memset+0x4>

08005cc4 <_localeconv_r>:
 8005cc4:	4800      	ldr	r0, [pc, #0]	; (8005cc8 <_localeconv_r+0x4>)
 8005cc6:	4770      	bx	lr
 8005cc8:	20000160 	.word	0x20000160

08005ccc <_close_r>:
 8005ccc:	b538      	push	{r3, r4, r5, lr}
 8005cce:	2300      	movs	r3, #0
 8005cd0:	4d05      	ldr	r5, [pc, #20]	; (8005ce8 <_close_r+0x1c>)
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	4608      	mov	r0, r1
 8005cd6:	602b      	str	r3, [r5, #0]
 8005cd8:	f7fc f908 	bl	8001eec <_close>
 8005cdc:	1c43      	adds	r3, r0, #1
 8005cde:	d102      	bne.n	8005ce6 <_close_r+0x1a>
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	b103      	cbz	r3, 8005ce6 <_close_r+0x1a>
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	bd38      	pop	{r3, r4, r5, pc}
 8005ce8:	20000c28 	.word	0x20000c28

08005cec <_lseek_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4604      	mov	r4, r0
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	4d05      	ldr	r5, [pc, #20]	; (8005d0c <_lseek_r+0x20>)
 8005cf8:	602a      	str	r2, [r5, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f7fc f91a 	bl	8001f34 <_lseek>
 8005d00:	1c43      	adds	r3, r0, #1
 8005d02:	d102      	bne.n	8005d0a <_lseek_r+0x1e>
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	b103      	cbz	r3, 8005d0a <_lseek_r+0x1e>
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	bd38      	pop	{r3, r4, r5, pc}
 8005d0c:	20000c28 	.word	0x20000c28

08005d10 <_read_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	4604      	mov	r4, r0
 8005d14:	4608      	mov	r0, r1
 8005d16:	4611      	mov	r1, r2
 8005d18:	2200      	movs	r2, #0
 8005d1a:	4d05      	ldr	r5, [pc, #20]	; (8005d30 <_read_r+0x20>)
 8005d1c:	602a      	str	r2, [r5, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f7fc f8ab 	bl	8001e7a <_read>
 8005d24:	1c43      	adds	r3, r0, #1
 8005d26:	d102      	bne.n	8005d2e <_read_r+0x1e>
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	b103      	cbz	r3, 8005d2e <_read_r+0x1e>
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	bd38      	pop	{r3, r4, r5, pc}
 8005d30:	20000c28 	.word	0x20000c28

08005d34 <_sbrk_r>:
 8005d34:	b538      	push	{r3, r4, r5, lr}
 8005d36:	2300      	movs	r3, #0
 8005d38:	4d05      	ldr	r5, [pc, #20]	; (8005d50 <_sbrk_r+0x1c>)
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	4608      	mov	r0, r1
 8005d3e:	602b      	str	r3, [r5, #0]
 8005d40:	f7fc f904 	bl	8001f4c <_sbrk>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	d102      	bne.n	8005d4e <_sbrk_r+0x1a>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	b103      	cbz	r3, 8005d4e <_sbrk_r+0x1a>
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	bd38      	pop	{r3, r4, r5, pc}
 8005d50:	20000c28 	.word	0x20000c28

08005d54 <_write_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4604      	mov	r4, r0
 8005d58:	4608      	mov	r0, r1
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	4d05      	ldr	r5, [pc, #20]	; (8005d74 <_write_r+0x20>)
 8005d60:	602a      	str	r2, [r5, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	f7fc f8a6 	bl	8001eb4 <_write>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d102      	bne.n	8005d72 <_write_r+0x1e>
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	b103      	cbz	r3, 8005d72 <_write_r+0x1e>
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	bd38      	pop	{r3, r4, r5, pc}
 8005d74:	20000c28 	.word	0x20000c28

08005d78 <__errno>:
 8005d78:	4b01      	ldr	r3, [pc, #4]	; (8005d80 <__errno+0x8>)
 8005d7a:	6818      	ldr	r0, [r3, #0]
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	2000006c 	.word	0x2000006c

08005d84 <__libc_init_array>:
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	2600      	movs	r6, #0
 8005d88:	4d0c      	ldr	r5, [pc, #48]	; (8005dbc <__libc_init_array+0x38>)
 8005d8a:	4c0d      	ldr	r4, [pc, #52]	; (8005dc0 <__libc_init_array+0x3c>)
 8005d8c:	1b64      	subs	r4, r4, r5
 8005d8e:	10a4      	asrs	r4, r4, #2
 8005d90:	42a6      	cmp	r6, r4
 8005d92:	d109      	bne.n	8005da8 <__libc_init_array+0x24>
 8005d94:	f001 ffc6 	bl	8007d24 <_init>
 8005d98:	2600      	movs	r6, #0
 8005d9a:	4d0a      	ldr	r5, [pc, #40]	; (8005dc4 <__libc_init_array+0x40>)
 8005d9c:	4c0a      	ldr	r4, [pc, #40]	; (8005dc8 <__libc_init_array+0x44>)
 8005d9e:	1b64      	subs	r4, r4, r5
 8005da0:	10a4      	asrs	r4, r4, #2
 8005da2:	42a6      	cmp	r6, r4
 8005da4:	d105      	bne.n	8005db2 <__libc_init_array+0x2e>
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
 8005da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dac:	4798      	blx	r3
 8005dae:	3601      	adds	r6, #1
 8005db0:	e7ee      	b.n	8005d90 <__libc_init_array+0xc>
 8005db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db6:	4798      	blx	r3
 8005db8:	3601      	adds	r6, #1
 8005dba:	e7f2      	b.n	8005da2 <__libc_init_array+0x1e>
 8005dbc:	08008e5c 	.word	0x08008e5c
 8005dc0:	08008e5c 	.word	0x08008e5c
 8005dc4:	08008e5c 	.word	0x08008e5c
 8005dc8:	08008e60 	.word	0x08008e60

08005dcc <__retarget_lock_acquire_recursive>:
 8005dcc:	4770      	bx	lr

08005dce <__retarget_lock_release_recursive>:
 8005dce:	4770      	bx	lr

08005dd0 <memchr>:
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	b510      	push	{r4, lr}
 8005dd4:	b2c9      	uxtb	r1, r1
 8005dd6:	4402      	add	r2, r0
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	4618      	mov	r0, r3
 8005ddc:	d101      	bne.n	8005de2 <memchr+0x12>
 8005dde:	2000      	movs	r0, #0
 8005de0:	e003      	b.n	8005dea <memchr+0x1a>
 8005de2:	7804      	ldrb	r4, [r0, #0]
 8005de4:	3301      	adds	r3, #1
 8005de6:	428c      	cmp	r4, r1
 8005de8:	d1f6      	bne.n	8005dd8 <memchr+0x8>
 8005dea:	bd10      	pop	{r4, pc}

08005dec <memcpy>:
 8005dec:	440a      	add	r2, r1
 8005dee:	4291      	cmp	r1, r2
 8005df0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005df4:	d100      	bne.n	8005df8 <memcpy+0xc>
 8005df6:	4770      	bx	lr
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dfe:	4291      	cmp	r1, r2
 8005e00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e04:	d1f9      	bne.n	8005dfa <memcpy+0xe>
 8005e06:	bd10      	pop	{r4, pc}

08005e08 <quorem>:
 8005e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0c:	6903      	ldr	r3, [r0, #16]
 8005e0e:	690c      	ldr	r4, [r1, #16]
 8005e10:	4607      	mov	r7, r0
 8005e12:	42a3      	cmp	r3, r4
 8005e14:	db7f      	blt.n	8005f16 <quorem+0x10e>
 8005e16:	3c01      	subs	r4, #1
 8005e18:	f100 0514 	add.w	r5, r0, #20
 8005e1c:	f101 0814 	add.w	r8, r1, #20
 8005e20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	429a      	cmp	r2, r3
 8005e32:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e36:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e3e:	d331      	bcc.n	8005ea4 <quorem+0x9c>
 8005e40:	f04f 0e00 	mov.w	lr, #0
 8005e44:	4640      	mov	r0, r8
 8005e46:	46ac      	mov	ip, r5
 8005e48:	46f2      	mov	sl, lr
 8005e4a:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e4e:	b293      	uxth	r3, r2
 8005e50:	fb06 e303 	mla	r3, r6, r3, lr
 8005e54:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e58:	0c1a      	lsrs	r2, r3, #16
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	fb06 220e 	mla	r2, r6, lr, r2
 8005e60:	ebaa 0303 	sub.w	r3, sl, r3
 8005e64:	f8dc a000 	ldr.w	sl, [ip]
 8005e68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e6c:	fa1f fa8a 	uxth.w	sl, sl
 8005e70:	4453      	add	r3, sl
 8005e72:	f8dc a000 	ldr.w	sl, [ip]
 8005e76:	b292      	uxth	r2, r2
 8005e78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e86:	4581      	cmp	r9, r0
 8005e88:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e8c:	f84c 3b04 	str.w	r3, [ip], #4
 8005e90:	d2db      	bcs.n	8005e4a <quorem+0x42>
 8005e92:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e96:	b92b      	cbnz	r3, 8005ea4 <quorem+0x9c>
 8005e98:	9b01      	ldr	r3, [sp, #4]
 8005e9a:	3b04      	subs	r3, #4
 8005e9c:	429d      	cmp	r5, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	d32d      	bcc.n	8005efe <quorem+0xf6>
 8005ea2:	613c      	str	r4, [r7, #16]
 8005ea4:	4638      	mov	r0, r7
 8005ea6:	f001 f8e1 	bl	800706c <__mcmp>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	db23      	blt.n	8005ef6 <quorem+0xee>
 8005eae:	4629      	mov	r1, r5
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	3601      	adds	r6, #1
 8005eb4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005eb8:	f8d1 c000 	ldr.w	ip, [r1]
 8005ebc:	b293      	uxth	r3, r2
 8005ebe:	1ac3      	subs	r3, r0, r3
 8005ec0:	0c12      	lsrs	r2, r2, #16
 8005ec2:	fa1f f08c 	uxth.w	r0, ip
 8005ec6:	4403      	add	r3, r0
 8005ec8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005ecc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ed6:	45c1      	cmp	r9, r8
 8005ed8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005edc:	f841 3b04 	str.w	r3, [r1], #4
 8005ee0:	d2e8      	bcs.n	8005eb4 <quorem+0xac>
 8005ee2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ee6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eea:	b922      	cbnz	r2, 8005ef6 <quorem+0xee>
 8005eec:	3b04      	subs	r3, #4
 8005eee:	429d      	cmp	r5, r3
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	d30a      	bcc.n	8005f0a <quorem+0x102>
 8005ef4:	613c      	str	r4, [r7, #16]
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	b003      	add	sp, #12
 8005efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efe:	6812      	ldr	r2, [r2, #0]
 8005f00:	3b04      	subs	r3, #4
 8005f02:	2a00      	cmp	r2, #0
 8005f04:	d1cd      	bne.n	8005ea2 <quorem+0x9a>
 8005f06:	3c01      	subs	r4, #1
 8005f08:	e7c8      	b.n	8005e9c <quorem+0x94>
 8005f0a:	6812      	ldr	r2, [r2, #0]
 8005f0c:	3b04      	subs	r3, #4
 8005f0e:	2a00      	cmp	r2, #0
 8005f10:	d1f0      	bne.n	8005ef4 <quorem+0xec>
 8005f12:	3c01      	subs	r4, #1
 8005f14:	e7eb      	b.n	8005eee <quorem+0xe6>
 8005f16:	2000      	movs	r0, #0
 8005f18:	e7ee      	b.n	8005ef8 <quorem+0xf0>
 8005f1a:	0000      	movs	r0, r0
 8005f1c:	0000      	movs	r0, r0
	...

08005f20 <_dtoa_r>:
 8005f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f24:	4616      	mov	r6, r2
 8005f26:	461f      	mov	r7, r3
 8005f28:	69c4      	ldr	r4, [r0, #28]
 8005f2a:	b099      	sub	sp, #100	; 0x64
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005f32:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005f36:	b974      	cbnz	r4, 8005f56 <_dtoa_r+0x36>
 8005f38:	2010      	movs	r0, #16
 8005f3a:	f7ff f87b 	bl	8005034 <malloc>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	61e8      	str	r0, [r5, #28]
 8005f42:	b920      	cbnz	r0, 8005f4e <_dtoa_r+0x2e>
 8005f44:	21ef      	movs	r1, #239	; 0xef
 8005f46:	4bac      	ldr	r3, [pc, #688]	; (80061f8 <_dtoa_r+0x2d8>)
 8005f48:	48ac      	ldr	r0, [pc, #688]	; (80061fc <_dtoa_r+0x2dc>)
 8005f4a:	f001 fd81 	bl	8007a50 <__assert_func>
 8005f4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f52:	6004      	str	r4, [r0, #0]
 8005f54:	60c4      	str	r4, [r0, #12]
 8005f56:	69eb      	ldr	r3, [r5, #28]
 8005f58:	6819      	ldr	r1, [r3, #0]
 8005f5a:	b151      	cbz	r1, 8005f72 <_dtoa_r+0x52>
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	2301      	movs	r3, #1
 8005f60:	4093      	lsls	r3, r2
 8005f62:	604a      	str	r2, [r1, #4]
 8005f64:	608b      	str	r3, [r1, #8]
 8005f66:	4628      	mov	r0, r5
 8005f68:	f000 fe46 	bl	8006bf8 <_Bfree>
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	69eb      	ldr	r3, [r5, #28]
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	1e3b      	subs	r3, r7, #0
 8005f74:	bfaf      	iteee	ge
 8005f76:	2300      	movge	r3, #0
 8005f78:	2201      	movlt	r2, #1
 8005f7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f7e:	9305      	strlt	r3, [sp, #20]
 8005f80:	bfa8      	it	ge
 8005f82:	f8c8 3000 	strge.w	r3, [r8]
 8005f86:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005f8a:	4b9d      	ldr	r3, [pc, #628]	; (8006200 <_dtoa_r+0x2e0>)
 8005f8c:	bfb8      	it	lt
 8005f8e:	f8c8 2000 	strlt.w	r2, [r8]
 8005f92:	ea33 0309 	bics.w	r3, r3, r9
 8005f96:	d119      	bne.n	8005fcc <_dtoa_r+0xac>
 8005f98:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005fa4:	4333      	orrs	r3, r6
 8005fa6:	f000 8589 	beq.w	8006abc <_dtoa_r+0xb9c>
 8005faa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fac:	b953      	cbnz	r3, 8005fc4 <_dtoa_r+0xa4>
 8005fae:	4b95      	ldr	r3, [pc, #596]	; (8006204 <_dtoa_r+0x2e4>)
 8005fb0:	e023      	b.n	8005ffa <_dtoa_r+0xda>
 8005fb2:	4b95      	ldr	r3, [pc, #596]	; (8006208 <_dtoa_r+0x2e8>)
 8005fb4:	9303      	str	r3, [sp, #12]
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	9803      	ldr	r0, [sp, #12]
 8005fbe:	b019      	add	sp, #100	; 0x64
 8005fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc4:	4b8f      	ldr	r3, [pc, #572]	; (8006204 <_dtoa_r+0x2e4>)
 8005fc6:	9303      	str	r3, [sp, #12]
 8005fc8:	3303      	adds	r3, #3
 8005fca:	e7f5      	b.n	8005fb8 <_dtoa_r+0x98>
 8005fcc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005fd0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005fd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f7fa fce4 	bl	80009a8 <__aeabi_dcmpeq>
 8005fe0:	4680      	mov	r8, r0
 8005fe2:	b160      	cbz	r0, 8005ffe <_dtoa_r+0xde>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 8562 	beq.w	8006ab6 <_dtoa_r+0xb96>
 8005ff2:	4b86      	ldr	r3, [pc, #536]	; (800620c <_dtoa_r+0x2ec>)
 8005ff4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	9303      	str	r3, [sp, #12]
 8005ffc:	e7de      	b.n	8005fbc <_dtoa_r+0x9c>
 8005ffe:	ab16      	add	r3, sp, #88	; 0x58
 8006000:	9301      	str	r3, [sp, #4]
 8006002:	ab17      	add	r3, sp, #92	; 0x5c
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	4628      	mov	r0, r5
 8006008:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800600c:	f001 f8d6 	bl	80071bc <__d2b>
 8006010:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006014:	4682      	mov	sl, r0
 8006016:	2c00      	cmp	r4, #0
 8006018:	d07e      	beq.n	8006118 <_dtoa_r+0x1f8>
 800601a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800601e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006020:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006028:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800602c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006030:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006034:	4619      	mov	r1, r3
 8006036:	2200      	movs	r2, #0
 8006038:	4b75      	ldr	r3, [pc, #468]	; (8006210 <_dtoa_r+0x2f0>)
 800603a:	f7fa f895 	bl	8000168 <__aeabi_dsub>
 800603e:	a368      	add	r3, pc, #416	; (adr r3, 80061e0 <_dtoa_r+0x2c0>)
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f7fa fa48 	bl	80004d8 <__aeabi_dmul>
 8006048:	a367      	add	r3, pc, #412	; (adr r3, 80061e8 <_dtoa_r+0x2c8>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f7fa f88d 	bl	800016c <__adddf3>
 8006052:	4606      	mov	r6, r0
 8006054:	4620      	mov	r0, r4
 8006056:	460f      	mov	r7, r1
 8006058:	f7fa f9d4 	bl	8000404 <__aeabi_i2d>
 800605c:	a364      	add	r3, pc, #400	; (adr r3, 80061f0 <_dtoa_r+0x2d0>)
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f7fa fa39 	bl	80004d8 <__aeabi_dmul>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4630      	mov	r0, r6
 800606c:	4639      	mov	r1, r7
 800606e:	f7fa f87d 	bl	800016c <__adddf3>
 8006072:	4606      	mov	r6, r0
 8006074:	460f      	mov	r7, r1
 8006076:	f7fa fcdf 	bl	8000a38 <__aeabi_d2iz>
 800607a:	2200      	movs	r2, #0
 800607c:	4683      	mov	fp, r0
 800607e:	2300      	movs	r3, #0
 8006080:	4630      	mov	r0, r6
 8006082:	4639      	mov	r1, r7
 8006084:	f7fa fc9a 	bl	80009bc <__aeabi_dcmplt>
 8006088:	b148      	cbz	r0, 800609e <_dtoa_r+0x17e>
 800608a:	4658      	mov	r0, fp
 800608c:	f7fa f9ba 	bl	8000404 <__aeabi_i2d>
 8006090:	4632      	mov	r2, r6
 8006092:	463b      	mov	r3, r7
 8006094:	f7fa fc88 	bl	80009a8 <__aeabi_dcmpeq>
 8006098:	b908      	cbnz	r0, 800609e <_dtoa_r+0x17e>
 800609a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800609e:	f1bb 0f16 	cmp.w	fp, #22
 80060a2:	d857      	bhi.n	8006154 <_dtoa_r+0x234>
 80060a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060a8:	4b5a      	ldr	r3, [pc, #360]	; (8006214 <_dtoa_r+0x2f4>)
 80060aa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f7fa fc83 	bl	80009bc <__aeabi_dcmplt>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	d04e      	beq.n	8006158 <_dtoa_r+0x238>
 80060ba:	2300      	movs	r3, #0
 80060bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80060c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80060c4:	1b1b      	subs	r3, r3, r4
 80060c6:	1e5a      	subs	r2, r3, #1
 80060c8:	bf46      	itte	mi
 80060ca:	f1c3 0901 	rsbmi	r9, r3, #1
 80060ce:	2300      	movmi	r3, #0
 80060d0:	f04f 0900 	movpl.w	r9, #0
 80060d4:	9209      	str	r2, [sp, #36]	; 0x24
 80060d6:	bf48      	it	mi
 80060d8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80060da:	f1bb 0f00 	cmp.w	fp, #0
 80060de:	db3d      	blt.n	800615c <_dtoa_r+0x23c>
 80060e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80060e6:	445b      	add	r3, fp
 80060e8:	9309      	str	r3, [sp, #36]	; 0x24
 80060ea:	2300      	movs	r3, #0
 80060ec:	930a      	str	r3, [sp, #40]	; 0x28
 80060ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060f0:	2b09      	cmp	r3, #9
 80060f2:	d867      	bhi.n	80061c4 <_dtoa_r+0x2a4>
 80060f4:	2b05      	cmp	r3, #5
 80060f6:	bfc4      	itt	gt
 80060f8:	3b04      	subgt	r3, #4
 80060fa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80060fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060fe:	bfc8      	it	gt
 8006100:	2400      	movgt	r4, #0
 8006102:	f1a3 0302 	sub.w	r3, r3, #2
 8006106:	bfd8      	it	le
 8006108:	2401      	movle	r4, #1
 800610a:	2b03      	cmp	r3, #3
 800610c:	f200 8086 	bhi.w	800621c <_dtoa_r+0x2fc>
 8006110:	e8df f003 	tbb	[pc, r3]
 8006114:	5637392c 	.word	0x5637392c
 8006118:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800611c:	441c      	add	r4, r3
 800611e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006122:	2b20      	cmp	r3, #32
 8006124:	bfc1      	itttt	gt
 8006126:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800612a:	fa09 f903 	lslgt.w	r9, r9, r3
 800612e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006132:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006136:	bfd6      	itet	le
 8006138:	f1c3 0320 	rsble	r3, r3, #32
 800613c:	ea49 0003 	orrgt.w	r0, r9, r3
 8006140:	fa06 f003 	lslle.w	r0, r6, r3
 8006144:	f7fa f94e 	bl	80003e4 <__aeabi_ui2d>
 8006148:	2201      	movs	r2, #1
 800614a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800614e:	3c01      	subs	r4, #1
 8006150:	9213      	str	r2, [sp, #76]	; 0x4c
 8006152:	e76f      	b.n	8006034 <_dtoa_r+0x114>
 8006154:	2301      	movs	r3, #1
 8006156:	e7b3      	b.n	80060c0 <_dtoa_r+0x1a0>
 8006158:	900f      	str	r0, [sp, #60]	; 0x3c
 800615a:	e7b2      	b.n	80060c2 <_dtoa_r+0x1a2>
 800615c:	f1cb 0300 	rsb	r3, fp, #0
 8006160:	930a      	str	r3, [sp, #40]	; 0x28
 8006162:	2300      	movs	r3, #0
 8006164:	eba9 090b 	sub.w	r9, r9, fp
 8006168:	930e      	str	r3, [sp, #56]	; 0x38
 800616a:	e7c0      	b.n	80060ee <_dtoa_r+0x1ce>
 800616c:	2300      	movs	r3, #0
 800616e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006170:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006172:	2b00      	cmp	r3, #0
 8006174:	dc55      	bgt.n	8006222 <_dtoa_r+0x302>
 8006176:	2301      	movs	r3, #1
 8006178:	461a      	mov	r2, r3
 800617a:	9306      	str	r3, [sp, #24]
 800617c:	9308      	str	r3, [sp, #32]
 800617e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006180:	e00b      	b.n	800619a <_dtoa_r+0x27a>
 8006182:	2301      	movs	r3, #1
 8006184:	e7f3      	b.n	800616e <_dtoa_r+0x24e>
 8006186:	2300      	movs	r3, #0
 8006188:	930b      	str	r3, [sp, #44]	; 0x2c
 800618a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800618c:	445b      	add	r3, fp
 800618e:	9306      	str	r3, [sp, #24]
 8006190:	3301      	adds	r3, #1
 8006192:	2b01      	cmp	r3, #1
 8006194:	9308      	str	r3, [sp, #32]
 8006196:	bfb8      	it	lt
 8006198:	2301      	movlt	r3, #1
 800619a:	2100      	movs	r1, #0
 800619c:	2204      	movs	r2, #4
 800619e:	69e8      	ldr	r0, [r5, #28]
 80061a0:	f102 0614 	add.w	r6, r2, #20
 80061a4:	429e      	cmp	r6, r3
 80061a6:	d940      	bls.n	800622a <_dtoa_r+0x30a>
 80061a8:	6041      	str	r1, [r0, #4]
 80061aa:	4628      	mov	r0, r5
 80061ac:	f000 fce4 	bl	8006b78 <_Balloc>
 80061b0:	9003      	str	r0, [sp, #12]
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d13c      	bne.n	8006230 <_dtoa_r+0x310>
 80061b6:	4602      	mov	r2, r0
 80061b8:	f240 11af 	movw	r1, #431	; 0x1af
 80061bc:	4b16      	ldr	r3, [pc, #88]	; (8006218 <_dtoa_r+0x2f8>)
 80061be:	e6c3      	b.n	8005f48 <_dtoa_r+0x28>
 80061c0:	2301      	movs	r3, #1
 80061c2:	e7e1      	b.n	8006188 <_dtoa_r+0x268>
 80061c4:	2401      	movs	r4, #1
 80061c6:	2300      	movs	r3, #0
 80061c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80061ca:	9322      	str	r3, [sp, #136]	; 0x88
 80061cc:	f04f 33ff 	mov.w	r3, #4294967295
 80061d0:	2200      	movs	r2, #0
 80061d2:	9306      	str	r3, [sp, #24]
 80061d4:	9308      	str	r3, [sp, #32]
 80061d6:	2312      	movs	r3, #18
 80061d8:	e7d1      	b.n	800617e <_dtoa_r+0x25e>
 80061da:	bf00      	nop
 80061dc:	f3af 8000 	nop.w
 80061e0:	636f4361 	.word	0x636f4361
 80061e4:	3fd287a7 	.word	0x3fd287a7
 80061e8:	8b60c8b3 	.word	0x8b60c8b3
 80061ec:	3fc68a28 	.word	0x3fc68a28
 80061f0:	509f79fb 	.word	0x509f79fb
 80061f4:	3fd34413 	.word	0x3fd34413
 80061f8:	08008b2f 	.word	0x08008b2f
 80061fc:	08008b46 	.word	0x08008b46
 8006200:	7ff00000 	.word	0x7ff00000
 8006204:	08008b2b 	.word	0x08008b2b
 8006208:	08008b22 	.word	0x08008b22
 800620c:	08008aff 	.word	0x08008aff
 8006210:	3ff80000 	.word	0x3ff80000
 8006214:	08008c30 	.word	0x08008c30
 8006218:	08008b9e 	.word	0x08008b9e
 800621c:	2301      	movs	r3, #1
 800621e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006220:	e7d4      	b.n	80061cc <_dtoa_r+0x2ac>
 8006222:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006224:	9306      	str	r3, [sp, #24]
 8006226:	9308      	str	r3, [sp, #32]
 8006228:	e7b7      	b.n	800619a <_dtoa_r+0x27a>
 800622a:	3101      	adds	r1, #1
 800622c:	0052      	lsls	r2, r2, #1
 800622e:	e7b7      	b.n	80061a0 <_dtoa_r+0x280>
 8006230:	69eb      	ldr	r3, [r5, #28]
 8006232:	9a03      	ldr	r2, [sp, #12]
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	9b08      	ldr	r3, [sp, #32]
 8006238:	2b0e      	cmp	r3, #14
 800623a:	f200 80a8 	bhi.w	800638e <_dtoa_r+0x46e>
 800623e:	2c00      	cmp	r4, #0
 8006240:	f000 80a5 	beq.w	800638e <_dtoa_r+0x46e>
 8006244:	f1bb 0f00 	cmp.w	fp, #0
 8006248:	dd34      	ble.n	80062b4 <_dtoa_r+0x394>
 800624a:	4b9a      	ldr	r3, [pc, #616]	; (80064b4 <_dtoa_r+0x594>)
 800624c:	f00b 020f 	and.w	r2, fp, #15
 8006250:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006254:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006258:	e9d3 3400 	ldrd	r3, r4, [r3]
 800625c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006260:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006264:	d016      	beq.n	8006294 <_dtoa_r+0x374>
 8006266:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800626a:	4b93      	ldr	r3, [pc, #588]	; (80064b8 <_dtoa_r+0x598>)
 800626c:	2703      	movs	r7, #3
 800626e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006272:	f7fa fa5b 	bl	800072c <__aeabi_ddiv>
 8006276:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800627a:	f004 040f 	and.w	r4, r4, #15
 800627e:	4e8e      	ldr	r6, [pc, #568]	; (80064b8 <_dtoa_r+0x598>)
 8006280:	b954      	cbnz	r4, 8006298 <_dtoa_r+0x378>
 8006282:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800628a:	f7fa fa4f 	bl	800072c <__aeabi_ddiv>
 800628e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006292:	e029      	b.n	80062e8 <_dtoa_r+0x3c8>
 8006294:	2702      	movs	r7, #2
 8006296:	e7f2      	b.n	800627e <_dtoa_r+0x35e>
 8006298:	07e1      	lsls	r1, r4, #31
 800629a:	d508      	bpl.n	80062ae <_dtoa_r+0x38e>
 800629c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062a4:	f7fa f918 	bl	80004d8 <__aeabi_dmul>
 80062a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062ac:	3701      	adds	r7, #1
 80062ae:	1064      	asrs	r4, r4, #1
 80062b0:	3608      	adds	r6, #8
 80062b2:	e7e5      	b.n	8006280 <_dtoa_r+0x360>
 80062b4:	f000 80a5 	beq.w	8006402 <_dtoa_r+0x4e2>
 80062b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062bc:	f1cb 0400 	rsb	r4, fp, #0
 80062c0:	4b7c      	ldr	r3, [pc, #496]	; (80064b4 <_dtoa_r+0x594>)
 80062c2:	f004 020f 	and.w	r2, r4, #15
 80062c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	f7fa f903 	bl	80004d8 <__aeabi_dmul>
 80062d2:	2702      	movs	r7, #2
 80062d4:	2300      	movs	r3, #0
 80062d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062da:	4e77      	ldr	r6, [pc, #476]	; (80064b8 <_dtoa_r+0x598>)
 80062dc:	1124      	asrs	r4, r4, #4
 80062de:	2c00      	cmp	r4, #0
 80062e0:	f040 8084 	bne.w	80063ec <_dtoa_r+0x4cc>
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1d2      	bne.n	800628e <_dtoa_r+0x36e>
 80062e8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80062ec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80062f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 8087 	beq.w	8006406 <_dtoa_r+0x4e6>
 80062f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062fc:	2200      	movs	r2, #0
 80062fe:	4b6f      	ldr	r3, [pc, #444]	; (80064bc <_dtoa_r+0x59c>)
 8006300:	f7fa fb5c 	bl	80009bc <__aeabi_dcmplt>
 8006304:	2800      	cmp	r0, #0
 8006306:	d07e      	beq.n	8006406 <_dtoa_r+0x4e6>
 8006308:	9b08      	ldr	r3, [sp, #32]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d07b      	beq.n	8006406 <_dtoa_r+0x4e6>
 800630e:	9b06      	ldr	r3, [sp, #24]
 8006310:	2b00      	cmp	r3, #0
 8006312:	dd38      	ble.n	8006386 <_dtoa_r+0x466>
 8006314:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006318:	2200      	movs	r2, #0
 800631a:	4b69      	ldr	r3, [pc, #420]	; (80064c0 <_dtoa_r+0x5a0>)
 800631c:	f7fa f8dc 	bl	80004d8 <__aeabi_dmul>
 8006320:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006324:	9c06      	ldr	r4, [sp, #24]
 8006326:	f10b 38ff 	add.w	r8, fp, #4294967295
 800632a:	3701      	adds	r7, #1
 800632c:	4638      	mov	r0, r7
 800632e:	f7fa f869 	bl	8000404 <__aeabi_i2d>
 8006332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006336:	f7fa f8cf 	bl	80004d8 <__aeabi_dmul>
 800633a:	2200      	movs	r2, #0
 800633c:	4b61      	ldr	r3, [pc, #388]	; (80064c4 <_dtoa_r+0x5a4>)
 800633e:	f7f9 ff15 	bl	800016c <__adddf3>
 8006342:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006346:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800634a:	9611      	str	r6, [sp, #68]	; 0x44
 800634c:	2c00      	cmp	r4, #0
 800634e:	d15d      	bne.n	800640c <_dtoa_r+0x4ec>
 8006350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006354:	2200      	movs	r2, #0
 8006356:	4b5c      	ldr	r3, [pc, #368]	; (80064c8 <_dtoa_r+0x5a8>)
 8006358:	f7f9 ff06 	bl	8000168 <__aeabi_dsub>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006364:	4633      	mov	r3, r6
 8006366:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006368:	f7fa fb46 	bl	80009f8 <__aeabi_dcmpgt>
 800636c:	2800      	cmp	r0, #0
 800636e:	f040 8295 	bne.w	800689c <_dtoa_r+0x97c>
 8006372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006376:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006378:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800637c:	f7fa fb1e 	bl	80009bc <__aeabi_dcmplt>
 8006380:	2800      	cmp	r0, #0
 8006382:	f040 8289 	bne.w	8006898 <_dtoa_r+0x978>
 8006386:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800638a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800638e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006390:	2b00      	cmp	r3, #0
 8006392:	f2c0 8151 	blt.w	8006638 <_dtoa_r+0x718>
 8006396:	f1bb 0f0e 	cmp.w	fp, #14
 800639a:	f300 814d 	bgt.w	8006638 <_dtoa_r+0x718>
 800639e:	4b45      	ldr	r3, [pc, #276]	; (80064b4 <_dtoa_r+0x594>)
 80063a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80063a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063a8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80063ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f280 80da 	bge.w	8006568 <_dtoa_r+0x648>
 80063b4:	9b08      	ldr	r3, [sp, #32]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f300 80d6 	bgt.w	8006568 <_dtoa_r+0x648>
 80063bc:	f040 826b 	bne.w	8006896 <_dtoa_r+0x976>
 80063c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063c4:	2200      	movs	r2, #0
 80063c6:	4b40      	ldr	r3, [pc, #256]	; (80064c8 <_dtoa_r+0x5a8>)
 80063c8:	f7fa f886 	bl	80004d8 <__aeabi_dmul>
 80063cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063d0:	f7fa fb08 	bl	80009e4 <__aeabi_dcmpge>
 80063d4:	9c08      	ldr	r4, [sp, #32]
 80063d6:	4626      	mov	r6, r4
 80063d8:	2800      	cmp	r0, #0
 80063da:	f040 8241 	bne.w	8006860 <_dtoa_r+0x940>
 80063de:	2331      	movs	r3, #49	; 0x31
 80063e0:	9f03      	ldr	r7, [sp, #12]
 80063e2:	f10b 0b01 	add.w	fp, fp, #1
 80063e6:	f807 3b01 	strb.w	r3, [r7], #1
 80063ea:	e23d      	b.n	8006868 <_dtoa_r+0x948>
 80063ec:	07e2      	lsls	r2, r4, #31
 80063ee:	d505      	bpl.n	80063fc <_dtoa_r+0x4dc>
 80063f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063f4:	f7fa f870 	bl	80004d8 <__aeabi_dmul>
 80063f8:	2301      	movs	r3, #1
 80063fa:	3701      	adds	r7, #1
 80063fc:	1064      	asrs	r4, r4, #1
 80063fe:	3608      	adds	r6, #8
 8006400:	e76d      	b.n	80062de <_dtoa_r+0x3be>
 8006402:	2702      	movs	r7, #2
 8006404:	e770      	b.n	80062e8 <_dtoa_r+0x3c8>
 8006406:	46d8      	mov	r8, fp
 8006408:	9c08      	ldr	r4, [sp, #32]
 800640a:	e78f      	b.n	800632c <_dtoa_r+0x40c>
 800640c:	9903      	ldr	r1, [sp, #12]
 800640e:	4b29      	ldr	r3, [pc, #164]	; (80064b4 <_dtoa_r+0x594>)
 8006410:	4421      	add	r1, r4
 8006412:	9112      	str	r1, [sp, #72]	; 0x48
 8006414:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006416:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800641a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800641e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006422:	2900      	cmp	r1, #0
 8006424:	d054      	beq.n	80064d0 <_dtoa_r+0x5b0>
 8006426:	2000      	movs	r0, #0
 8006428:	4928      	ldr	r1, [pc, #160]	; (80064cc <_dtoa_r+0x5ac>)
 800642a:	f7fa f97f 	bl	800072c <__aeabi_ddiv>
 800642e:	463b      	mov	r3, r7
 8006430:	4632      	mov	r2, r6
 8006432:	f7f9 fe99 	bl	8000168 <__aeabi_dsub>
 8006436:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800643a:	9f03      	ldr	r7, [sp, #12]
 800643c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006440:	f7fa fafa 	bl	8000a38 <__aeabi_d2iz>
 8006444:	4604      	mov	r4, r0
 8006446:	f7f9 ffdd 	bl	8000404 <__aeabi_i2d>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006452:	f7f9 fe89 	bl	8000168 <__aeabi_dsub>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	3430      	adds	r4, #48	; 0x30
 800645c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006460:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006464:	f807 4b01 	strb.w	r4, [r7], #1
 8006468:	f7fa faa8 	bl	80009bc <__aeabi_dcmplt>
 800646c:	2800      	cmp	r0, #0
 800646e:	d173      	bne.n	8006558 <_dtoa_r+0x638>
 8006470:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006474:	2000      	movs	r0, #0
 8006476:	4911      	ldr	r1, [pc, #68]	; (80064bc <_dtoa_r+0x59c>)
 8006478:	f7f9 fe76 	bl	8000168 <__aeabi_dsub>
 800647c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006480:	f7fa fa9c 	bl	80009bc <__aeabi_dcmplt>
 8006484:	2800      	cmp	r0, #0
 8006486:	f040 80b6 	bne.w	80065f6 <_dtoa_r+0x6d6>
 800648a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800648c:	429f      	cmp	r7, r3
 800648e:	f43f af7a 	beq.w	8006386 <_dtoa_r+0x466>
 8006492:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006496:	2200      	movs	r2, #0
 8006498:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <_dtoa_r+0x5a0>)
 800649a:	f7fa f81d 	bl	80004d8 <__aeabi_dmul>
 800649e:	2200      	movs	r2, #0
 80064a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064a8:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <_dtoa_r+0x5a0>)
 80064aa:	f7fa f815 	bl	80004d8 <__aeabi_dmul>
 80064ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064b2:	e7c3      	b.n	800643c <_dtoa_r+0x51c>
 80064b4:	08008c30 	.word	0x08008c30
 80064b8:	08008c08 	.word	0x08008c08
 80064bc:	3ff00000 	.word	0x3ff00000
 80064c0:	40240000 	.word	0x40240000
 80064c4:	401c0000 	.word	0x401c0000
 80064c8:	40140000 	.word	0x40140000
 80064cc:	3fe00000 	.word	0x3fe00000
 80064d0:	4630      	mov	r0, r6
 80064d2:	4639      	mov	r1, r7
 80064d4:	f7fa f800 	bl	80004d8 <__aeabi_dmul>
 80064d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064de:	9c03      	ldr	r4, [sp, #12]
 80064e0:	9314      	str	r3, [sp, #80]	; 0x50
 80064e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064e6:	f7fa faa7 	bl	8000a38 <__aeabi_d2iz>
 80064ea:	9015      	str	r0, [sp, #84]	; 0x54
 80064ec:	f7f9 ff8a 	bl	8000404 <__aeabi_i2d>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064f8:	f7f9 fe36 	bl	8000168 <__aeabi_dsub>
 80064fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064fe:	4606      	mov	r6, r0
 8006500:	3330      	adds	r3, #48	; 0x30
 8006502:	f804 3b01 	strb.w	r3, [r4], #1
 8006506:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006508:	460f      	mov	r7, r1
 800650a:	429c      	cmp	r4, r3
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	d124      	bne.n	800655c <_dtoa_r+0x63c>
 8006512:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006516:	4baf      	ldr	r3, [pc, #700]	; (80067d4 <_dtoa_r+0x8b4>)
 8006518:	f7f9 fe28 	bl	800016c <__adddf3>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4630      	mov	r0, r6
 8006522:	4639      	mov	r1, r7
 8006524:	f7fa fa68 	bl	80009f8 <__aeabi_dcmpgt>
 8006528:	2800      	cmp	r0, #0
 800652a:	d163      	bne.n	80065f4 <_dtoa_r+0x6d4>
 800652c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006530:	2000      	movs	r0, #0
 8006532:	49a8      	ldr	r1, [pc, #672]	; (80067d4 <_dtoa_r+0x8b4>)
 8006534:	f7f9 fe18 	bl	8000168 <__aeabi_dsub>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4630      	mov	r0, r6
 800653e:	4639      	mov	r1, r7
 8006540:	f7fa fa3c 	bl	80009bc <__aeabi_dcmplt>
 8006544:	2800      	cmp	r0, #0
 8006546:	f43f af1e 	beq.w	8006386 <_dtoa_r+0x466>
 800654a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800654c:	1e7b      	subs	r3, r7, #1
 800654e:	9314      	str	r3, [sp, #80]	; 0x50
 8006550:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006554:	2b30      	cmp	r3, #48	; 0x30
 8006556:	d0f8      	beq.n	800654a <_dtoa_r+0x62a>
 8006558:	46c3      	mov	fp, r8
 800655a:	e03b      	b.n	80065d4 <_dtoa_r+0x6b4>
 800655c:	4b9e      	ldr	r3, [pc, #632]	; (80067d8 <_dtoa_r+0x8b8>)
 800655e:	f7f9 ffbb 	bl	80004d8 <__aeabi_dmul>
 8006562:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006566:	e7bc      	b.n	80064e2 <_dtoa_r+0x5c2>
 8006568:	9f03      	ldr	r7, [sp, #12]
 800656a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800656e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006572:	4640      	mov	r0, r8
 8006574:	4649      	mov	r1, r9
 8006576:	f7fa f8d9 	bl	800072c <__aeabi_ddiv>
 800657a:	f7fa fa5d 	bl	8000a38 <__aeabi_d2iz>
 800657e:	4604      	mov	r4, r0
 8006580:	f7f9 ff40 	bl	8000404 <__aeabi_i2d>
 8006584:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006588:	f7f9 ffa6 	bl	80004d8 <__aeabi_dmul>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4640      	mov	r0, r8
 8006592:	4649      	mov	r1, r9
 8006594:	f7f9 fde8 	bl	8000168 <__aeabi_dsub>
 8006598:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800659c:	f807 6b01 	strb.w	r6, [r7], #1
 80065a0:	9e03      	ldr	r6, [sp, #12]
 80065a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80065a6:	1bbe      	subs	r6, r7, r6
 80065a8:	45b4      	cmp	ip, r6
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	d136      	bne.n	800661e <_dtoa_r+0x6fe>
 80065b0:	f7f9 fddc 	bl	800016c <__adddf3>
 80065b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065b8:	4680      	mov	r8, r0
 80065ba:	4689      	mov	r9, r1
 80065bc:	f7fa fa1c 	bl	80009f8 <__aeabi_dcmpgt>
 80065c0:	bb58      	cbnz	r0, 800661a <_dtoa_r+0x6fa>
 80065c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065c6:	4640      	mov	r0, r8
 80065c8:	4649      	mov	r1, r9
 80065ca:	f7fa f9ed 	bl	80009a8 <__aeabi_dcmpeq>
 80065ce:	b108      	cbz	r0, 80065d4 <_dtoa_r+0x6b4>
 80065d0:	07e3      	lsls	r3, r4, #31
 80065d2:	d422      	bmi.n	800661a <_dtoa_r+0x6fa>
 80065d4:	4651      	mov	r1, sl
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 fb0e 	bl	8006bf8 <_Bfree>
 80065dc:	2300      	movs	r3, #0
 80065de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80065e0:	703b      	strb	r3, [r7, #0]
 80065e2:	f10b 0301 	add.w	r3, fp, #1
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f43f ace6 	beq.w	8005fbc <_dtoa_r+0x9c>
 80065f0:	601f      	str	r7, [r3, #0]
 80065f2:	e4e3      	b.n	8005fbc <_dtoa_r+0x9c>
 80065f4:	4627      	mov	r7, r4
 80065f6:	463b      	mov	r3, r7
 80065f8:	461f      	mov	r7, r3
 80065fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065fe:	2a39      	cmp	r2, #57	; 0x39
 8006600:	d107      	bne.n	8006612 <_dtoa_r+0x6f2>
 8006602:	9a03      	ldr	r2, [sp, #12]
 8006604:	429a      	cmp	r2, r3
 8006606:	d1f7      	bne.n	80065f8 <_dtoa_r+0x6d8>
 8006608:	2230      	movs	r2, #48	; 0x30
 800660a:	9903      	ldr	r1, [sp, #12]
 800660c:	f108 0801 	add.w	r8, r8, #1
 8006610:	700a      	strb	r2, [r1, #0]
 8006612:	781a      	ldrb	r2, [r3, #0]
 8006614:	3201      	adds	r2, #1
 8006616:	701a      	strb	r2, [r3, #0]
 8006618:	e79e      	b.n	8006558 <_dtoa_r+0x638>
 800661a:	46d8      	mov	r8, fp
 800661c:	e7eb      	b.n	80065f6 <_dtoa_r+0x6d6>
 800661e:	2200      	movs	r2, #0
 8006620:	4b6d      	ldr	r3, [pc, #436]	; (80067d8 <_dtoa_r+0x8b8>)
 8006622:	f7f9 ff59 	bl	80004d8 <__aeabi_dmul>
 8006626:	2200      	movs	r2, #0
 8006628:	2300      	movs	r3, #0
 800662a:	4680      	mov	r8, r0
 800662c:	4689      	mov	r9, r1
 800662e:	f7fa f9bb 	bl	80009a8 <__aeabi_dcmpeq>
 8006632:	2800      	cmp	r0, #0
 8006634:	d09b      	beq.n	800656e <_dtoa_r+0x64e>
 8006636:	e7cd      	b.n	80065d4 <_dtoa_r+0x6b4>
 8006638:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800663a:	2a00      	cmp	r2, #0
 800663c:	f000 80c4 	beq.w	80067c8 <_dtoa_r+0x8a8>
 8006640:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006642:	2a01      	cmp	r2, #1
 8006644:	f300 80a8 	bgt.w	8006798 <_dtoa_r+0x878>
 8006648:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800664a:	2a00      	cmp	r2, #0
 800664c:	f000 80a0 	beq.w	8006790 <_dtoa_r+0x870>
 8006650:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006654:	464f      	mov	r7, r9
 8006656:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800665a:	2101      	movs	r1, #1
 800665c:	441a      	add	r2, r3
 800665e:	4628      	mov	r0, r5
 8006660:	4499      	add	r9, r3
 8006662:	9209      	str	r2, [sp, #36]	; 0x24
 8006664:	f000 fb7e 	bl	8006d64 <__i2b>
 8006668:	4606      	mov	r6, r0
 800666a:	b15f      	cbz	r7, 8006684 <_dtoa_r+0x764>
 800666c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800666e:	2b00      	cmp	r3, #0
 8006670:	dd08      	ble.n	8006684 <_dtoa_r+0x764>
 8006672:	42bb      	cmp	r3, r7
 8006674:	bfa8      	it	ge
 8006676:	463b      	movge	r3, r7
 8006678:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800667a:	eba9 0903 	sub.w	r9, r9, r3
 800667e:	1aff      	subs	r7, r7, r3
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	9309      	str	r3, [sp, #36]	; 0x24
 8006684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006686:	b1f3      	cbz	r3, 80066c6 <_dtoa_r+0x7a6>
 8006688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 80a0 	beq.w	80067d0 <_dtoa_r+0x8b0>
 8006690:	2c00      	cmp	r4, #0
 8006692:	dd10      	ble.n	80066b6 <_dtoa_r+0x796>
 8006694:	4631      	mov	r1, r6
 8006696:	4622      	mov	r2, r4
 8006698:	4628      	mov	r0, r5
 800669a:	f000 fc21 	bl	8006ee0 <__pow5mult>
 800669e:	4652      	mov	r2, sl
 80066a0:	4601      	mov	r1, r0
 80066a2:	4606      	mov	r6, r0
 80066a4:	4628      	mov	r0, r5
 80066a6:	f000 fb73 	bl	8006d90 <__multiply>
 80066aa:	4680      	mov	r8, r0
 80066ac:	4651      	mov	r1, sl
 80066ae:	4628      	mov	r0, r5
 80066b0:	f000 faa2 	bl	8006bf8 <_Bfree>
 80066b4:	46c2      	mov	sl, r8
 80066b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b8:	1b1a      	subs	r2, r3, r4
 80066ba:	d004      	beq.n	80066c6 <_dtoa_r+0x7a6>
 80066bc:	4651      	mov	r1, sl
 80066be:	4628      	mov	r0, r5
 80066c0:	f000 fc0e 	bl	8006ee0 <__pow5mult>
 80066c4:	4682      	mov	sl, r0
 80066c6:	2101      	movs	r1, #1
 80066c8:	4628      	mov	r0, r5
 80066ca:	f000 fb4b 	bl	8006d64 <__i2b>
 80066ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066d0:	4604      	mov	r4, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f340 8082 	ble.w	80067dc <_dtoa_r+0x8bc>
 80066d8:	461a      	mov	r2, r3
 80066da:	4601      	mov	r1, r0
 80066dc:	4628      	mov	r0, r5
 80066de:	f000 fbff 	bl	8006ee0 <__pow5mult>
 80066e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066e4:	4604      	mov	r4, r0
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	dd7b      	ble.n	80067e2 <_dtoa_r+0x8c2>
 80066ea:	f04f 0800 	mov.w	r8, #0
 80066ee:	6923      	ldr	r3, [r4, #16]
 80066f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80066f4:	6918      	ldr	r0, [r3, #16]
 80066f6:	f000 fae7 	bl	8006cc8 <__hi0bits>
 80066fa:	f1c0 0020 	rsb	r0, r0, #32
 80066fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006700:	4418      	add	r0, r3
 8006702:	f010 001f 	ands.w	r0, r0, #31
 8006706:	f000 8092 	beq.w	800682e <_dtoa_r+0x90e>
 800670a:	f1c0 0320 	rsb	r3, r0, #32
 800670e:	2b04      	cmp	r3, #4
 8006710:	f340 8085 	ble.w	800681e <_dtoa_r+0x8fe>
 8006714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006716:	f1c0 001c 	rsb	r0, r0, #28
 800671a:	4403      	add	r3, r0
 800671c:	4481      	add	r9, r0
 800671e:	4407      	add	r7, r0
 8006720:	9309      	str	r3, [sp, #36]	; 0x24
 8006722:	f1b9 0f00 	cmp.w	r9, #0
 8006726:	dd05      	ble.n	8006734 <_dtoa_r+0x814>
 8006728:	4651      	mov	r1, sl
 800672a:	464a      	mov	r2, r9
 800672c:	4628      	mov	r0, r5
 800672e:	f000 fc31 	bl	8006f94 <__lshift>
 8006732:	4682      	mov	sl, r0
 8006734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006736:	2b00      	cmp	r3, #0
 8006738:	dd05      	ble.n	8006746 <_dtoa_r+0x826>
 800673a:	4621      	mov	r1, r4
 800673c:	461a      	mov	r2, r3
 800673e:	4628      	mov	r0, r5
 8006740:	f000 fc28 	bl	8006f94 <__lshift>
 8006744:	4604      	mov	r4, r0
 8006746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006748:	2b00      	cmp	r3, #0
 800674a:	d072      	beq.n	8006832 <_dtoa_r+0x912>
 800674c:	4621      	mov	r1, r4
 800674e:	4650      	mov	r0, sl
 8006750:	f000 fc8c 	bl	800706c <__mcmp>
 8006754:	2800      	cmp	r0, #0
 8006756:	da6c      	bge.n	8006832 <_dtoa_r+0x912>
 8006758:	2300      	movs	r3, #0
 800675a:	4651      	mov	r1, sl
 800675c:	220a      	movs	r2, #10
 800675e:	4628      	mov	r0, r5
 8006760:	f000 fa6c 	bl	8006c3c <__multadd>
 8006764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006766:	4682      	mov	sl, r0
 8006768:	f10b 3bff 	add.w	fp, fp, #4294967295
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 81ac 	beq.w	8006aca <_dtoa_r+0xbaa>
 8006772:	2300      	movs	r3, #0
 8006774:	4631      	mov	r1, r6
 8006776:	220a      	movs	r2, #10
 8006778:	4628      	mov	r0, r5
 800677a:	f000 fa5f 	bl	8006c3c <__multadd>
 800677e:	9b06      	ldr	r3, [sp, #24]
 8006780:	4606      	mov	r6, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	f300 8093 	bgt.w	80068ae <_dtoa_r+0x98e>
 8006788:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800678a:	2b02      	cmp	r3, #2
 800678c:	dc59      	bgt.n	8006842 <_dtoa_r+0x922>
 800678e:	e08e      	b.n	80068ae <_dtoa_r+0x98e>
 8006790:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006792:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006796:	e75d      	b.n	8006654 <_dtoa_r+0x734>
 8006798:	9b08      	ldr	r3, [sp, #32]
 800679a:	1e5c      	subs	r4, r3, #1
 800679c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800679e:	42a3      	cmp	r3, r4
 80067a0:	bfbf      	itttt	lt
 80067a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80067a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80067a6:	1ae3      	sublt	r3, r4, r3
 80067a8:	18d2      	addlt	r2, r2, r3
 80067aa:	bfa8      	it	ge
 80067ac:	1b1c      	subge	r4, r3, r4
 80067ae:	9b08      	ldr	r3, [sp, #32]
 80067b0:	bfbe      	ittt	lt
 80067b2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80067b4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80067b6:	2400      	movlt	r4, #0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	bfb5      	itete	lt
 80067bc:	eba9 0703 	sublt.w	r7, r9, r3
 80067c0:	464f      	movge	r7, r9
 80067c2:	2300      	movlt	r3, #0
 80067c4:	9b08      	ldrge	r3, [sp, #32]
 80067c6:	e747      	b.n	8006658 <_dtoa_r+0x738>
 80067c8:	464f      	mov	r7, r9
 80067ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80067cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80067ce:	e74c      	b.n	800666a <_dtoa_r+0x74a>
 80067d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067d2:	e773      	b.n	80066bc <_dtoa_r+0x79c>
 80067d4:	3fe00000 	.word	0x3fe00000
 80067d8:	40240000 	.word	0x40240000
 80067dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067de:	2b01      	cmp	r3, #1
 80067e0:	dc18      	bgt.n	8006814 <_dtoa_r+0x8f4>
 80067e2:	9b04      	ldr	r3, [sp, #16]
 80067e4:	b9b3      	cbnz	r3, 8006814 <_dtoa_r+0x8f4>
 80067e6:	9b05      	ldr	r3, [sp, #20]
 80067e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067ec:	b993      	cbnz	r3, 8006814 <_dtoa_r+0x8f4>
 80067ee:	9b05      	ldr	r3, [sp, #20]
 80067f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067f4:	0d1b      	lsrs	r3, r3, #20
 80067f6:	051b      	lsls	r3, r3, #20
 80067f8:	b17b      	cbz	r3, 800681a <_dtoa_r+0x8fa>
 80067fa:	f04f 0801 	mov.w	r8, #1
 80067fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006800:	f109 0901 	add.w	r9, r9, #1
 8006804:	3301      	adds	r3, #1
 8006806:	9309      	str	r3, [sp, #36]	; 0x24
 8006808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800680a:	2b00      	cmp	r3, #0
 800680c:	f47f af6f 	bne.w	80066ee <_dtoa_r+0x7ce>
 8006810:	2001      	movs	r0, #1
 8006812:	e774      	b.n	80066fe <_dtoa_r+0x7de>
 8006814:	f04f 0800 	mov.w	r8, #0
 8006818:	e7f6      	b.n	8006808 <_dtoa_r+0x8e8>
 800681a:	4698      	mov	r8, r3
 800681c:	e7f4      	b.n	8006808 <_dtoa_r+0x8e8>
 800681e:	d080      	beq.n	8006722 <_dtoa_r+0x802>
 8006820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006822:	331c      	adds	r3, #28
 8006824:	441a      	add	r2, r3
 8006826:	4499      	add	r9, r3
 8006828:	441f      	add	r7, r3
 800682a:	9209      	str	r2, [sp, #36]	; 0x24
 800682c:	e779      	b.n	8006722 <_dtoa_r+0x802>
 800682e:	4603      	mov	r3, r0
 8006830:	e7f6      	b.n	8006820 <_dtoa_r+0x900>
 8006832:	9b08      	ldr	r3, [sp, #32]
 8006834:	2b00      	cmp	r3, #0
 8006836:	dc34      	bgt.n	80068a2 <_dtoa_r+0x982>
 8006838:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800683a:	2b02      	cmp	r3, #2
 800683c:	dd31      	ble.n	80068a2 <_dtoa_r+0x982>
 800683e:	9b08      	ldr	r3, [sp, #32]
 8006840:	9306      	str	r3, [sp, #24]
 8006842:	9b06      	ldr	r3, [sp, #24]
 8006844:	b963      	cbnz	r3, 8006860 <_dtoa_r+0x940>
 8006846:	4621      	mov	r1, r4
 8006848:	2205      	movs	r2, #5
 800684a:	4628      	mov	r0, r5
 800684c:	f000 f9f6 	bl	8006c3c <__multadd>
 8006850:	4601      	mov	r1, r0
 8006852:	4604      	mov	r4, r0
 8006854:	4650      	mov	r0, sl
 8006856:	f000 fc09 	bl	800706c <__mcmp>
 800685a:	2800      	cmp	r0, #0
 800685c:	f73f adbf 	bgt.w	80063de <_dtoa_r+0x4be>
 8006860:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006862:	9f03      	ldr	r7, [sp, #12]
 8006864:	ea6f 0b03 	mvn.w	fp, r3
 8006868:	f04f 0800 	mov.w	r8, #0
 800686c:	4621      	mov	r1, r4
 800686e:	4628      	mov	r0, r5
 8006870:	f000 f9c2 	bl	8006bf8 <_Bfree>
 8006874:	2e00      	cmp	r6, #0
 8006876:	f43f aead 	beq.w	80065d4 <_dtoa_r+0x6b4>
 800687a:	f1b8 0f00 	cmp.w	r8, #0
 800687e:	d005      	beq.n	800688c <_dtoa_r+0x96c>
 8006880:	45b0      	cmp	r8, r6
 8006882:	d003      	beq.n	800688c <_dtoa_r+0x96c>
 8006884:	4641      	mov	r1, r8
 8006886:	4628      	mov	r0, r5
 8006888:	f000 f9b6 	bl	8006bf8 <_Bfree>
 800688c:	4631      	mov	r1, r6
 800688e:	4628      	mov	r0, r5
 8006890:	f000 f9b2 	bl	8006bf8 <_Bfree>
 8006894:	e69e      	b.n	80065d4 <_dtoa_r+0x6b4>
 8006896:	2400      	movs	r4, #0
 8006898:	4626      	mov	r6, r4
 800689a:	e7e1      	b.n	8006860 <_dtoa_r+0x940>
 800689c:	46c3      	mov	fp, r8
 800689e:	4626      	mov	r6, r4
 80068a0:	e59d      	b.n	80063de <_dtoa_r+0x4be>
 80068a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 80c8 	beq.w	8006a3a <_dtoa_r+0xb1a>
 80068aa:	9b08      	ldr	r3, [sp, #32]
 80068ac:	9306      	str	r3, [sp, #24]
 80068ae:	2f00      	cmp	r7, #0
 80068b0:	dd05      	ble.n	80068be <_dtoa_r+0x99e>
 80068b2:	4631      	mov	r1, r6
 80068b4:	463a      	mov	r2, r7
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 fb6c 	bl	8006f94 <__lshift>
 80068bc:	4606      	mov	r6, r0
 80068be:	f1b8 0f00 	cmp.w	r8, #0
 80068c2:	d05b      	beq.n	800697c <_dtoa_r+0xa5c>
 80068c4:	4628      	mov	r0, r5
 80068c6:	6871      	ldr	r1, [r6, #4]
 80068c8:	f000 f956 	bl	8006b78 <_Balloc>
 80068cc:	4607      	mov	r7, r0
 80068ce:	b928      	cbnz	r0, 80068dc <_dtoa_r+0x9bc>
 80068d0:	4602      	mov	r2, r0
 80068d2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80068d6:	4b81      	ldr	r3, [pc, #516]	; (8006adc <_dtoa_r+0xbbc>)
 80068d8:	f7ff bb36 	b.w	8005f48 <_dtoa_r+0x28>
 80068dc:	6932      	ldr	r2, [r6, #16]
 80068de:	f106 010c 	add.w	r1, r6, #12
 80068e2:	3202      	adds	r2, #2
 80068e4:	0092      	lsls	r2, r2, #2
 80068e6:	300c      	adds	r0, #12
 80068e8:	f7ff fa80 	bl	8005dec <memcpy>
 80068ec:	2201      	movs	r2, #1
 80068ee:	4639      	mov	r1, r7
 80068f0:	4628      	mov	r0, r5
 80068f2:	f000 fb4f 	bl	8006f94 <__lshift>
 80068f6:	46b0      	mov	r8, r6
 80068f8:	4606      	mov	r6, r0
 80068fa:	9b03      	ldr	r3, [sp, #12]
 80068fc:	9a03      	ldr	r2, [sp, #12]
 80068fe:	3301      	adds	r3, #1
 8006900:	9308      	str	r3, [sp, #32]
 8006902:	9b06      	ldr	r3, [sp, #24]
 8006904:	4413      	add	r3, r2
 8006906:	930b      	str	r3, [sp, #44]	; 0x2c
 8006908:	9b04      	ldr	r3, [sp, #16]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	930a      	str	r3, [sp, #40]	; 0x28
 8006910:	9b08      	ldr	r3, [sp, #32]
 8006912:	4621      	mov	r1, r4
 8006914:	3b01      	subs	r3, #1
 8006916:	4650      	mov	r0, sl
 8006918:	9304      	str	r3, [sp, #16]
 800691a:	f7ff fa75 	bl	8005e08 <quorem>
 800691e:	4641      	mov	r1, r8
 8006920:	9006      	str	r0, [sp, #24]
 8006922:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006926:	4650      	mov	r0, sl
 8006928:	f000 fba0 	bl	800706c <__mcmp>
 800692c:	4632      	mov	r2, r6
 800692e:	9009      	str	r0, [sp, #36]	; 0x24
 8006930:	4621      	mov	r1, r4
 8006932:	4628      	mov	r0, r5
 8006934:	f000 fbb6 	bl	80070a4 <__mdiff>
 8006938:	68c2      	ldr	r2, [r0, #12]
 800693a:	4607      	mov	r7, r0
 800693c:	bb02      	cbnz	r2, 8006980 <_dtoa_r+0xa60>
 800693e:	4601      	mov	r1, r0
 8006940:	4650      	mov	r0, sl
 8006942:	f000 fb93 	bl	800706c <__mcmp>
 8006946:	4602      	mov	r2, r0
 8006948:	4639      	mov	r1, r7
 800694a:	4628      	mov	r0, r5
 800694c:	920c      	str	r2, [sp, #48]	; 0x30
 800694e:	f000 f953 	bl	8006bf8 <_Bfree>
 8006952:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006954:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006956:	9f08      	ldr	r7, [sp, #32]
 8006958:	ea43 0102 	orr.w	r1, r3, r2
 800695c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800695e:	4319      	orrs	r1, r3
 8006960:	d110      	bne.n	8006984 <_dtoa_r+0xa64>
 8006962:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006966:	d029      	beq.n	80069bc <_dtoa_r+0xa9c>
 8006968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800696a:	2b00      	cmp	r3, #0
 800696c:	dd02      	ble.n	8006974 <_dtoa_r+0xa54>
 800696e:	9b06      	ldr	r3, [sp, #24]
 8006970:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006974:	9b04      	ldr	r3, [sp, #16]
 8006976:	f883 9000 	strb.w	r9, [r3]
 800697a:	e777      	b.n	800686c <_dtoa_r+0x94c>
 800697c:	4630      	mov	r0, r6
 800697e:	e7ba      	b.n	80068f6 <_dtoa_r+0x9d6>
 8006980:	2201      	movs	r2, #1
 8006982:	e7e1      	b.n	8006948 <_dtoa_r+0xa28>
 8006984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006986:	2b00      	cmp	r3, #0
 8006988:	db04      	blt.n	8006994 <_dtoa_r+0xa74>
 800698a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800698c:	430b      	orrs	r3, r1
 800698e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006990:	430b      	orrs	r3, r1
 8006992:	d120      	bne.n	80069d6 <_dtoa_r+0xab6>
 8006994:	2a00      	cmp	r2, #0
 8006996:	dded      	ble.n	8006974 <_dtoa_r+0xa54>
 8006998:	4651      	mov	r1, sl
 800699a:	2201      	movs	r2, #1
 800699c:	4628      	mov	r0, r5
 800699e:	f000 faf9 	bl	8006f94 <__lshift>
 80069a2:	4621      	mov	r1, r4
 80069a4:	4682      	mov	sl, r0
 80069a6:	f000 fb61 	bl	800706c <__mcmp>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	dc03      	bgt.n	80069b6 <_dtoa_r+0xa96>
 80069ae:	d1e1      	bne.n	8006974 <_dtoa_r+0xa54>
 80069b0:	f019 0f01 	tst.w	r9, #1
 80069b4:	d0de      	beq.n	8006974 <_dtoa_r+0xa54>
 80069b6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069ba:	d1d8      	bne.n	800696e <_dtoa_r+0xa4e>
 80069bc:	2339      	movs	r3, #57	; 0x39
 80069be:	9a04      	ldr	r2, [sp, #16]
 80069c0:	7013      	strb	r3, [r2, #0]
 80069c2:	463b      	mov	r3, r7
 80069c4:	461f      	mov	r7, r3
 80069c6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	2a39      	cmp	r2, #57	; 0x39
 80069ce:	d06b      	beq.n	8006aa8 <_dtoa_r+0xb88>
 80069d0:	3201      	adds	r2, #1
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	e74a      	b.n	800686c <_dtoa_r+0x94c>
 80069d6:	2a00      	cmp	r2, #0
 80069d8:	dd07      	ble.n	80069ea <_dtoa_r+0xaca>
 80069da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069de:	d0ed      	beq.n	80069bc <_dtoa_r+0xa9c>
 80069e0:	9a04      	ldr	r2, [sp, #16]
 80069e2:	f109 0301 	add.w	r3, r9, #1
 80069e6:	7013      	strb	r3, [r2, #0]
 80069e8:	e740      	b.n	800686c <_dtoa_r+0x94c>
 80069ea:	9b08      	ldr	r3, [sp, #32]
 80069ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069ee:	f803 9c01 	strb.w	r9, [r3, #-1]
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d042      	beq.n	8006a7c <_dtoa_r+0xb5c>
 80069f6:	4651      	mov	r1, sl
 80069f8:	2300      	movs	r3, #0
 80069fa:	220a      	movs	r2, #10
 80069fc:	4628      	mov	r0, r5
 80069fe:	f000 f91d 	bl	8006c3c <__multadd>
 8006a02:	45b0      	cmp	r8, r6
 8006a04:	4682      	mov	sl, r0
 8006a06:	f04f 0300 	mov.w	r3, #0
 8006a0a:	f04f 020a 	mov.w	r2, #10
 8006a0e:	4641      	mov	r1, r8
 8006a10:	4628      	mov	r0, r5
 8006a12:	d107      	bne.n	8006a24 <_dtoa_r+0xb04>
 8006a14:	f000 f912 	bl	8006c3c <__multadd>
 8006a18:	4680      	mov	r8, r0
 8006a1a:	4606      	mov	r6, r0
 8006a1c:	9b08      	ldr	r3, [sp, #32]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	9308      	str	r3, [sp, #32]
 8006a22:	e775      	b.n	8006910 <_dtoa_r+0x9f0>
 8006a24:	f000 f90a 	bl	8006c3c <__multadd>
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4680      	mov	r8, r0
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	220a      	movs	r2, #10
 8006a30:	4628      	mov	r0, r5
 8006a32:	f000 f903 	bl	8006c3c <__multadd>
 8006a36:	4606      	mov	r6, r0
 8006a38:	e7f0      	b.n	8006a1c <_dtoa_r+0xafc>
 8006a3a:	9b08      	ldr	r3, [sp, #32]
 8006a3c:	9306      	str	r3, [sp, #24]
 8006a3e:	9f03      	ldr	r7, [sp, #12]
 8006a40:	4621      	mov	r1, r4
 8006a42:	4650      	mov	r0, sl
 8006a44:	f7ff f9e0 	bl	8005e08 <quorem>
 8006a48:	9b03      	ldr	r3, [sp, #12]
 8006a4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a4e:	f807 9b01 	strb.w	r9, [r7], #1
 8006a52:	1afa      	subs	r2, r7, r3
 8006a54:	9b06      	ldr	r3, [sp, #24]
 8006a56:	4293      	cmp	r3, r2
 8006a58:	dd07      	ble.n	8006a6a <_dtoa_r+0xb4a>
 8006a5a:	4651      	mov	r1, sl
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	220a      	movs	r2, #10
 8006a60:	4628      	mov	r0, r5
 8006a62:	f000 f8eb 	bl	8006c3c <__multadd>
 8006a66:	4682      	mov	sl, r0
 8006a68:	e7ea      	b.n	8006a40 <_dtoa_r+0xb20>
 8006a6a:	9b06      	ldr	r3, [sp, #24]
 8006a6c:	f04f 0800 	mov.w	r8, #0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	bfcc      	ite	gt
 8006a74:	461f      	movgt	r7, r3
 8006a76:	2701      	movle	r7, #1
 8006a78:	9b03      	ldr	r3, [sp, #12]
 8006a7a:	441f      	add	r7, r3
 8006a7c:	4651      	mov	r1, sl
 8006a7e:	2201      	movs	r2, #1
 8006a80:	4628      	mov	r0, r5
 8006a82:	f000 fa87 	bl	8006f94 <__lshift>
 8006a86:	4621      	mov	r1, r4
 8006a88:	4682      	mov	sl, r0
 8006a8a:	f000 faef 	bl	800706c <__mcmp>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	dc97      	bgt.n	80069c2 <_dtoa_r+0xaa2>
 8006a92:	d102      	bne.n	8006a9a <_dtoa_r+0xb7a>
 8006a94:	f019 0f01 	tst.w	r9, #1
 8006a98:	d193      	bne.n	80069c2 <_dtoa_r+0xaa2>
 8006a9a:	463b      	mov	r3, r7
 8006a9c:	461f      	mov	r7, r3
 8006a9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006aa2:	2a30      	cmp	r2, #48	; 0x30
 8006aa4:	d0fa      	beq.n	8006a9c <_dtoa_r+0xb7c>
 8006aa6:	e6e1      	b.n	800686c <_dtoa_r+0x94c>
 8006aa8:	9a03      	ldr	r2, [sp, #12]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d18a      	bne.n	80069c4 <_dtoa_r+0xaa4>
 8006aae:	2331      	movs	r3, #49	; 0x31
 8006ab0:	f10b 0b01 	add.w	fp, fp, #1
 8006ab4:	e797      	b.n	80069e6 <_dtoa_r+0xac6>
 8006ab6:	4b0a      	ldr	r3, [pc, #40]	; (8006ae0 <_dtoa_r+0xbc0>)
 8006ab8:	f7ff ba9f 	b.w	8005ffa <_dtoa_r+0xda>
 8006abc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f47f aa77 	bne.w	8005fb2 <_dtoa_r+0x92>
 8006ac4:	4b07      	ldr	r3, [pc, #28]	; (8006ae4 <_dtoa_r+0xbc4>)
 8006ac6:	f7ff ba98 	b.w	8005ffa <_dtoa_r+0xda>
 8006aca:	9b06      	ldr	r3, [sp, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	dcb6      	bgt.n	8006a3e <_dtoa_r+0xb1e>
 8006ad0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	f73f aeb5 	bgt.w	8006842 <_dtoa_r+0x922>
 8006ad8:	e7b1      	b.n	8006a3e <_dtoa_r+0xb1e>
 8006ada:	bf00      	nop
 8006adc:	08008b9e 	.word	0x08008b9e
 8006ae0:	08008afe 	.word	0x08008afe
 8006ae4:	08008b22 	.word	0x08008b22

08006ae8 <_free_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	4605      	mov	r5, r0
 8006aec:	2900      	cmp	r1, #0
 8006aee:	d040      	beq.n	8006b72 <_free_r+0x8a>
 8006af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006af4:	1f0c      	subs	r4, r1, #4
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bfb8      	it	lt
 8006afa:	18e4      	addlt	r4, r4, r3
 8006afc:	f7fe fb4a 	bl	8005194 <__malloc_lock>
 8006b00:	4a1c      	ldr	r2, [pc, #112]	; (8006b74 <_free_r+0x8c>)
 8006b02:	6813      	ldr	r3, [r2, #0]
 8006b04:	b933      	cbnz	r3, 8006b14 <_free_r+0x2c>
 8006b06:	6063      	str	r3, [r4, #4]
 8006b08:	6014      	str	r4, [r2, #0]
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b10:	f7fe bb46 	b.w	80051a0 <__malloc_unlock>
 8006b14:	42a3      	cmp	r3, r4
 8006b16:	d908      	bls.n	8006b2a <_free_r+0x42>
 8006b18:	6820      	ldr	r0, [r4, #0]
 8006b1a:	1821      	adds	r1, r4, r0
 8006b1c:	428b      	cmp	r3, r1
 8006b1e:	bf01      	itttt	eq
 8006b20:	6819      	ldreq	r1, [r3, #0]
 8006b22:	685b      	ldreq	r3, [r3, #4]
 8006b24:	1809      	addeq	r1, r1, r0
 8006b26:	6021      	streq	r1, [r4, #0]
 8006b28:	e7ed      	b.n	8006b06 <_free_r+0x1e>
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	b10b      	cbz	r3, 8006b34 <_free_r+0x4c>
 8006b30:	42a3      	cmp	r3, r4
 8006b32:	d9fa      	bls.n	8006b2a <_free_r+0x42>
 8006b34:	6811      	ldr	r1, [r2, #0]
 8006b36:	1850      	adds	r0, r2, r1
 8006b38:	42a0      	cmp	r0, r4
 8006b3a:	d10b      	bne.n	8006b54 <_free_r+0x6c>
 8006b3c:	6820      	ldr	r0, [r4, #0]
 8006b3e:	4401      	add	r1, r0
 8006b40:	1850      	adds	r0, r2, r1
 8006b42:	4283      	cmp	r3, r0
 8006b44:	6011      	str	r1, [r2, #0]
 8006b46:	d1e0      	bne.n	8006b0a <_free_r+0x22>
 8006b48:	6818      	ldr	r0, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	4408      	add	r0, r1
 8006b4e:	6010      	str	r0, [r2, #0]
 8006b50:	6053      	str	r3, [r2, #4]
 8006b52:	e7da      	b.n	8006b0a <_free_r+0x22>
 8006b54:	d902      	bls.n	8006b5c <_free_r+0x74>
 8006b56:	230c      	movs	r3, #12
 8006b58:	602b      	str	r3, [r5, #0]
 8006b5a:	e7d6      	b.n	8006b0a <_free_r+0x22>
 8006b5c:	6820      	ldr	r0, [r4, #0]
 8006b5e:	1821      	adds	r1, r4, r0
 8006b60:	428b      	cmp	r3, r1
 8006b62:	bf01      	itttt	eq
 8006b64:	6819      	ldreq	r1, [r3, #0]
 8006b66:	685b      	ldreq	r3, [r3, #4]
 8006b68:	1809      	addeq	r1, r1, r0
 8006b6a:	6021      	streq	r1, [r4, #0]
 8006b6c:	6063      	str	r3, [r4, #4]
 8006b6e:	6054      	str	r4, [r2, #4]
 8006b70:	e7cb      	b.n	8006b0a <_free_r+0x22>
 8006b72:	bd38      	pop	{r3, r4, r5, pc}
 8006b74:	20000ae4 	.word	0x20000ae4

08006b78 <_Balloc>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	69c6      	ldr	r6, [r0, #28]
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	460d      	mov	r5, r1
 8006b80:	b976      	cbnz	r6, 8006ba0 <_Balloc+0x28>
 8006b82:	2010      	movs	r0, #16
 8006b84:	f7fe fa56 	bl	8005034 <malloc>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	61e0      	str	r0, [r4, #28]
 8006b8c:	b920      	cbnz	r0, 8006b98 <_Balloc+0x20>
 8006b8e:	216b      	movs	r1, #107	; 0x6b
 8006b90:	4b17      	ldr	r3, [pc, #92]	; (8006bf0 <_Balloc+0x78>)
 8006b92:	4818      	ldr	r0, [pc, #96]	; (8006bf4 <_Balloc+0x7c>)
 8006b94:	f000 ff5c 	bl	8007a50 <__assert_func>
 8006b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b9c:	6006      	str	r6, [r0, #0]
 8006b9e:	60c6      	str	r6, [r0, #12]
 8006ba0:	69e6      	ldr	r6, [r4, #28]
 8006ba2:	68f3      	ldr	r3, [r6, #12]
 8006ba4:	b183      	cbz	r3, 8006bc8 <_Balloc+0x50>
 8006ba6:	69e3      	ldr	r3, [r4, #28]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bae:	b9b8      	cbnz	r0, 8006be0 <_Balloc+0x68>
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	fa01 f605 	lsl.w	r6, r1, r5
 8006bb6:	1d72      	adds	r2, r6, #5
 8006bb8:	4620      	mov	r0, r4
 8006bba:	0092      	lsls	r2, r2, #2
 8006bbc:	f000 ff66 	bl	8007a8c <_calloc_r>
 8006bc0:	b160      	cbz	r0, 8006bdc <_Balloc+0x64>
 8006bc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006bc6:	e00e      	b.n	8006be6 <_Balloc+0x6e>
 8006bc8:	2221      	movs	r2, #33	; 0x21
 8006bca:	2104      	movs	r1, #4
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 ff5d 	bl	8007a8c <_calloc_r>
 8006bd2:	69e3      	ldr	r3, [r4, #28]
 8006bd4:	60f0      	str	r0, [r6, #12]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e4      	bne.n	8006ba6 <_Balloc+0x2e>
 8006bdc:	2000      	movs	r0, #0
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	6802      	ldr	r2, [r0, #0]
 8006be2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006be6:	2300      	movs	r3, #0
 8006be8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bec:	e7f7      	b.n	8006bde <_Balloc+0x66>
 8006bee:	bf00      	nop
 8006bf0:	08008b2f 	.word	0x08008b2f
 8006bf4:	08008baf 	.word	0x08008baf

08006bf8 <_Bfree>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	69c6      	ldr	r6, [r0, #28]
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	460c      	mov	r4, r1
 8006c00:	b976      	cbnz	r6, 8006c20 <_Bfree+0x28>
 8006c02:	2010      	movs	r0, #16
 8006c04:	f7fe fa16 	bl	8005034 <malloc>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	61e8      	str	r0, [r5, #28]
 8006c0c:	b920      	cbnz	r0, 8006c18 <_Bfree+0x20>
 8006c0e:	218f      	movs	r1, #143	; 0x8f
 8006c10:	4b08      	ldr	r3, [pc, #32]	; (8006c34 <_Bfree+0x3c>)
 8006c12:	4809      	ldr	r0, [pc, #36]	; (8006c38 <_Bfree+0x40>)
 8006c14:	f000 ff1c 	bl	8007a50 <__assert_func>
 8006c18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c1c:	6006      	str	r6, [r0, #0]
 8006c1e:	60c6      	str	r6, [r0, #12]
 8006c20:	b13c      	cbz	r4, 8006c32 <_Bfree+0x3a>
 8006c22:	69eb      	ldr	r3, [r5, #28]
 8006c24:	6862      	ldr	r2, [r4, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c2c:	6021      	str	r1, [r4, #0]
 8006c2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
 8006c34:	08008b2f 	.word	0x08008b2f
 8006c38:	08008baf 	.word	0x08008baf

08006c3c <__multadd>:
 8006c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c40:	4607      	mov	r7, r0
 8006c42:	460c      	mov	r4, r1
 8006c44:	461e      	mov	r6, r3
 8006c46:	2000      	movs	r0, #0
 8006c48:	690d      	ldr	r5, [r1, #16]
 8006c4a:	f101 0c14 	add.w	ip, r1, #20
 8006c4e:	f8dc 3000 	ldr.w	r3, [ip]
 8006c52:	3001      	adds	r0, #1
 8006c54:	b299      	uxth	r1, r3
 8006c56:	fb02 6101 	mla	r1, r2, r1, r6
 8006c5a:	0c1e      	lsrs	r6, r3, #16
 8006c5c:	0c0b      	lsrs	r3, r1, #16
 8006c5e:	fb02 3306 	mla	r3, r2, r6, r3
 8006c62:	b289      	uxth	r1, r1
 8006c64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c68:	4285      	cmp	r5, r0
 8006c6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c6e:	f84c 1b04 	str.w	r1, [ip], #4
 8006c72:	dcec      	bgt.n	8006c4e <__multadd+0x12>
 8006c74:	b30e      	cbz	r6, 8006cba <__multadd+0x7e>
 8006c76:	68a3      	ldr	r3, [r4, #8]
 8006c78:	42ab      	cmp	r3, r5
 8006c7a:	dc19      	bgt.n	8006cb0 <__multadd+0x74>
 8006c7c:	6861      	ldr	r1, [r4, #4]
 8006c7e:	4638      	mov	r0, r7
 8006c80:	3101      	adds	r1, #1
 8006c82:	f7ff ff79 	bl	8006b78 <_Balloc>
 8006c86:	4680      	mov	r8, r0
 8006c88:	b928      	cbnz	r0, 8006c96 <__multadd+0x5a>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	21ba      	movs	r1, #186	; 0xba
 8006c8e:	4b0c      	ldr	r3, [pc, #48]	; (8006cc0 <__multadd+0x84>)
 8006c90:	480c      	ldr	r0, [pc, #48]	; (8006cc4 <__multadd+0x88>)
 8006c92:	f000 fedd 	bl	8007a50 <__assert_func>
 8006c96:	6922      	ldr	r2, [r4, #16]
 8006c98:	f104 010c 	add.w	r1, r4, #12
 8006c9c:	3202      	adds	r2, #2
 8006c9e:	0092      	lsls	r2, r2, #2
 8006ca0:	300c      	adds	r0, #12
 8006ca2:	f7ff f8a3 	bl	8005dec <memcpy>
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	4638      	mov	r0, r7
 8006caa:	f7ff ffa5 	bl	8006bf8 <_Bfree>
 8006cae:	4644      	mov	r4, r8
 8006cb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006cb4:	3501      	adds	r5, #1
 8006cb6:	615e      	str	r6, [r3, #20]
 8006cb8:	6125      	str	r5, [r4, #16]
 8006cba:	4620      	mov	r0, r4
 8006cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc0:	08008b9e 	.word	0x08008b9e
 8006cc4:	08008baf 	.word	0x08008baf

08006cc8 <__hi0bits>:
 8006cc8:	0c02      	lsrs	r2, r0, #16
 8006cca:	0412      	lsls	r2, r2, #16
 8006ccc:	4603      	mov	r3, r0
 8006cce:	b9ca      	cbnz	r2, 8006d04 <__hi0bits+0x3c>
 8006cd0:	0403      	lsls	r3, r0, #16
 8006cd2:	2010      	movs	r0, #16
 8006cd4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006cd8:	bf04      	itt	eq
 8006cda:	021b      	lsleq	r3, r3, #8
 8006cdc:	3008      	addeq	r0, #8
 8006cde:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006ce2:	bf04      	itt	eq
 8006ce4:	011b      	lsleq	r3, r3, #4
 8006ce6:	3004      	addeq	r0, #4
 8006ce8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006cec:	bf04      	itt	eq
 8006cee:	009b      	lsleq	r3, r3, #2
 8006cf0:	3002      	addeq	r0, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	db05      	blt.n	8006d02 <__hi0bits+0x3a>
 8006cf6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006cfa:	f100 0001 	add.w	r0, r0, #1
 8006cfe:	bf08      	it	eq
 8006d00:	2020      	moveq	r0, #32
 8006d02:	4770      	bx	lr
 8006d04:	2000      	movs	r0, #0
 8006d06:	e7e5      	b.n	8006cd4 <__hi0bits+0xc>

08006d08 <__lo0bits>:
 8006d08:	6803      	ldr	r3, [r0, #0]
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	f013 0007 	ands.w	r0, r3, #7
 8006d10:	d00b      	beq.n	8006d2a <__lo0bits+0x22>
 8006d12:	07d9      	lsls	r1, r3, #31
 8006d14:	d421      	bmi.n	8006d5a <__lo0bits+0x52>
 8006d16:	0798      	lsls	r0, r3, #30
 8006d18:	bf49      	itett	mi
 8006d1a:	085b      	lsrmi	r3, r3, #1
 8006d1c:	089b      	lsrpl	r3, r3, #2
 8006d1e:	2001      	movmi	r0, #1
 8006d20:	6013      	strmi	r3, [r2, #0]
 8006d22:	bf5c      	itt	pl
 8006d24:	2002      	movpl	r0, #2
 8006d26:	6013      	strpl	r3, [r2, #0]
 8006d28:	4770      	bx	lr
 8006d2a:	b299      	uxth	r1, r3
 8006d2c:	b909      	cbnz	r1, 8006d32 <__lo0bits+0x2a>
 8006d2e:	2010      	movs	r0, #16
 8006d30:	0c1b      	lsrs	r3, r3, #16
 8006d32:	b2d9      	uxtb	r1, r3
 8006d34:	b909      	cbnz	r1, 8006d3a <__lo0bits+0x32>
 8006d36:	3008      	adds	r0, #8
 8006d38:	0a1b      	lsrs	r3, r3, #8
 8006d3a:	0719      	lsls	r1, r3, #28
 8006d3c:	bf04      	itt	eq
 8006d3e:	091b      	lsreq	r3, r3, #4
 8006d40:	3004      	addeq	r0, #4
 8006d42:	0799      	lsls	r1, r3, #30
 8006d44:	bf04      	itt	eq
 8006d46:	089b      	lsreq	r3, r3, #2
 8006d48:	3002      	addeq	r0, #2
 8006d4a:	07d9      	lsls	r1, r3, #31
 8006d4c:	d403      	bmi.n	8006d56 <__lo0bits+0x4e>
 8006d4e:	085b      	lsrs	r3, r3, #1
 8006d50:	f100 0001 	add.w	r0, r0, #1
 8006d54:	d003      	beq.n	8006d5e <__lo0bits+0x56>
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	4770      	bx	lr
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	4770      	bx	lr
 8006d5e:	2020      	movs	r0, #32
 8006d60:	4770      	bx	lr
	...

08006d64 <__i2b>:
 8006d64:	b510      	push	{r4, lr}
 8006d66:	460c      	mov	r4, r1
 8006d68:	2101      	movs	r1, #1
 8006d6a:	f7ff ff05 	bl	8006b78 <_Balloc>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	b928      	cbnz	r0, 8006d7e <__i2b+0x1a>
 8006d72:	f240 1145 	movw	r1, #325	; 0x145
 8006d76:	4b04      	ldr	r3, [pc, #16]	; (8006d88 <__i2b+0x24>)
 8006d78:	4804      	ldr	r0, [pc, #16]	; (8006d8c <__i2b+0x28>)
 8006d7a:	f000 fe69 	bl	8007a50 <__assert_func>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	6144      	str	r4, [r0, #20]
 8006d82:	6103      	str	r3, [r0, #16]
 8006d84:	bd10      	pop	{r4, pc}
 8006d86:	bf00      	nop
 8006d88:	08008b9e 	.word	0x08008b9e
 8006d8c:	08008baf 	.word	0x08008baf

08006d90 <__multiply>:
 8006d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d94:	4691      	mov	r9, r2
 8006d96:	690a      	ldr	r2, [r1, #16]
 8006d98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d9c:	460c      	mov	r4, r1
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	bfbe      	ittt	lt
 8006da2:	460b      	movlt	r3, r1
 8006da4:	464c      	movlt	r4, r9
 8006da6:	4699      	movlt	r9, r3
 8006da8:	6927      	ldr	r7, [r4, #16]
 8006daa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006dae:	68a3      	ldr	r3, [r4, #8]
 8006db0:	6861      	ldr	r1, [r4, #4]
 8006db2:	eb07 060a 	add.w	r6, r7, sl
 8006db6:	42b3      	cmp	r3, r6
 8006db8:	b085      	sub	sp, #20
 8006dba:	bfb8      	it	lt
 8006dbc:	3101      	addlt	r1, #1
 8006dbe:	f7ff fedb 	bl	8006b78 <_Balloc>
 8006dc2:	b930      	cbnz	r0, 8006dd2 <__multiply+0x42>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006dca:	4b43      	ldr	r3, [pc, #268]	; (8006ed8 <__multiply+0x148>)
 8006dcc:	4843      	ldr	r0, [pc, #268]	; (8006edc <__multiply+0x14c>)
 8006dce:	f000 fe3f 	bl	8007a50 <__assert_func>
 8006dd2:	f100 0514 	add.w	r5, r0, #20
 8006dd6:	462b      	mov	r3, r5
 8006dd8:	2200      	movs	r2, #0
 8006dda:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006dde:	4543      	cmp	r3, r8
 8006de0:	d321      	bcc.n	8006e26 <__multiply+0x96>
 8006de2:	f104 0314 	add.w	r3, r4, #20
 8006de6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006dea:	f109 0314 	add.w	r3, r9, #20
 8006dee:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006df2:	9202      	str	r2, [sp, #8]
 8006df4:	1b3a      	subs	r2, r7, r4
 8006df6:	3a15      	subs	r2, #21
 8006df8:	f022 0203 	bic.w	r2, r2, #3
 8006dfc:	3204      	adds	r2, #4
 8006dfe:	f104 0115 	add.w	r1, r4, #21
 8006e02:	428f      	cmp	r7, r1
 8006e04:	bf38      	it	cc
 8006e06:	2204      	movcc	r2, #4
 8006e08:	9201      	str	r2, [sp, #4]
 8006e0a:	9a02      	ldr	r2, [sp, #8]
 8006e0c:	9303      	str	r3, [sp, #12]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d80c      	bhi.n	8006e2c <__multiply+0x9c>
 8006e12:	2e00      	cmp	r6, #0
 8006e14:	dd03      	ble.n	8006e1e <__multiply+0x8e>
 8006e16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d05a      	beq.n	8006ed4 <__multiply+0x144>
 8006e1e:	6106      	str	r6, [r0, #16]
 8006e20:	b005      	add	sp, #20
 8006e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e26:	f843 2b04 	str.w	r2, [r3], #4
 8006e2a:	e7d8      	b.n	8006dde <__multiply+0x4e>
 8006e2c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e30:	f1ba 0f00 	cmp.w	sl, #0
 8006e34:	d023      	beq.n	8006e7e <__multiply+0xee>
 8006e36:	46a9      	mov	r9, r5
 8006e38:	f04f 0c00 	mov.w	ip, #0
 8006e3c:	f104 0e14 	add.w	lr, r4, #20
 8006e40:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e44:	f8d9 1000 	ldr.w	r1, [r9]
 8006e48:	fa1f fb82 	uxth.w	fp, r2
 8006e4c:	b289      	uxth	r1, r1
 8006e4e:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e52:	4461      	add	r1, ip
 8006e54:	f8d9 c000 	ldr.w	ip, [r9]
 8006e58:	0c12      	lsrs	r2, r2, #16
 8006e5a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006e5e:	fb0a c202 	mla	r2, sl, r2, ip
 8006e62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e66:	b289      	uxth	r1, r1
 8006e68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e6c:	4577      	cmp	r7, lr
 8006e6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e72:	f849 1b04 	str.w	r1, [r9], #4
 8006e76:	d8e3      	bhi.n	8006e40 <__multiply+0xb0>
 8006e78:	9a01      	ldr	r2, [sp, #4]
 8006e7a:	f845 c002 	str.w	ip, [r5, r2]
 8006e7e:	9a03      	ldr	r2, [sp, #12]
 8006e80:	3304      	adds	r3, #4
 8006e82:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e86:	f1b9 0f00 	cmp.w	r9, #0
 8006e8a:	d021      	beq.n	8006ed0 <__multiply+0x140>
 8006e8c:	46ae      	mov	lr, r5
 8006e8e:	f04f 0a00 	mov.w	sl, #0
 8006e92:	6829      	ldr	r1, [r5, #0]
 8006e94:	f104 0c14 	add.w	ip, r4, #20
 8006e98:	f8bc b000 	ldrh.w	fp, [ip]
 8006e9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ea0:	b289      	uxth	r1, r1
 8006ea2:	fb09 220b 	mla	r2, r9, fp, r2
 8006ea6:	4452      	add	r2, sl
 8006ea8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006eac:	f84e 1b04 	str.w	r1, [lr], #4
 8006eb0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006eb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006eb8:	f8be 1000 	ldrh.w	r1, [lr]
 8006ebc:	4567      	cmp	r7, ip
 8006ebe:	fb09 110a 	mla	r1, r9, sl, r1
 8006ec2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006ec6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006eca:	d8e5      	bhi.n	8006e98 <__multiply+0x108>
 8006ecc:	9a01      	ldr	r2, [sp, #4]
 8006ece:	50a9      	str	r1, [r5, r2]
 8006ed0:	3504      	adds	r5, #4
 8006ed2:	e79a      	b.n	8006e0a <__multiply+0x7a>
 8006ed4:	3e01      	subs	r6, #1
 8006ed6:	e79c      	b.n	8006e12 <__multiply+0x82>
 8006ed8:	08008b9e 	.word	0x08008b9e
 8006edc:	08008baf 	.word	0x08008baf

08006ee0 <__pow5mult>:
 8006ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee4:	4615      	mov	r5, r2
 8006ee6:	f012 0203 	ands.w	r2, r2, #3
 8006eea:	4606      	mov	r6, r0
 8006eec:	460f      	mov	r7, r1
 8006eee:	d007      	beq.n	8006f00 <__pow5mult+0x20>
 8006ef0:	4c25      	ldr	r4, [pc, #148]	; (8006f88 <__pow5mult+0xa8>)
 8006ef2:	3a01      	subs	r2, #1
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006efa:	f7ff fe9f 	bl	8006c3c <__multadd>
 8006efe:	4607      	mov	r7, r0
 8006f00:	10ad      	asrs	r5, r5, #2
 8006f02:	d03d      	beq.n	8006f80 <__pow5mult+0xa0>
 8006f04:	69f4      	ldr	r4, [r6, #28]
 8006f06:	b97c      	cbnz	r4, 8006f28 <__pow5mult+0x48>
 8006f08:	2010      	movs	r0, #16
 8006f0a:	f7fe f893 	bl	8005034 <malloc>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	61f0      	str	r0, [r6, #28]
 8006f12:	b928      	cbnz	r0, 8006f20 <__pow5mult+0x40>
 8006f14:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006f18:	4b1c      	ldr	r3, [pc, #112]	; (8006f8c <__pow5mult+0xac>)
 8006f1a:	481d      	ldr	r0, [pc, #116]	; (8006f90 <__pow5mult+0xb0>)
 8006f1c:	f000 fd98 	bl	8007a50 <__assert_func>
 8006f20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f24:	6004      	str	r4, [r0, #0]
 8006f26:	60c4      	str	r4, [r0, #12]
 8006f28:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006f2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f30:	b94c      	cbnz	r4, 8006f46 <__pow5mult+0x66>
 8006f32:	f240 2171 	movw	r1, #625	; 0x271
 8006f36:	4630      	mov	r0, r6
 8006f38:	f7ff ff14 	bl	8006d64 <__i2b>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	4604      	mov	r4, r0
 8006f40:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f44:	6003      	str	r3, [r0, #0]
 8006f46:	f04f 0900 	mov.w	r9, #0
 8006f4a:	07eb      	lsls	r3, r5, #31
 8006f4c:	d50a      	bpl.n	8006f64 <__pow5mult+0x84>
 8006f4e:	4639      	mov	r1, r7
 8006f50:	4622      	mov	r2, r4
 8006f52:	4630      	mov	r0, r6
 8006f54:	f7ff ff1c 	bl	8006d90 <__multiply>
 8006f58:	4680      	mov	r8, r0
 8006f5a:	4639      	mov	r1, r7
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f7ff fe4b 	bl	8006bf8 <_Bfree>
 8006f62:	4647      	mov	r7, r8
 8006f64:	106d      	asrs	r5, r5, #1
 8006f66:	d00b      	beq.n	8006f80 <__pow5mult+0xa0>
 8006f68:	6820      	ldr	r0, [r4, #0]
 8006f6a:	b938      	cbnz	r0, 8006f7c <__pow5mult+0x9c>
 8006f6c:	4622      	mov	r2, r4
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4630      	mov	r0, r6
 8006f72:	f7ff ff0d 	bl	8006d90 <__multiply>
 8006f76:	6020      	str	r0, [r4, #0]
 8006f78:	f8c0 9000 	str.w	r9, [r0]
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	e7e4      	b.n	8006f4a <__pow5mult+0x6a>
 8006f80:	4638      	mov	r0, r7
 8006f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f86:	bf00      	nop
 8006f88:	08008cf8 	.word	0x08008cf8
 8006f8c:	08008b2f 	.word	0x08008b2f
 8006f90:	08008baf 	.word	0x08008baf

08006f94 <__lshift>:
 8006f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f98:	460c      	mov	r4, r1
 8006f9a:	4607      	mov	r7, r0
 8006f9c:	4691      	mov	r9, r2
 8006f9e:	6923      	ldr	r3, [r4, #16]
 8006fa0:	6849      	ldr	r1, [r1, #4]
 8006fa2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006fa6:	68a3      	ldr	r3, [r4, #8]
 8006fa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fac:	f108 0601 	add.w	r6, r8, #1
 8006fb0:	42b3      	cmp	r3, r6
 8006fb2:	db0b      	blt.n	8006fcc <__lshift+0x38>
 8006fb4:	4638      	mov	r0, r7
 8006fb6:	f7ff fddf 	bl	8006b78 <_Balloc>
 8006fba:	4605      	mov	r5, r0
 8006fbc:	b948      	cbnz	r0, 8006fd2 <__lshift+0x3e>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006fc4:	4b27      	ldr	r3, [pc, #156]	; (8007064 <__lshift+0xd0>)
 8006fc6:	4828      	ldr	r0, [pc, #160]	; (8007068 <__lshift+0xd4>)
 8006fc8:	f000 fd42 	bl	8007a50 <__assert_func>
 8006fcc:	3101      	adds	r1, #1
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	e7ee      	b.n	8006fb0 <__lshift+0x1c>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f100 0114 	add.w	r1, r0, #20
 8006fd8:	f100 0210 	add.w	r2, r0, #16
 8006fdc:	4618      	mov	r0, r3
 8006fde:	4553      	cmp	r3, sl
 8006fe0:	db33      	blt.n	800704a <__lshift+0xb6>
 8006fe2:	6920      	ldr	r0, [r4, #16]
 8006fe4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fe8:	f104 0314 	add.w	r3, r4, #20
 8006fec:	f019 091f 	ands.w	r9, r9, #31
 8006ff0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ff4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ff8:	d02b      	beq.n	8007052 <__lshift+0xbe>
 8006ffa:	468a      	mov	sl, r1
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f1c9 0e20 	rsb	lr, r9, #32
 8007002:	6818      	ldr	r0, [r3, #0]
 8007004:	fa00 f009 	lsl.w	r0, r0, r9
 8007008:	4310      	orrs	r0, r2
 800700a:	f84a 0b04 	str.w	r0, [sl], #4
 800700e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007012:	459c      	cmp	ip, r3
 8007014:	fa22 f20e 	lsr.w	r2, r2, lr
 8007018:	d8f3      	bhi.n	8007002 <__lshift+0x6e>
 800701a:	ebac 0304 	sub.w	r3, ip, r4
 800701e:	3b15      	subs	r3, #21
 8007020:	f023 0303 	bic.w	r3, r3, #3
 8007024:	3304      	adds	r3, #4
 8007026:	f104 0015 	add.w	r0, r4, #21
 800702a:	4584      	cmp	ip, r0
 800702c:	bf38      	it	cc
 800702e:	2304      	movcc	r3, #4
 8007030:	50ca      	str	r2, [r1, r3]
 8007032:	b10a      	cbz	r2, 8007038 <__lshift+0xa4>
 8007034:	f108 0602 	add.w	r6, r8, #2
 8007038:	3e01      	subs	r6, #1
 800703a:	4638      	mov	r0, r7
 800703c:	4621      	mov	r1, r4
 800703e:	612e      	str	r6, [r5, #16]
 8007040:	f7ff fdda 	bl	8006bf8 <_Bfree>
 8007044:	4628      	mov	r0, r5
 8007046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704a:	f842 0f04 	str.w	r0, [r2, #4]!
 800704e:	3301      	adds	r3, #1
 8007050:	e7c5      	b.n	8006fde <__lshift+0x4a>
 8007052:	3904      	subs	r1, #4
 8007054:	f853 2b04 	ldr.w	r2, [r3], #4
 8007058:	459c      	cmp	ip, r3
 800705a:	f841 2f04 	str.w	r2, [r1, #4]!
 800705e:	d8f9      	bhi.n	8007054 <__lshift+0xc0>
 8007060:	e7ea      	b.n	8007038 <__lshift+0xa4>
 8007062:	bf00      	nop
 8007064:	08008b9e 	.word	0x08008b9e
 8007068:	08008baf 	.word	0x08008baf

0800706c <__mcmp>:
 800706c:	4603      	mov	r3, r0
 800706e:	690a      	ldr	r2, [r1, #16]
 8007070:	6900      	ldr	r0, [r0, #16]
 8007072:	b530      	push	{r4, r5, lr}
 8007074:	1a80      	subs	r0, r0, r2
 8007076:	d10d      	bne.n	8007094 <__mcmp+0x28>
 8007078:	3314      	adds	r3, #20
 800707a:	3114      	adds	r1, #20
 800707c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007080:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007084:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007088:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800708c:	4295      	cmp	r5, r2
 800708e:	d002      	beq.n	8007096 <__mcmp+0x2a>
 8007090:	d304      	bcc.n	800709c <__mcmp+0x30>
 8007092:	2001      	movs	r0, #1
 8007094:	bd30      	pop	{r4, r5, pc}
 8007096:	42a3      	cmp	r3, r4
 8007098:	d3f4      	bcc.n	8007084 <__mcmp+0x18>
 800709a:	e7fb      	b.n	8007094 <__mcmp+0x28>
 800709c:	f04f 30ff 	mov.w	r0, #4294967295
 80070a0:	e7f8      	b.n	8007094 <__mcmp+0x28>
	...

080070a4 <__mdiff>:
 80070a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	460d      	mov	r5, r1
 80070aa:	4607      	mov	r7, r0
 80070ac:	4611      	mov	r1, r2
 80070ae:	4628      	mov	r0, r5
 80070b0:	4614      	mov	r4, r2
 80070b2:	f7ff ffdb 	bl	800706c <__mcmp>
 80070b6:	1e06      	subs	r6, r0, #0
 80070b8:	d111      	bne.n	80070de <__mdiff+0x3a>
 80070ba:	4631      	mov	r1, r6
 80070bc:	4638      	mov	r0, r7
 80070be:	f7ff fd5b 	bl	8006b78 <_Balloc>
 80070c2:	4602      	mov	r2, r0
 80070c4:	b928      	cbnz	r0, 80070d2 <__mdiff+0x2e>
 80070c6:	f240 2137 	movw	r1, #567	; 0x237
 80070ca:	4b3a      	ldr	r3, [pc, #232]	; (80071b4 <__mdiff+0x110>)
 80070cc:	483a      	ldr	r0, [pc, #232]	; (80071b8 <__mdiff+0x114>)
 80070ce:	f000 fcbf 	bl	8007a50 <__assert_func>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80070d8:	4610      	mov	r0, r2
 80070da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070de:	bfa4      	itt	ge
 80070e0:	4623      	movge	r3, r4
 80070e2:	462c      	movge	r4, r5
 80070e4:	4638      	mov	r0, r7
 80070e6:	6861      	ldr	r1, [r4, #4]
 80070e8:	bfa6      	itte	ge
 80070ea:	461d      	movge	r5, r3
 80070ec:	2600      	movge	r6, #0
 80070ee:	2601      	movlt	r6, #1
 80070f0:	f7ff fd42 	bl	8006b78 <_Balloc>
 80070f4:	4602      	mov	r2, r0
 80070f6:	b918      	cbnz	r0, 8007100 <__mdiff+0x5c>
 80070f8:	f240 2145 	movw	r1, #581	; 0x245
 80070fc:	4b2d      	ldr	r3, [pc, #180]	; (80071b4 <__mdiff+0x110>)
 80070fe:	e7e5      	b.n	80070cc <__mdiff+0x28>
 8007100:	f102 0814 	add.w	r8, r2, #20
 8007104:	46c2      	mov	sl, r8
 8007106:	f04f 0c00 	mov.w	ip, #0
 800710a:	6927      	ldr	r7, [r4, #16]
 800710c:	60c6      	str	r6, [r0, #12]
 800710e:	692e      	ldr	r6, [r5, #16]
 8007110:	f104 0014 	add.w	r0, r4, #20
 8007114:	f105 0914 	add.w	r9, r5, #20
 8007118:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800711c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007120:	3410      	adds	r4, #16
 8007122:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007126:	f859 3b04 	ldr.w	r3, [r9], #4
 800712a:	fa1f f18b 	uxth.w	r1, fp
 800712e:	4461      	add	r1, ip
 8007130:	fa1f fc83 	uxth.w	ip, r3
 8007134:	0c1b      	lsrs	r3, r3, #16
 8007136:	eba1 010c 	sub.w	r1, r1, ip
 800713a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800713e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007142:	b289      	uxth	r1, r1
 8007144:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007148:	454e      	cmp	r6, r9
 800714a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800714e:	f84a 1b04 	str.w	r1, [sl], #4
 8007152:	d8e6      	bhi.n	8007122 <__mdiff+0x7e>
 8007154:	1b73      	subs	r3, r6, r5
 8007156:	3b15      	subs	r3, #21
 8007158:	f023 0303 	bic.w	r3, r3, #3
 800715c:	3515      	adds	r5, #21
 800715e:	3304      	adds	r3, #4
 8007160:	42ae      	cmp	r6, r5
 8007162:	bf38      	it	cc
 8007164:	2304      	movcc	r3, #4
 8007166:	4418      	add	r0, r3
 8007168:	4443      	add	r3, r8
 800716a:	461e      	mov	r6, r3
 800716c:	4605      	mov	r5, r0
 800716e:	4575      	cmp	r5, lr
 8007170:	d30e      	bcc.n	8007190 <__mdiff+0xec>
 8007172:	f10e 0103 	add.w	r1, lr, #3
 8007176:	1a09      	subs	r1, r1, r0
 8007178:	f021 0103 	bic.w	r1, r1, #3
 800717c:	3803      	subs	r0, #3
 800717e:	4586      	cmp	lr, r0
 8007180:	bf38      	it	cc
 8007182:	2100      	movcc	r1, #0
 8007184:	440b      	add	r3, r1
 8007186:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800718a:	b189      	cbz	r1, 80071b0 <__mdiff+0x10c>
 800718c:	6117      	str	r7, [r2, #16]
 800718e:	e7a3      	b.n	80070d8 <__mdiff+0x34>
 8007190:	f855 8b04 	ldr.w	r8, [r5], #4
 8007194:	fa1f f188 	uxth.w	r1, r8
 8007198:	4461      	add	r1, ip
 800719a:	140c      	asrs	r4, r1, #16
 800719c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80071a0:	b289      	uxth	r1, r1
 80071a2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80071a6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80071aa:	f846 1b04 	str.w	r1, [r6], #4
 80071ae:	e7de      	b.n	800716e <__mdiff+0xca>
 80071b0:	3f01      	subs	r7, #1
 80071b2:	e7e8      	b.n	8007186 <__mdiff+0xe2>
 80071b4:	08008b9e 	.word	0x08008b9e
 80071b8:	08008baf 	.word	0x08008baf

080071bc <__d2b>:
 80071bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071be:	2101      	movs	r1, #1
 80071c0:	4617      	mov	r7, r2
 80071c2:	461c      	mov	r4, r3
 80071c4:	9e08      	ldr	r6, [sp, #32]
 80071c6:	f7ff fcd7 	bl	8006b78 <_Balloc>
 80071ca:	4605      	mov	r5, r0
 80071cc:	b930      	cbnz	r0, 80071dc <__d2b+0x20>
 80071ce:	4602      	mov	r2, r0
 80071d0:	f240 310f 	movw	r1, #783	; 0x30f
 80071d4:	4b22      	ldr	r3, [pc, #136]	; (8007260 <__d2b+0xa4>)
 80071d6:	4823      	ldr	r0, [pc, #140]	; (8007264 <__d2b+0xa8>)
 80071d8:	f000 fc3a 	bl	8007a50 <__assert_func>
 80071dc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80071e0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80071e4:	bb24      	cbnz	r4, 8007230 <__d2b+0x74>
 80071e6:	2f00      	cmp	r7, #0
 80071e8:	9301      	str	r3, [sp, #4]
 80071ea:	d026      	beq.n	800723a <__d2b+0x7e>
 80071ec:	4668      	mov	r0, sp
 80071ee:	9700      	str	r7, [sp, #0]
 80071f0:	f7ff fd8a 	bl	8006d08 <__lo0bits>
 80071f4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80071f8:	b1e8      	cbz	r0, 8007236 <__d2b+0x7a>
 80071fa:	f1c0 0320 	rsb	r3, r0, #32
 80071fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007202:	430b      	orrs	r3, r1
 8007204:	40c2      	lsrs	r2, r0
 8007206:	616b      	str	r3, [r5, #20]
 8007208:	9201      	str	r2, [sp, #4]
 800720a:	9b01      	ldr	r3, [sp, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	bf14      	ite	ne
 8007210:	2102      	movne	r1, #2
 8007212:	2101      	moveq	r1, #1
 8007214:	61ab      	str	r3, [r5, #24]
 8007216:	6129      	str	r1, [r5, #16]
 8007218:	b1bc      	cbz	r4, 800724a <__d2b+0x8e>
 800721a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800721e:	4404      	add	r4, r0
 8007220:	6034      	str	r4, [r6, #0]
 8007222:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007228:	6018      	str	r0, [r3, #0]
 800722a:	4628      	mov	r0, r5
 800722c:	b003      	add	sp, #12
 800722e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007234:	e7d7      	b.n	80071e6 <__d2b+0x2a>
 8007236:	6169      	str	r1, [r5, #20]
 8007238:	e7e7      	b.n	800720a <__d2b+0x4e>
 800723a:	a801      	add	r0, sp, #4
 800723c:	f7ff fd64 	bl	8006d08 <__lo0bits>
 8007240:	9b01      	ldr	r3, [sp, #4]
 8007242:	2101      	movs	r1, #1
 8007244:	616b      	str	r3, [r5, #20]
 8007246:	3020      	adds	r0, #32
 8007248:	e7e5      	b.n	8007216 <__d2b+0x5a>
 800724a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800724e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007252:	6030      	str	r0, [r6, #0]
 8007254:	6918      	ldr	r0, [r3, #16]
 8007256:	f7ff fd37 	bl	8006cc8 <__hi0bits>
 800725a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800725e:	e7e2      	b.n	8007226 <__d2b+0x6a>
 8007260:	08008b9e 	.word	0x08008b9e
 8007264:	08008baf 	.word	0x08008baf

08007268 <__ssputs_r>:
 8007268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800726c:	461f      	mov	r7, r3
 800726e:	688e      	ldr	r6, [r1, #8]
 8007270:	4682      	mov	sl, r0
 8007272:	42be      	cmp	r6, r7
 8007274:	460c      	mov	r4, r1
 8007276:	4690      	mov	r8, r2
 8007278:	680b      	ldr	r3, [r1, #0]
 800727a:	d82c      	bhi.n	80072d6 <__ssputs_r+0x6e>
 800727c:	898a      	ldrh	r2, [r1, #12]
 800727e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007282:	d026      	beq.n	80072d2 <__ssputs_r+0x6a>
 8007284:	6965      	ldr	r5, [r4, #20]
 8007286:	6909      	ldr	r1, [r1, #16]
 8007288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800728c:	eba3 0901 	sub.w	r9, r3, r1
 8007290:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007294:	1c7b      	adds	r3, r7, #1
 8007296:	444b      	add	r3, r9
 8007298:	106d      	asrs	r5, r5, #1
 800729a:	429d      	cmp	r5, r3
 800729c:	bf38      	it	cc
 800729e:	461d      	movcc	r5, r3
 80072a0:	0553      	lsls	r3, r2, #21
 80072a2:	d527      	bpl.n	80072f4 <__ssputs_r+0x8c>
 80072a4:	4629      	mov	r1, r5
 80072a6:	f7fd fef5 	bl	8005094 <_malloc_r>
 80072aa:	4606      	mov	r6, r0
 80072ac:	b360      	cbz	r0, 8007308 <__ssputs_r+0xa0>
 80072ae:	464a      	mov	r2, r9
 80072b0:	6921      	ldr	r1, [r4, #16]
 80072b2:	f7fe fd9b 	bl	8005dec <memcpy>
 80072b6:	89a3      	ldrh	r3, [r4, #12]
 80072b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c0:	81a3      	strh	r3, [r4, #12]
 80072c2:	6126      	str	r6, [r4, #16]
 80072c4:	444e      	add	r6, r9
 80072c6:	6026      	str	r6, [r4, #0]
 80072c8:	463e      	mov	r6, r7
 80072ca:	6165      	str	r5, [r4, #20]
 80072cc:	eba5 0509 	sub.w	r5, r5, r9
 80072d0:	60a5      	str	r5, [r4, #8]
 80072d2:	42be      	cmp	r6, r7
 80072d4:	d900      	bls.n	80072d8 <__ssputs_r+0x70>
 80072d6:	463e      	mov	r6, r7
 80072d8:	4632      	mov	r2, r6
 80072da:	4641      	mov	r1, r8
 80072dc:	6820      	ldr	r0, [r4, #0]
 80072de:	f000 fb9d 	bl	8007a1c <memmove>
 80072e2:	2000      	movs	r0, #0
 80072e4:	68a3      	ldr	r3, [r4, #8]
 80072e6:	1b9b      	subs	r3, r3, r6
 80072e8:	60a3      	str	r3, [r4, #8]
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	4433      	add	r3, r6
 80072ee:	6023      	str	r3, [r4, #0]
 80072f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f4:	462a      	mov	r2, r5
 80072f6:	f000 fbef 	bl	8007ad8 <_realloc_r>
 80072fa:	4606      	mov	r6, r0
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d1e0      	bne.n	80072c2 <__ssputs_r+0x5a>
 8007300:	4650      	mov	r0, sl
 8007302:	6921      	ldr	r1, [r4, #16]
 8007304:	f7ff fbf0 	bl	8006ae8 <_free_r>
 8007308:	230c      	movs	r3, #12
 800730a:	f8ca 3000 	str.w	r3, [sl]
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	f04f 30ff 	mov.w	r0, #4294967295
 8007314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007318:	81a3      	strh	r3, [r4, #12]
 800731a:	e7e9      	b.n	80072f0 <__ssputs_r+0x88>

0800731c <_svfiprintf_r>:
 800731c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007320:	4698      	mov	r8, r3
 8007322:	898b      	ldrh	r3, [r1, #12]
 8007324:	4607      	mov	r7, r0
 8007326:	061b      	lsls	r3, r3, #24
 8007328:	460d      	mov	r5, r1
 800732a:	4614      	mov	r4, r2
 800732c:	b09d      	sub	sp, #116	; 0x74
 800732e:	d50e      	bpl.n	800734e <_svfiprintf_r+0x32>
 8007330:	690b      	ldr	r3, [r1, #16]
 8007332:	b963      	cbnz	r3, 800734e <_svfiprintf_r+0x32>
 8007334:	2140      	movs	r1, #64	; 0x40
 8007336:	f7fd fead 	bl	8005094 <_malloc_r>
 800733a:	6028      	str	r0, [r5, #0]
 800733c:	6128      	str	r0, [r5, #16]
 800733e:	b920      	cbnz	r0, 800734a <_svfiprintf_r+0x2e>
 8007340:	230c      	movs	r3, #12
 8007342:	603b      	str	r3, [r7, #0]
 8007344:	f04f 30ff 	mov.w	r0, #4294967295
 8007348:	e0d0      	b.n	80074ec <_svfiprintf_r+0x1d0>
 800734a:	2340      	movs	r3, #64	; 0x40
 800734c:	616b      	str	r3, [r5, #20]
 800734e:	2300      	movs	r3, #0
 8007350:	9309      	str	r3, [sp, #36]	; 0x24
 8007352:	2320      	movs	r3, #32
 8007354:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007358:	2330      	movs	r3, #48	; 0x30
 800735a:	f04f 0901 	mov.w	r9, #1
 800735e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007362:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007504 <_svfiprintf_r+0x1e8>
 8007366:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800736a:	4623      	mov	r3, r4
 800736c:	469a      	mov	sl, r3
 800736e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007372:	b10a      	cbz	r2, 8007378 <_svfiprintf_r+0x5c>
 8007374:	2a25      	cmp	r2, #37	; 0x25
 8007376:	d1f9      	bne.n	800736c <_svfiprintf_r+0x50>
 8007378:	ebba 0b04 	subs.w	fp, sl, r4
 800737c:	d00b      	beq.n	8007396 <_svfiprintf_r+0x7a>
 800737e:	465b      	mov	r3, fp
 8007380:	4622      	mov	r2, r4
 8007382:	4629      	mov	r1, r5
 8007384:	4638      	mov	r0, r7
 8007386:	f7ff ff6f 	bl	8007268 <__ssputs_r>
 800738a:	3001      	adds	r0, #1
 800738c:	f000 80a9 	beq.w	80074e2 <_svfiprintf_r+0x1c6>
 8007390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007392:	445a      	add	r2, fp
 8007394:	9209      	str	r2, [sp, #36]	; 0x24
 8007396:	f89a 3000 	ldrb.w	r3, [sl]
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 80a1 	beq.w	80074e2 <_svfiprintf_r+0x1c6>
 80073a0:	2300      	movs	r3, #0
 80073a2:	f04f 32ff 	mov.w	r2, #4294967295
 80073a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073aa:	f10a 0a01 	add.w	sl, sl, #1
 80073ae:	9304      	str	r3, [sp, #16]
 80073b0:	9307      	str	r3, [sp, #28]
 80073b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073b6:	931a      	str	r3, [sp, #104]	; 0x68
 80073b8:	4654      	mov	r4, sl
 80073ba:	2205      	movs	r2, #5
 80073bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073c0:	4850      	ldr	r0, [pc, #320]	; (8007504 <_svfiprintf_r+0x1e8>)
 80073c2:	f7fe fd05 	bl	8005dd0 <memchr>
 80073c6:	9a04      	ldr	r2, [sp, #16]
 80073c8:	b9d8      	cbnz	r0, 8007402 <_svfiprintf_r+0xe6>
 80073ca:	06d0      	lsls	r0, r2, #27
 80073cc:	bf44      	itt	mi
 80073ce:	2320      	movmi	r3, #32
 80073d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073d4:	0711      	lsls	r1, r2, #28
 80073d6:	bf44      	itt	mi
 80073d8:	232b      	movmi	r3, #43	; 0x2b
 80073da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073de:	f89a 3000 	ldrb.w	r3, [sl]
 80073e2:	2b2a      	cmp	r3, #42	; 0x2a
 80073e4:	d015      	beq.n	8007412 <_svfiprintf_r+0xf6>
 80073e6:	4654      	mov	r4, sl
 80073e8:	2000      	movs	r0, #0
 80073ea:	f04f 0c0a 	mov.w	ip, #10
 80073ee:	9a07      	ldr	r2, [sp, #28]
 80073f0:	4621      	mov	r1, r4
 80073f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073f6:	3b30      	subs	r3, #48	; 0x30
 80073f8:	2b09      	cmp	r3, #9
 80073fa:	d94d      	bls.n	8007498 <_svfiprintf_r+0x17c>
 80073fc:	b1b0      	cbz	r0, 800742c <_svfiprintf_r+0x110>
 80073fe:	9207      	str	r2, [sp, #28]
 8007400:	e014      	b.n	800742c <_svfiprintf_r+0x110>
 8007402:	eba0 0308 	sub.w	r3, r0, r8
 8007406:	fa09 f303 	lsl.w	r3, r9, r3
 800740a:	4313      	orrs	r3, r2
 800740c:	46a2      	mov	sl, r4
 800740e:	9304      	str	r3, [sp, #16]
 8007410:	e7d2      	b.n	80073b8 <_svfiprintf_r+0x9c>
 8007412:	9b03      	ldr	r3, [sp, #12]
 8007414:	1d19      	adds	r1, r3, #4
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	9103      	str	r1, [sp, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	bfbb      	ittet	lt
 800741e:	425b      	neglt	r3, r3
 8007420:	f042 0202 	orrlt.w	r2, r2, #2
 8007424:	9307      	strge	r3, [sp, #28]
 8007426:	9307      	strlt	r3, [sp, #28]
 8007428:	bfb8      	it	lt
 800742a:	9204      	strlt	r2, [sp, #16]
 800742c:	7823      	ldrb	r3, [r4, #0]
 800742e:	2b2e      	cmp	r3, #46	; 0x2e
 8007430:	d10c      	bne.n	800744c <_svfiprintf_r+0x130>
 8007432:	7863      	ldrb	r3, [r4, #1]
 8007434:	2b2a      	cmp	r3, #42	; 0x2a
 8007436:	d134      	bne.n	80074a2 <_svfiprintf_r+0x186>
 8007438:	9b03      	ldr	r3, [sp, #12]
 800743a:	3402      	adds	r4, #2
 800743c:	1d1a      	adds	r2, r3, #4
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	9203      	str	r2, [sp, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	bfb8      	it	lt
 8007446:	f04f 33ff 	movlt.w	r3, #4294967295
 800744a:	9305      	str	r3, [sp, #20]
 800744c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007508 <_svfiprintf_r+0x1ec>
 8007450:	2203      	movs	r2, #3
 8007452:	4650      	mov	r0, sl
 8007454:	7821      	ldrb	r1, [r4, #0]
 8007456:	f7fe fcbb 	bl	8005dd0 <memchr>
 800745a:	b138      	cbz	r0, 800746c <_svfiprintf_r+0x150>
 800745c:	2240      	movs	r2, #64	; 0x40
 800745e:	9b04      	ldr	r3, [sp, #16]
 8007460:	eba0 000a 	sub.w	r0, r0, sl
 8007464:	4082      	lsls	r2, r0
 8007466:	4313      	orrs	r3, r2
 8007468:	3401      	adds	r4, #1
 800746a:	9304      	str	r3, [sp, #16]
 800746c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007470:	2206      	movs	r2, #6
 8007472:	4826      	ldr	r0, [pc, #152]	; (800750c <_svfiprintf_r+0x1f0>)
 8007474:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007478:	f7fe fcaa 	bl	8005dd0 <memchr>
 800747c:	2800      	cmp	r0, #0
 800747e:	d038      	beq.n	80074f2 <_svfiprintf_r+0x1d6>
 8007480:	4b23      	ldr	r3, [pc, #140]	; (8007510 <_svfiprintf_r+0x1f4>)
 8007482:	bb1b      	cbnz	r3, 80074cc <_svfiprintf_r+0x1b0>
 8007484:	9b03      	ldr	r3, [sp, #12]
 8007486:	3307      	adds	r3, #7
 8007488:	f023 0307 	bic.w	r3, r3, #7
 800748c:	3308      	adds	r3, #8
 800748e:	9303      	str	r3, [sp, #12]
 8007490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007492:	4433      	add	r3, r6
 8007494:	9309      	str	r3, [sp, #36]	; 0x24
 8007496:	e768      	b.n	800736a <_svfiprintf_r+0x4e>
 8007498:	460c      	mov	r4, r1
 800749a:	2001      	movs	r0, #1
 800749c:	fb0c 3202 	mla	r2, ip, r2, r3
 80074a0:	e7a6      	b.n	80073f0 <_svfiprintf_r+0xd4>
 80074a2:	2300      	movs	r3, #0
 80074a4:	f04f 0c0a 	mov.w	ip, #10
 80074a8:	4619      	mov	r1, r3
 80074aa:	3401      	adds	r4, #1
 80074ac:	9305      	str	r3, [sp, #20]
 80074ae:	4620      	mov	r0, r4
 80074b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074b4:	3a30      	subs	r2, #48	; 0x30
 80074b6:	2a09      	cmp	r2, #9
 80074b8:	d903      	bls.n	80074c2 <_svfiprintf_r+0x1a6>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0c6      	beq.n	800744c <_svfiprintf_r+0x130>
 80074be:	9105      	str	r1, [sp, #20]
 80074c0:	e7c4      	b.n	800744c <_svfiprintf_r+0x130>
 80074c2:	4604      	mov	r4, r0
 80074c4:	2301      	movs	r3, #1
 80074c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80074ca:	e7f0      	b.n	80074ae <_svfiprintf_r+0x192>
 80074cc:	ab03      	add	r3, sp, #12
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	462a      	mov	r2, r5
 80074d2:	4638      	mov	r0, r7
 80074d4:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <_svfiprintf_r+0x1f8>)
 80074d6:	a904      	add	r1, sp, #16
 80074d8:	f7fd ff04 	bl	80052e4 <_printf_float>
 80074dc:	1c42      	adds	r2, r0, #1
 80074de:	4606      	mov	r6, r0
 80074e0:	d1d6      	bne.n	8007490 <_svfiprintf_r+0x174>
 80074e2:	89ab      	ldrh	r3, [r5, #12]
 80074e4:	065b      	lsls	r3, r3, #25
 80074e6:	f53f af2d 	bmi.w	8007344 <_svfiprintf_r+0x28>
 80074ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074ec:	b01d      	add	sp, #116	; 0x74
 80074ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f2:	ab03      	add	r3, sp, #12
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	462a      	mov	r2, r5
 80074f8:	4638      	mov	r0, r7
 80074fa:	4b06      	ldr	r3, [pc, #24]	; (8007514 <_svfiprintf_r+0x1f8>)
 80074fc:	a904      	add	r1, sp, #16
 80074fe:	f7fe f991 	bl	8005824 <_printf_i>
 8007502:	e7eb      	b.n	80074dc <_svfiprintf_r+0x1c0>
 8007504:	08008d04 	.word	0x08008d04
 8007508:	08008d0a 	.word	0x08008d0a
 800750c:	08008d0e 	.word	0x08008d0e
 8007510:	080052e5 	.word	0x080052e5
 8007514:	08007269 	.word	0x08007269

08007518 <__sfputc_r>:
 8007518:	6893      	ldr	r3, [r2, #8]
 800751a:	b410      	push	{r4}
 800751c:	3b01      	subs	r3, #1
 800751e:	2b00      	cmp	r3, #0
 8007520:	6093      	str	r3, [r2, #8]
 8007522:	da07      	bge.n	8007534 <__sfputc_r+0x1c>
 8007524:	6994      	ldr	r4, [r2, #24]
 8007526:	42a3      	cmp	r3, r4
 8007528:	db01      	blt.n	800752e <__sfputc_r+0x16>
 800752a:	290a      	cmp	r1, #10
 800752c:	d102      	bne.n	8007534 <__sfputc_r+0x1c>
 800752e:	bc10      	pop	{r4}
 8007530:	f000 b9de 	b.w	80078f0 <__swbuf_r>
 8007534:	6813      	ldr	r3, [r2, #0]
 8007536:	1c58      	adds	r0, r3, #1
 8007538:	6010      	str	r0, [r2, #0]
 800753a:	7019      	strb	r1, [r3, #0]
 800753c:	4608      	mov	r0, r1
 800753e:	bc10      	pop	{r4}
 8007540:	4770      	bx	lr

08007542 <__sfputs_r>:
 8007542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007544:	4606      	mov	r6, r0
 8007546:	460f      	mov	r7, r1
 8007548:	4614      	mov	r4, r2
 800754a:	18d5      	adds	r5, r2, r3
 800754c:	42ac      	cmp	r4, r5
 800754e:	d101      	bne.n	8007554 <__sfputs_r+0x12>
 8007550:	2000      	movs	r0, #0
 8007552:	e007      	b.n	8007564 <__sfputs_r+0x22>
 8007554:	463a      	mov	r2, r7
 8007556:	4630      	mov	r0, r6
 8007558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800755c:	f7ff ffdc 	bl	8007518 <__sfputc_r>
 8007560:	1c43      	adds	r3, r0, #1
 8007562:	d1f3      	bne.n	800754c <__sfputs_r+0xa>
 8007564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007568 <_vfiprintf_r>:
 8007568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756c:	460d      	mov	r5, r1
 800756e:	4614      	mov	r4, r2
 8007570:	4698      	mov	r8, r3
 8007572:	4606      	mov	r6, r0
 8007574:	b09d      	sub	sp, #116	; 0x74
 8007576:	b118      	cbz	r0, 8007580 <_vfiprintf_r+0x18>
 8007578:	6a03      	ldr	r3, [r0, #32]
 800757a:	b90b      	cbnz	r3, 8007580 <_vfiprintf_r+0x18>
 800757c:	f7fe faee 	bl	8005b5c <__sinit>
 8007580:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007582:	07d9      	lsls	r1, r3, #31
 8007584:	d405      	bmi.n	8007592 <_vfiprintf_r+0x2a>
 8007586:	89ab      	ldrh	r3, [r5, #12]
 8007588:	059a      	lsls	r2, r3, #22
 800758a:	d402      	bmi.n	8007592 <_vfiprintf_r+0x2a>
 800758c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800758e:	f7fe fc1d 	bl	8005dcc <__retarget_lock_acquire_recursive>
 8007592:	89ab      	ldrh	r3, [r5, #12]
 8007594:	071b      	lsls	r3, r3, #28
 8007596:	d501      	bpl.n	800759c <_vfiprintf_r+0x34>
 8007598:	692b      	ldr	r3, [r5, #16]
 800759a:	b99b      	cbnz	r3, 80075c4 <_vfiprintf_r+0x5c>
 800759c:	4629      	mov	r1, r5
 800759e:	4630      	mov	r0, r6
 80075a0:	f000 f9e4 	bl	800796c <__swsetup_r>
 80075a4:	b170      	cbz	r0, 80075c4 <_vfiprintf_r+0x5c>
 80075a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075a8:	07dc      	lsls	r4, r3, #31
 80075aa:	d504      	bpl.n	80075b6 <_vfiprintf_r+0x4e>
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295
 80075b0:	b01d      	add	sp, #116	; 0x74
 80075b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b6:	89ab      	ldrh	r3, [r5, #12]
 80075b8:	0598      	lsls	r0, r3, #22
 80075ba:	d4f7      	bmi.n	80075ac <_vfiprintf_r+0x44>
 80075bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075be:	f7fe fc06 	bl	8005dce <__retarget_lock_release_recursive>
 80075c2:	e7f3      	b.n	80075ac <_vfiprintf_r+0x44>
 80075c4:	2300      	movs	r3, #0
 80075c6:	9309      	str	r3, [sp, #36]	; 0x24
 80075c8:	2320      	movs	r3, #32
 80075ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075ce:	2330      	movs	r3, #48	; 0x30
 80075d0:	f04f 0901 	mov.w	r9, #1
 80075d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80075d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007788 <_vfiprintf_r+0x220>
 80075dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075e0:	4623      	mov	r3, r4
 80075e2:	469a      	mov	sl, r3
 80075e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075e8:	b10a      	cbz	r2, 80075ee <_vfiprintf_r+0x86>
 80075ea:	2a25      	cmp	r2, #37	; 0x25
 80075ec:	d1f9      	bne.n	80075e2 <_vfiprintf_r+0x7a>
 80075ee:	ebba 0b04 	subs.w	fp, sl, r4
 80075f2:	d00b      	beq.n	800760c <_vfiprintf_r+0xa4>
 80075f4:	465b      	mov	r3, fp
 80075f6:	4622      	mov	r2, r4
 80075f8:	4629      	mov	r1, r5
 80075fa:	4630      	mov	r0, r6
 80075fc:	f7ff ffa1 	bl	8007542 <__sfputs_r>
 8007600:	3001      	adds	r0, #1
 8007602:	f000 80a9 	beq.w	8007758 <_vfiprintf_r+0x1f0>
 8007606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007608:	445a      	add	r2, fp
 800760a:	9209      	str	r2, [sp, #36]	; 0x24
 800760c:	f89a 3000 	ldrb.w	r3, [sl]
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 80a1 	beq.w	8007758 <_vfiprintf_r+0x1f0>
 8007616:	2300      	movs	r3, #0
 8007618:	f04f 32ff 	mov.w	r2, #4294967295
 800761c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007620:	f10a 0a01 	add.w	sl, sl, #1
 8007624:	9304      	str	r3, [sp, #16]
 8007626:	9307      	str	r3, [sp, #28]
 8007628:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800762c:	931a      	str	r3, [sp, #104]	; 0x68
 800762e:	4654      	mov	r4, sl
 8007630:	2205      	movs	r2, #5
 8007632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007636:	4854      	ldr	r0, [pc, #336]	; (8007788 <_vfiprintf_r+0x220>)
 8007638:	f7fe fbca 	bl	8005dd0 <memchr>
 800763c:	9a04      	ldr	r2, [sp, #16]
 800763e:	b9d8      	cbnz	r0, 8007678 <_vfiprintf_r+0x110>
 8007640:	06d1      	lsls	r1, r2, #27
 8007642:	bf44      	itt	mi
 8007644:	2320      	movmi	r3, #32
 8007646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800764a:	0713      	lsls	r3, r2, #28
 800764c:	bf44      	itt	mi
 800764e:	232b      	movmi	r3, #43	; 0x2b
 8007650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007654:	f89a 3000 	ldrb.w	r3, [sl]
 8007658:	2b2a      	cmp	r3, #42	; 0x2a
 800765a:	d015      	beq.n	8007688 <_vfiprintf_r+0x120>
 800765c:	4654      	mov	r4, sl
 800765e:	2000      	movs	r0, #0
 8007660:	f04f 0c0a 	mov.w	ip, #10
 8007664:	9a07      	ldr	r2, [sp, #28]
 8007666:	4621      	mov	r1, r4
 8007668:	f811 3b01 	ldrb.w	r3, [r1], #1
 800766c:	3b30      	subs	r3, #48	; 0x30
 800766e:	2b09      	cmp	r3, #9
 8007670:	d94d      	bls.n	800770e <_vfiprintf_r+0x1a6>
 8007672:	b1b0      	cbz	r0, 80076a2 <_vfiprintf_r+0x13a>
 8007674:	9207      	str	r2, [sp, #28]
 8007676:	e014      	b.n	80076a2 <_vfiprintf_r+0x13a>
 8007678:	eba0 0308 	sub.w	r3, r0, r8
 800767c:	fa09 f303 	lsl.w	r3, r9, r3
 8007680:	4313      	orrs	r3, r2
 8007682:	46a2      	mov	sl, r4
 8007684:	9304      	str	r3, [sp, #16]
 8007686:	e7d2      	b.n	800762e <_vfiprintf_r+0xc6>
 8007688:	9b03      	ldr	r3, [sp, #12]
 800768a:	1d19      	adds	r1, r3, #4
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	9103      	str	r1, [sp, #12]
 8007690:	2b00      	cmp	r3, #0
 8007692:	bfbb      	ittet	lt
 8007694:	425b      	neglt	r3, r3
 8007696:	f042 0202 	orrlt.w	r2, r2, #2
 800769a:	9307      	strge	r3, [sp, #28]
 800769c:	9307      	strlt	r3, [sp, #28]
 800769e:	bfb8      	it	lt
 80076a0:	9204      	strlt	r2, [sp, #16]
 80076a2:	7823      	ldrb	r3, [r4, #0]
 80076a4:	2b2e      	cmp	r3, #46	; 0x2e
 80076a6:	d10c      	bne.n	80076c2 <_vfiprintf_r+0x15a>
 80076a8:	7863      	ldrb	r3, [r4, #1]
 80076aa:	2b2a      	cmp	r3, #42	; 0x2a
 80076ac:	d134      	bne.n	8007718 <_vfiprintf_r+0x1b0>
 80076ae:	9b03      	ldr	r3, [sp, #12]
 80076b0:	3402      	adds	r4, #2
 80076b2:	1d1a      	adds	r2, r3, #4
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	9203      	str	r2, [sp, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	bfb8      	it	lt
 80076bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80076c0:	9305      	str	r3, [sp, #20]
 80076c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800778c <_vfiprintf_r+0x224>
 80076c6:	2203      	movs	r2, #3
 80076c8:	4650      	mov	r0, sl
 80076ca:	7821      	ldrb	r1, [r4, #0]
 80076cc:	f7fe fb80 	bl	8005dd0 <memchr>
 80076d0:	b138      	cbz	r0, 80076e2 <_vfiprintf_r+0x17a>
 80076d2:	2240      	movs	r2, #64	; 0x40
 80076d4:	9b04      	ldr	r3, [sp, #16]
 80076d6:	eba0 000a 	sub.w	r0, r0, sl
 80076da:	4082      	lsls	r2, r0
 80076dc:	4313      	orrs	r3, r2
 80076de:	3401      	adds	r4, #1
 80076e0:	9304      	str	r3, [sp, #16]
 80076e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e6:	2206      	movs	r2, #6
 80076e8:	4829      	ldr	r0, [pc, #164]	; (8007790 <_vfiprintf_r+0x228>)
 80076ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076ee:	f7fe fb6f 	bl	8005dd0 <memchr>
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d03f      	beq.n	8007776 <_vfiprintf_r+0x20e>
 80076f6:	4b27      	ldr	r3, [pc, #156]	; (8007794 <_vfiprintf_r+0x22c>)
 80076f8:	bb1b      	cbnz	r3, 8007742 <_vfiprintf_r+0x1da>
 80076fa:	9b03      	ldr	r3, [sp, #12]
 80076fc:	3307      	adds	r3, #7
 80076fe:	f023 0307 	bic.w	r3, r3, #7
 8007702:	3308      	adds	r3, #8
 8007704:	9303      	str	r3, [sp, #12]
 8007706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007708:	443b      	add	r3, r7
 800770a:	9309      	str	r3, [sp, #36]	; 0x24
 800770c:	e768      	b.n	80075e0 <_vfiprintf_r+0x78>
 800770e:	460c      	mov	r4, r1
 8007710:	2001      	movs	r0, #1
 8007712:	fb0c 3202 	mla	r2, ip, r2, r3
 8007716:	e7a6      	b.n	8007666 <_vfiprintf_r+0xfe>
 8007718:	2300      	movs	r3, #0
 800771a:	f04f 0c0a 	mov.w	ip, #10
 800771e:	4619      	mov	r1, r3
 8007720:	3401      	adds	r4, #1
 8007722:	9305      	str	r3, [sp, #20]
 8007724:	4620      	mov	r0, r4
 8007726:	f810 2b01 	ldrb.w	r2, [r0], #1
 800772a:	3a30      	subs	r2, #48	; 0x30
 800772c:	2a09      	cmp	r2, #9
 800772e:	d903      	bls.n	8007738 <_vfiprintf_r+0x1d0>
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0c6      	beq.n	80076c2 <_vfiprintf_r+0x15a>
 8007734:	9105      	str	r1, [sp, #20]
 8007736:	e7c4      	b.n	80076c2 <_vfiprintf_r+0x15a>
 8007738:	4604      	mov	r4, r0
 800773a:	2301      	movs	r3, #1
 800773c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007740:	e7f0      	b.n	8007724 <_vfiprintf_r+0x1bc>
 8007742:	ab03      	add	r3, sp, #12
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	462a      	mov	r2, r5
 8007748:	4630      	mov	r0, r6
 800774a:	4b13      	ldr	r3, [pc, #76]	; (8007798 <_vfiprintf_r+0x230>)
 800774c:	a904      	add	r1, sp, #16
 800774e:	f7fd fdc9 	bl	80052e4 <_printf_float>
 8007752:	4607      	mov	r7, r0
 8007754:	1c78      	adds	r0, r7, #1
 8007756:	d1d6      	bne.n	8007706 <_vfiprintf_r+0x19e>
 8007758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800775a:	07d9      	lsls	r1, r3, #31
 800775c:	d405      	bmi.n	800776a <_vfiprintf_r+0x202>
 800775e:	89ab      	ldrh	r3, [r5, #12]
 8007760:	059a      	lsls	r2, r3, #22
 8007762:	d402      	bmi.n	800776a <_vfiprintf_r+0x202>
 8007764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007766:	f7fe fb32 	bl	8005dce <__retarget_lock_release_recursive>
 800776a:	89ab      	ldrh	r3, [r5, #12]
 800776c:	065b      	lsls	r3, r3, #25
 800776e:	f53f af1d 	bmi.w	80075ac <_vfiprintf_r+0x44>
 8007772:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007774:	e71c      	b.n	80075b0 <_vfiprintf_r+0x48>
 8007776:	ab03      	add	r3, sp, #12
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	462a      	mov	r2, r5
 800777c:	4630      	mov	r0, r6
 800777e:	4b06      	ldr	r3, [pc, #24]	; (8007798 <_vfiprintf_r+0x230>)
 8007780:	a904      	add	r1, sp, #16
 8007782:	f7fe f84f 	bl	8005824 <_printf_i>
 8007786:	e7e4      	b.n	8007752 <_vfiprintf_r+0x1ea>
 8007788:	08008d04 	.word	0x08008d04
 800778c:	08008d0a 	.word	0x08008d0a
 8007790:	08008d0e 	.word	0x08008d0e
 8007794:	080052e5 	.word	0x080052e5
 8007798:	08007543 	.word	0x08007543

0800779c <__sflush_r>:
 800779c:	898a      	ldrh	r2, [r1, #12]
 800779e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a0:	4605      	mov	r5, r0
 80077a2:	0710      	lsls	r0, r2, #28
 80077a4:	460c      	mov	r4, r1
 80077a6:	d457      	bmi.n	8007858 <__sflush_r+0xbc>
 80077a8:	684b      	ldr	r3, [r1, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	dc04      	bgt.n	80077b8 <__sflush_r+0x1c>
 80077ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	dc01      	bgt.n	80077b8 <__sflush_r+0x1c>
 80077b4:	2000      	movs	r0, #0
 80077b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077ba:	2e00      	cmp	r6, #0
 80077bc:	d0fa      	beq.n	80077b4 <__sflush_r+0x18>
 80077be:	2300      	movs	r3, #0
 80077c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80077c4:	682f      	ldr	r7, [r5, #0]
 80077c6:	6a21      	ldr	r1, [r4, #32]
 80077c8:	602b      	str	r3, [r5, #0]
 80077ca:	d032      	beq.n	8007832 <__sflush_r+0x96>
 80077cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80077ce:	89a3      	ldrh	r3, [r4, #12]
 80077d0:	075a      	lsls	r2, r3, #29
 80077d2:	d505      	bpl.n	80077e0 <__sflush_r+0x44>
 80077d4:	6863      	ldr	r3, [r4, #4]
 80077d6:	1ac0      	subs	r0, r0, r3
 80077d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077da:	b10b      	cbz	r3, 80077e0 <__sflush_r+0x44>
 80077dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077de:	1ac0      	subs	r0, r0, r3
 80077e0:	2300      	movs	r3, #0
 80077e2:	4602      	mov	r2, r0
 80077e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077e6:	4628      	mov	r0, r5
 80077e8:	6a21      	ldr	r1, [r4, #32]
 80077ea:	47b0      	blx	r6
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	d106      	bne.n	8007800 <__sflush_r+0x64>
 80077f2:	6829      	ldr	r1, [r5, #0]
 80077f4:	291d      	cmp	r1, #29
 80077f6:	d82b      	bhi.n	8007850 <__sflush_r+0xb4>
 80077f8:	4a28      	ldr	r2, [pc, #160]	; (800789c <__sflush_r+0x100>)
 80077fa:	410a      	asrs	r2, r1
 80077fc:	07d6      	lsls	r6, r2, #31
 80077fe:	d427      	bmi.n	8007850 <__sflush_r+0xb4>
 8007800:	2200      	movs	r2, #0
 8007802:	6062      	str	r2, [r4, #4]
 8007804:	6922      	ldr	r2, [r4, #16]
 8007806:	04d9      	lsls	r1, r3, #19
 8007808:	6022      	str	r2, [r4, #0]
 800780a:	d504      	bpl.n	8007816 <__sflush_r+0x7a>
 800780c:	1c42      	adds	r2, r0, #1
 800780e:	d101      	bne.n	8007814 <__sflush_r+0x78>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b903      	cbnz	r3, 8007816 <__sflush_r+0x7a>
 8007814:	6560      	str	r0, [r4, #84]	; 0x54
 8007816:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007818:	602f      	str	r7, [r5, #0]
 800781a:	2900      	cmp	r1, #0
 800781c:	d0ca      	beq.n	80077b4 <__sflush_r+0x18>
 800781e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007822:	4299      	cmp	r1, r3
 8007824:	d002      	beq.n	800782c <__sflush_r+0x90>
 8007826:	4628      	mov	r0, r5
 8007828:	f7ff f95e 	bl	8006ae8 <_free_r>
 800782c:	2000      	movs	r0, #0
 800782e:	6360      	str	r0, [r4, #52]	; 0x34
 8007830:	e7c1      	b.n	80077b6 <__sflush_r+0x1a>
 8007832:	2301      	movs	r3, #1
 8007834:	4628      	mov	r0, r5
 8007836:	47b0      	blx	r6
 8007838:	1c41      	adds	r1, r0, #1
 800783a:	d1c8      	bne.n	80077ce <__sflush_r+0x32>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d0c5      	beq.n	80077ce <__sflush_r+0x32>
 8007842:	2b1d      	cmp	r3, #29
 8007844:	d001      	beq.n	800784a <__sflush_r+0xae>
 8007846:	2b16      	cmp	r3, #22
 8007848:	d101      	bne.n	800784e <__sflush_r+0xb2>
 800784a:	602f      	str	r7, [r5, #0]
 800784c:	e7b2      	b.n	80077b4 <__sflush_r+0x18>
 800784e:	89a3      	ldrh	r3, [r4, #12]
 8007850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007854:	81a3      	strh	r3, [r4, #12]
 8007856:	e7ae      	b.n	80077b6 <__sflush_r+0x1a>
 8007858:	690f      	ldr	r7, [r1, #16]
 800785a:	2f00      	cmp	r7, #0
 800785c:	d0aa      	beq.n	80077b4 <__sflush_r+0x18>
 800785e:	0793      	lsls	r3, r2, #30
 8007860:	bf18      	it	ne
 8007862:	2300      	movne	r3, #0
 8007864:	680e      	ldr	r6, [r1, #0]
 8007866:	bf08      	it	eq
 8007868:	694b      	ldreq	r3, [r1, #20]
 800786a:	1bf6      	subs	r6, r6, r7
 800786c:	600f      	str	r7, [r1, #0]
 800786e:	608b      	str	r3, [r1, #8]
 8007870:	2e00      	cmp	r6, #0
 8007872:	dd9f      	ble.n	80077b4 <__sflush_r+0x18>
 8007874:	4633      	mov	r3, r6
 8007876:	463a      	mov	r2, r7
 8007878:	4628      	mov	r0, r5
 800787a:	6a21      	ldr	r1, [r4, #32]
 800787c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007880:	47e0      	blx	ip
 8007882:	2800      	cmp	r0, #0
 8007884:	dc06      	bgt.n	8007894 <__sflush_r+0xf8>
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	f04f 30ff 	mov.w	r0, #4294967295
 800788c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007890:	81a3      	strh	r3, [r4, #12]
 8007892:	e790      	b.n	80077b6 <__sflush_r+0x1a>
 8007894:	4407      	add	r7, r0
 8007896:	1a36      	subs	r6, r6, r0
 8007898:	e7ea      	b.n	8007870 <__sflush_r+0xd4>
 800789a:	bf00      	nop
 800789c:	dfbffffe 	.word	0xdfbffffe

080078a0 <_fflush_r>:
 80078a0:	b538      	push	{r3, r4, r5, lr}
 80078a2:	690b      	ldr	r3, [r1, #16]
 80078a4:	4605      	mov	r5, r0
 80078a6:	460c      	mov	r4, r1
 80078a8:	b913      	cbnz	r3, 80078b0 <_fflush_r+0x10>
 80078aa:	2500      	movs	r5, #0
 80078ac:	4628      	mov	r0, r5
 80078ae:	bd38      	pop	{r3, r4, r5, pc}
 80078b0:	b118      	cbz	r0, 80078ba <_fflush_r+0x1a>
 80078b2:	6a03      	ldr	r3, [r0, #32]
 80078b4:	b90b      	cbnz	r3, 80078ba <_fflush_r+0x1a>
 80078b6:	f7fe f951 	bl	8005b5c <__sinit>
 80078ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0f3      	beq.n	80078aa <_fflush_r+0xa>
 80078c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80078c4:	07d0      	lsls	r0, r2, #31
 80078c6:	d404      	bmi.n	80078d2 <_fflush_r+0x32>
 80078c8:	0599      	lsls	r1, r3, #22
 80078ca:	d402      	bmi.n	80078d2 <_fflush_r+0x32>
 80078cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ce:	f7fe fa7d 	bl	8005dcc <__retarget_lock_acquire_recursive>
 80078d2:	4628      	mov	r0, r5
 80078d4:	4621      	mov	r1, r4
 80078d6:	f7ff ff61 	bl	800779c <__sflush_r>
 80078da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078dc:	4605      	mov	r5, r0
 80078de:	07da      	lsls	r2, r3, #31
 80078e0:	d4e4      	bmi.n	80078ac <_fflush_r+0xc>
 80078e2:	89a3      	ldrh	r3, [r4, #12]
 80078e4:	059b      	lsls	r3, r3, #22
 80078e6:	d4e1      	bmi.n	80078ac <_fflush_r+0xc>
 80078e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ea:	f7fe fa70 	bl	8005dce <__retarget_lock_release_recursive>
 80078ee:	e7dd      	b.n	80078ac <_fflush_r+0xc>

080078f0 <__swbuf_r>:
 80078f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f2:	460e      	mov	r6, r1
 80078f4:	4614      	mov	r4, r2
 80078f6:	4605      	mov	r5, r0
 80078f8:	b118      	cbz	r0, 8007902 <__swbuf_r+0x12>
 80078fa:	6a03      	ldr	r3, [r0, #32]
 80078fc:	b90b      	cbnz	r3, 8007902 <__swbuf_r+0x12>
 80078fe:	f7fe f92d 	bl	8005b5c <__sinit>
 8007902:	69a3      	ldr	r3, [r4, #24]
 8007904:	60a3      	str	r3, [r4, #8]
 8007906:	89a3      	ldrh	r3, [r4, #12]
 8007908:	071a      	lsls	r2, r3, #28
 800790a:	d525      	bpl.n	8007958 <__swbuf_r+0x68>
 800790c:	6923      	ldr	r3, [r4, #16]
 800790e:	b31b      	cbz	r3, 8007958 <__swbuf_r+0x68>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	6922      	ldr	r2, [r4, #16]
 8007914:	b2f6      	uxtb	r6, r6
 8007916:	1a98      	subs	r0, r3, r2
 8007918:	6963      	ldr	r3, [r4, #20]
 800791a:	4637      	mov	r7, r6
 800791c:	4283      	cmp	r3, r0
 800791e:	dc04      	bgt.n	800792a <__swbuf_r+0x3a>
 8007920:	4621      	mov	r1, r4
 8007922:	4628      	mov	r0, r5
 8007924:	f7ff ffbc 	bl	80078a0 <_fflush_r>
 8007928:	b9e0      	cbnz	r0, 8007964 <__swbuf_r+0x74>
 800792a:	68a3      	ldr	r3, [r4, #8]
 800792c:	3b01      	subs	r3, #1
 800792e:	60a3      	str	r3, [r4, #8]
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	6022      	str	r2, [r4, #0]
 8007936:	701e      	strb	r6, [r3, #0]
 8007938:	6962      	ldr	r2, [r4, #20]
 800793a:	1c43      	adds	r3, r0, #1
 800793c:	429a      	cmp	r2, r3
 800793e:	d004      	beq.n	800794a <__swbuf_r+0x5a>
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	07db      	lsls	r3, r3, #31
 8007944:	d506      	bpl.n	8007954 <__swbuf_r+0x64>
 8007946:	2e0a      	cmp	r6, #10
 8007948:	d104      	bne.n	8007954 <__swbuf_r+0x64>
 800794a:	4621      	mov	r1, r4
 800794c:	4628      	mov	r0, r5
 800794e:	f7ff ffa7 	bl	80078a0 <_fflush_r>
 8007952:	b938      	cbnz	r0, 8007964 <__swbuf_r+0x74>
 8007954:	4638      	mov	r0, r7
 8007956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007958:	4621      	mov	r1, r4
 800795a:	4628      	mov	r0, r5
 800795c:	f000 f806 	bl	800796c <__swsetup_r>
 8007960:	2800      	cmp	r0, #0
 8007962:	d0d5      	beq.n	8007910 <__swbuf_r+0x20>
 8007964:	f04f 37ff 	mov.w	r7, #4294967295
 8007968:	e7f4      	b.n	8007954 <__swbuf_r+0x64>
	...

0800796c <__swsetup_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4b2a      	ldr	r3, [pc, #168]	; (8007a18 <__swsetup_r+0xac>)
 8007970:	4605      	mov	r5, r0
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	460c      	mov	r4, r1
 8007976:	b118      	cbz	r0, 8007980 <__swsetup_r+0x14>
 8007978:	6a03      	ldr	r3, [r0, #32]
 800797a:	b90b      	cbnz	r3, 8007980 <__swsetup_r+0x14>
 800797c:	f7fe f8ee 	bl	8005b5c <__sinit>
 8007980:	89a3      	ldrh	r3, [r4, #12]
 8007982:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007986:	0718      	lsls	r0, r3, #28
 8007988:	d422      	bmi.n	80079d0 <__swsetup_r+0x64>
 800798a:	06d9      	lsls	r1, r3, #27
 800798c:	d407      	bmi.n	800799e <__swsetup_r+0x32>
 800798e:	2309      	movs	r3, #9
 8007990:	602b      	str	r3, [r5, #0]
 8007992:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007996:	f04f 30ff 	mov.w	r0, #4294967295
 800799a:	81a3      	strh	r3, [r4, #12]
 800799c:	e034      	b.n	8007a08 <__swsetup_r+0x9c>
 800799e:	0758      	lsls	r0, r3, #29
 80079a0:	d512      	bpl.n	80079c8 <__swsetup_r+0x5c>
 80079a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079a4:	b141      	cbz	r1, 80079b8 <__swsetup_r+0x4c>
 80079a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079aa:	4299      	cmp	r1, r3
 80079ac:	d002      	beq.n	80079b4 <__swsetup_r+0x48>
 80079ae:	4628      	mov	r0, r5
 80079b0:	f7ff f89a 	bl	8006ae8 <_free_r>
 80079b4:	2300      	movs	r3, #0
 80079b6:	6363      	str	r3, [r4, #52]	; 0x34
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079be:	81a3      	strh	r3, [r4, #12]
 80079c0:	2300      	movs	r3, #0
 80079c2:	6063      	str	r3, [r4, #4]
 80079c4:	6923      	ldr	r3, [r4, #16]
 80079c6:	6023      	str	r3, [r4, #0]
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	f043 0308 	orr.w	r3, r3, #8
 80079ce:	81a3      	strh	r3, [r4, #12]
 80079d0:	6923      	ldr	r3, [r4, #16]
 80079d2:	b94b      	cbnz	r3, 80079e8 <__swsetup_r+0x7c>
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079de:	d003      	beq.n	80079e8 <__swsetup_r+0x7c>
 80079e0:	4621      	mov	r1, r4
 80079e2:	4628      	mov	r0, r5
 80079e4:	f000 f8eb 	bl	8007bbe <__smakebuf_r>
 80079e8:	89a0      	ldrh	r0, [r4, #12]
 80079ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079ee:	f010 0301 	ands.w	r3, r0, #1
 80079f2:	d00a      	beq.n	8007a0a <__swsetup_r+0x9e>
 80079f4:	2300      	movs	r3, #0
 80079f6:	60a3      	str	r3, [r4, #8]
 80079f8:	6963      	ldr	r3, [r4, #20]
 80079fa:	425b      	negs	r3, r3
 80079fc:	61a3      	str	r3, [r4, #24]
 80079fe:	6923      	ldr	r3, [r4, #16]
 8007a00:	b943      	cbnz	r3, 8007a14 <__swsetup_r+0xa8>
 8007a02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a06:	d1c4      	bne.n	8007992 <__swsetup_r+0x26>
 8007a08:	bd38      	pop	{r3, r4, r5, pc}
 8007a0a:	0781      	lsls	r1, r0, #30
 8007a0c:	bf58      	it	pl
 8007a0e:	6963      	ldrpl	r3, [r4, #20]
 8007a10:	60a3      	str	r3, [r4, #8]
 8007a12:	e7f4      	b.n	80079fe <__swsetup_r+0x92>
 8007a14:	2000      	movs	r0, #0
 8007a16:	e7f7      	b.n	8007a08 <__swsetup_r+0x9c>
 8007a18:	2000006c 	.word	0x2000006c

08007a1c <memmove>:
 8007a1c:	4288      	cmp	r0, r1
 8007a1e:	b510      	push	{r4, lr}
 8007a20:	eb01 0402 	add.w	r4, r1, r2
 8007a24:	d902      	bls.n	8007a2c <memmove+0x10>
 8007a26:	4284      	cmp	r4, r0
 8007a28:	4623      	mov	r3, r4
 8007a2a:	d807      	bhi.n	8007a3c <memmove+0x20>
 8007a2c:	1e43      	subs	r3, r0, #1
 8007a2e:	42a1      	cmp	r1, r4
 8007a30:	d008      	beq.n	8007a44 <memmove+0x28>
 8007a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a3a:	e7f8      	b.n	8007a2e <memmove+0x12>
 8007a3c:	4601      	mov	r1, r0
 8007a3e:	4402      	add	r2, r0
 8007a40:	428a      	cmp	r2, r1
 8007a42:	d100      	bne.n	8007a46 <memmove+0x2a>
 8007a44:	bd10      	pop	{r4, pc}
 8007a46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a4e:	e7f7      	b.n	8007a40 <memmove+0x24>

08007a50 <__assert_func>:
 8007a50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a52:	4614      	mov	r4, r2
 8007a54:	461a      	mov	r2, r3
 8007a56:	4b09      	ldr	r3, [pc, #36]	; (8007a7c <__assert_func+0x2c>)
 8007a58:	4605      	mov	r5, r0
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68d8      	ldr	r0, [r3, #12]
 8007a5e:	b14c      	cbz	r4, 8007a74 <__assert_func+0x24>
 8007a60:	4b07      	ldr	r3, [pc, #28]	; (8007a80 <__assert_func+0x30>)
 8007a62:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a66:	9100      	str	r1, [sp, #0]
 8007a68:	462b      	mov	r3, r5
 8007a6a:	4906      	ldr	r1, [pc, #24]	; (8007a84 <__assert_func+0x34>)
 8007a6c:	f000 f870 	bl	8007b50 <fiprintf>
 8007a70:	f000 f904 	bl	8007c7c <abort>
 8007a74:	4b04      	ldr	r3, [pc, #16]	; (8007a88 <__assert_func+0x38>)
 8007a76:	461c      	mov	r4, r3
 8007a78:	e7f3      	b.n	8007a62 <__assert_func+0x12>
 8007a7a:	bf00      	nop
 8007a7c:	2000006c 	.word	0x2000006c
 8007a80:	08008d1f 	.word	0x08008d1f
 8007a84:	08008d2c 	.word	0x08008d2c
 8007a88:	08008d5a 	.word	0x08008d5a

08007a8c <_calloc_r>:
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	fba1 5402 	umull	r5, r4, r1, r2
 8007a92:	b934      	cbnz	r4, 8007aa2 <_calloc_r+0x16>
 8007a94:	4629      	mov	r1, r5
 8007a96:	f7fd fafd 	bl	8005094 <_malloc_r>
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	b928      	cbnz	r0, 8007aaa <_calloc_r+0x1e>
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	bd70      	pop	{r4, r5, r6, pc}
 8007aa2:	220c      	movs	r2, #12
 8007aa4:	2600      	movs	r6, #0
 8007aa6:	6002      	str	r2, [r0, #0]
 8007aa8:	e7f9      	b.n	8007a9e <_calloc_r+0x12>
 8007aaa:	462a      	mov	r2, r5
 8007aac:	4621      	mov	r1, r4
 8007aae:	f7fe f901 	bl	8005cb4 <memset>
 8007ab2:	e7f4      	b.n	8007a9e <_calloc_r+0x12>

08007ab4 <__ascii_mbtowc>:
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	b901      	cbnz	r1, 8007aba <__ascii_mbtowc+0x6>
 8007ab8:	a901      	add	r1, sp, #4
 8007aba:	b142      	cbz	r2, 8007ace <__ascii_mbtowc+0x1a>
 8007abc:	b14b      	cbz	r3, 8007ad2 <__ascii_mbtowc+0x1e>
 8007abe:	7813      	ldrb	r3, [r2, #0]
 8007ac0:	600b      	str	r3, [r1, #0]
 8007ac2:	7812      	ldrb	r2, [r2, #0]
 8007ac4:	1e10      	subs	r0, r2, #0
 8007ac6:	bf18      	it	ne
 8007ac8:	2001      	movne	r0, #1
 8007aca:	b002      	add	sp, #8
 8007acc:	4770      	bx	lr
 8007ace:	4610      	mov	r0, r2
 8007ad0:	e7fb      	b.n	8007aca <__ascii_mbtowc+0x16>
 8007ad2:	f06f 0001 	mvn.w	r0, #1
 8007ad6:	e7f8      	b.n	8007aca <__ascii_mbtowc+0x16>

08007ad8 <_realloc_r>:
 8007ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007adc:	4680      	mov	r8, r0
 8007ade:	4614      	mov	r4, r2
 8007ae0:	460e      	mov	r6, r1
 8007ae2:	b921      	cbnz	r1, 8007aee <_realloc_r+0x16>
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aea:	f7fd bad3 	b.w	8005094 <_malloc_r>
 8007aee:	b92a      	cbnz	r2, 8007afc <_realloc_r+0x24>
 8007af0:	f7fe fffa 	bl	8006ae8 <_free_r>
 8007af4:	4625      	mov	r5, r4
 8007af6:	4628      	mov	r0, r5
 8007af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007afc:	f000 f8c5 	bl	8007c8a <_malloc_usable_size_r>
 8007b00:	4284      	cmp	r4, r0
 8007b02:	4607      	mov	r7, r0
 8007b04:	d802      	bhi.n	8007b0c <_realloc_r+0x34>
 8007b06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b0a:	d812      	bhi.n	8007b32 <_realloc_r+0x5a>
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	4640      	mov	r0, r8
 8007b10:	f7fd fac0 	bl	8005094 <_malloc_r>
 8007b14:	4605      	mov	r5, r0
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d0ed      	beq.n	8007af6 <_realloc_r+0x1e>
 8007b1a:	42bc      	cmp	r4, r7
 8007b1c:	4622      	mov	r2, r4
 8007b1e:	4631      	mov	r1, r6
 8007b20:	bf28      	it	cs
 8007b22:	463a      	movcs	r2, r7
 8007b24:	f7fe f962 	bl	8005dec <memcpy>
 8007b28:	4631      	mov	r1, r6
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	f7fe ffdc 	bl	8006ae8 <_free_r>
 8007b30:	e7e1      	b.n	8007af6 <_realloc_r+0x1e>
 8007b32:	4635      	mov	r5, r6
 8007b34:	e7df      	b.n	8007af6 <_realloc_r+0x1e>

08007b36 <__ascii_wctomb>:
 8007b36:	4603      	mov	r3, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	b141      	cbz	r1, 8007b4e <__ascii_wctomb+0x18>
 8007b3c:	2aff      	cmp	r2, #255	; 0xff
 8007b3e:	d904      	bls.n	8007b4a <__ascii_wctomb+0x14>
 8007b40:	228a      	movs	r2, #138	; 0x8a
 8007b42:	f04f 30ff 	mov.w	r0, #4294967295
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	4770      	bx	lr
 8007b4a:	2001      	movs	r0, #1
 8007b4c:	700a      	strb	r2, [r1, #0]
 8007b4e:	4770      	bx	lr

08007b50 <fiprintf>:
 8007b50:	b40e      	push	{r1, r2, r3}
 8007b52:	b503      	push	{r0, r1, lr}
 8007b54:	4601      	mov	r1, r0
 8007b56:	ab03      	add	r3, sp, #12
 8007b58:	4805      	ldr	r0, [pc, #20]	; (8007b70 <fiprintf+0x20>)
 8007b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b5e:	6800      	ldr	r0, [r0, #0]
 8007b60:	9301      	str	r3, [sp, #4]
 8007b62:	f7ff fd01 	bl	8007568 <_vfiprintf_r>
 8007b66:	b002      	add	sp, #8
 8007b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b6c:	b003      	add	sp, #12
 8007b6e:	4770      	bx	lr
 8007b70:	2000006c 	.word	0x2000006c

08007b74 <__swhatbuf_r>:
 8007b74:	b570      	push	{r4, r5, r6, lr}
 8007b76:	460c      	mov	r4, r1
 8007b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b7c:	4615      	mov	r5, r2
 8007b7e:	2900      	cmp	r1, #0
 8007b80:	461e      	mov	r6, r3
 8007b82:	b096      	sub	sp, #88	; 0x58
 8007b84:	da0c      	bge.n	8007ba0 <__swhatbuf_r+0x2c>
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	2100      	movs	r1, #0
 8007b8a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007b8e:	bf0c      	ite	eq
 8007b90:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007b94:	2340      	movne	r3, #64	; 0x40
 8007b96:	2000      	movs	r0, #0
 8007b98:	6031      	str	r1, [r6, #0]
 8007b9a:	602b      	str	r3, [r5, #0]
 8007b9c:	b016      	add	sp, #88	; 0x58
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	466a      	mov	r2, sp
 8007ba2:	f000 f849 	bl	8007c38 <_fstat_r>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	dbed      	blt.n	8007b86 <__swhatbuf_r+0x12>
 8007baa:	9901      	ldr	r1, [sp, #4]
 8007bac:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007bb0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007bb4:	4259      	negs	r1, r3
 8007bb6:	4159      	adcs	r1, r3
 8007bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bbc:	e7eb      	b.n	8007b96 <__swhatbuf_r+0x22>

08007bbe <__smakebuf_r>:
 8007bbe:	898b      	ldrh	r3, [r1, #12]
 8007bc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bc2:	079d      	lsls	r5, r3, #30
 8007bc4:	4606      	mov	r6, r0
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	d507      	bpl.n	8007bda <__smakebuf_r+0x1c>
 8007bca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bce:	6023      	str	r3, [r4, #0]
 8007bd0:	6123      	str	r3, [r4, #16]
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	6163      	str	r3, [r4, #20]
 8007bd6:	b002      	add	sp, #8
 8007bd8:	bd70      	pop	{r4, r5, r6, pc}
 8007bda:	466a      	mov	r2, sp
 8007bdc:	ab01      	add	r3, sp, #4
 8007bde:	f7ff ffc9 	bl	8007b74 <__swhatbuf_r>
 8007be2:	9900      	ldr	r1, [sp, #0]
 8007be4:	4605      	mov	r5, r0
 8007be6:	4630      	mov	r0, r6
 8007be8:	f7fd fa54 	bl	8005094 <_malloc_r>
 8007bec:	b948      	cbnz	r0, 8007c02 <__smakebuf_r+0x44>
 8007bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bf2:	059a      	lsls	r2, r3, #22
 8007bf4:	d4ef      	bmi.n	8007bd6 <__smakebuf_r+0x18>
 8007bf6:	f023 0303 	bic.w	r3, r3, #3
 8007bfa:	f043 0302 	orr.w	r3, r3, #2
 8007bfe:	81a3      	strh	r3, [r4, #12]
 8007c00:	e7e3      	b.n	8007bca <__smakebuf_r+0xc>
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	6020      	str	r0, [r4, #0]
 8007c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c0a:	81a3      	strh	r3, [r4, #12]
 8007c0c:	9b00      	ldr	r3, [sp, #0]
 8007c0e:	6120      	str	r0, [r4, #16]
 8007c10:	6163      	str	r3, [r4, #20]
 8007c12:	9b01      	ldr	r3, [sp, #4]
 8007c14:	b15b      	cbz	r3, 8007c2e <__smakebuf_r+0x70>
 8007c16:	4630      	mov	r0, r6
 8007c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c1c:	f000 f81e 	bl	8007c5c <_isatty_r>
 8007c20:	b128      	cbz	r0, 8007c2e <__smakebuf_r+0x70>
 8007c22:	89a3      	ldrh	r3, [r4, #12]
 8007c24:	f023 0303 	bic.w	r3, r3, #3
 8007c28:	f043 0301 	orr.w	r3, r3, #1
 8007c2c:	81a3      	strh	r3, [r4, #12]
 8007c2e:	89a3      	ldrh	r3, [r4, #12]
 8007c30:	431d      	orrs	r5, r3
 8007c32:	81a5      	strh	r5, [r4, #12]
 8007c34:	e7cf      	b.n	8007bd6 <__smakebuf_r+0x18>
	...

08007c38 <_fstat_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	4d06      	ldr	r5, [pc, #24]	; (8007c58 <_fstat_r+0x20>)
 8007c3e:	4604      	mov	r4, r0
 8007c40:	4608      	mov	r0, r1
 8007c42:	4611      	mov	r1, r2
 8007c44:	602b      	str	r3, [r5, #0]
 8007c46:	f7fa f95c 	bl	8001f02 <_fstat>
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	d102      	bne.n	8007c54 <_fstat_r+0x1c>
 8007c4e:	682b      	ldr	r3, [r5, #0]
 8007c50:	b103      	cbz	r3, 8007c54 <_fstat_r+0x1c>
 8007c52:	6023      	str	r3, [r4, #0]
 8007c54:	bd38      	pop	{r3, r4, r5, pc}
 8007c56:	bf00      	nop
 8007c58:	20000c28 	.word	0x20000c28

08007c5c <_isatty_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	2300      	movs	r3, #0
 8007c60:	4d05      	ldr	r5, [pc, #20]	; (8007c78 <_isatty_r+0x1c>)
 8007c62:	4604      	mov	r4, r0
 8007c64:	4608      	mov	r0, r1
 8007c66:	602b      	str	r3, [r5, #0]
 8007c68:	f7fa f95a 	bl	8001f20 <_isatty>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d102      	bne.n	8007c76 <_isatty_r+0x1a>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	b103      	cbz	r3, 8007c76 <_isatty_r+0x1a>
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	20000c28 	.word	0x20000c28

08007c7c <abort>:
 8007c7c:	2006      	movs	r0, #6
 8007c7e:	b508      	push	{r3, lr}
 8007c80:	f000 f834 	bl	8007cec <raise>
 8007c84:	2001      	movs	r0, #1
 8007c86:	f7fa f8ee 	bl	8001e66 <_exit>

08007c8a <_malloc_usable_size_r>:
 8007c8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c8e:	1f18      	subs	r0, r3, #4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	bfbc      	itt	lt
 8007c94:	580b      	ldrlt	r3, [r1, r0]
 8007c96:	18c0      	addlt	r0, r0, r3
 8007c98:	4770      	bx	lr

08007c9a <_raise_r>:
 8007c9a:	291f      	cmp	r1, #31
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	460d      	mov	r5, r1
 8007ca2:	d904      	bls.n	8007cae <_raise_r+0x14>
 8007ca4:	2316      	movs	r3, #22
 8007ca6:	6003      	str	r3, [r0, #0]
 8007ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cac:	bd38      	pop	{r3, r4, r5, pc}
 8007cae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007cb0:	b112      	cbz	r2, 8007cb8 <_raise_r+0x1e>
 8007cb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cb6:	b94b      	cbnz	r3, 8007ccc <_raise_r+0x32>
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 f831 	bl	8007d20 <_getpid_r>
 8007cbe:	462a      	mov	r2, r5
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cc8:	f000 b818 	b.w	8007cfc <_kill_r>
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d00a      	beq.n	8007ce6 <_raise_r+0x4c>
 8007cd0:	1c59      	adds	r1, r3, #1
 8007cd2:	d103      	bne.n	8007cdc <_raise_r+0x42>
 8007cd4:	2316      	movs	r3, #22
 8007cd6:	6003      	str	r3, [r0, #0]
 8007cd8:	2001      	movs	r0, #1
 8007cda:	e7e7      	b.n	8007cac <_raise_r+0x12>
 8007cdc:	2400      	movs	r4, #0
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ce4:	4798      	blx	r3
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	e7e0      	b.n	8007cac <_raise_r+0x12>
	...

08007cec <raise>:
 8007cec:	4b02      	ldr	r3, [pc, #8]	; (8007cf8 <raise+0xc>)
 8007cee:	4601      	mov	r1, r0
 8007cf0:	6818      	ldr	r0, [r3, #0]
 8007cf2:	f7ff bfd2 	b.w	8007c9a <_raise_r>
 8007cf6:	bf00      	nop
 8007cf8:	2000006c 	.word	0x2000006c

08007cfc <_kill_r>:
 8007cfc:	b538      	push	{r3, r4, r5, lr}
 8007cfe:	2300      	movs	r3, #0
 8007d00:	4d06      	ldr	r5, [pc, #24]	; (8007d1c <_kill_r+0x20>)
 8007d02:	4604      	mov	r4, r0
 8007d04:	4608      	mov	r0, r1
 8007d06:	4611      	mov	r1, r2
 8007d08:	602b      	str	r3, [r5, #0]
 8007d0a:	f7fa f89c 	bl	8001e46 <_kill>
 8007d0e:	1c43      	adds	r3, r0, #1
 8007d10:	d102      	bne.n	8007d18 <_kill_r+0x1c>
 8007d12:	682b      	ldr	r3, [r5, #0]
 8007d14:	b103      	cbz	r3, 8007d18 <_kill_r+0x1c>
 8007d16:	6023      	str	r3, [r4, #0]
 8007d18:	bd38      	pop	{r3, r4, r5, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20000c28 	.word	0x20000c28

08007d20 <_getpid_r>:
 8007d20:	f7fa b88a 	b.w	8001e38 <_getpid>

08007d24 <_init>:
 8007d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d26:	bf00      	nop
 8007d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2a:	bc08      	pop	{r3}
 8007d2c:	469e      	mov	lr, r3
 8007d2e:	4770      	bx	lr

08007d30 <_fini>:
 8007d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d32:	bf00      	nop
 8007d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d36:	bc08      	pop	{r3}
 8007d38:	469e      	mov	lr, r3
 8007d3a:	4770      	bx	lr
